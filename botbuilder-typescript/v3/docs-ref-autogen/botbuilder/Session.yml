### YamlMime:UniversalReference
items:
  - uid: botbuilder.Session
    name: Session
    fullName: Session
    children:
      - botbuilder.Session.activeDialogStackEntry
      - botbuilder.Session.beginDialog
      - botbuilder.Session.cancelDialog
      - botbuilder.Session.clearDialogStack
      - botbuilder.Session.connector
      - botbuilder.Session.conversationData
      - botbuilder.Session.delay
      - botbuilder.Session.dialogData
      - botbuilder.Session.dialogStack
      - botbuilder.Session.dispatch
      - botbuilder.Session.endConversation
      - botbuilder.Session.endDialog
      - botbuilder.Session.endDialogWithResult
      - botbuilder.Session.error
      - botbuilder.Session.findDialogStackEntry
      - botbuilder.Session.forEachDialogStackEntry
      - botbuilder.Session.gettext
      - botbuilder.Session.isReset
      - botbuilder.Session.library
      - botbuilder.Session.localizer
      - botbuilder.Session.message
      - botbuilder.Session.messageSent
      - botbuilder.Session.ngettext
      - botbuilder.Session.on
      - botbuilder.Session.popDialogStackEntry
      - botbuilder.Session.preferredLocale
      - botbuilder.Session.privateConversationData
      - botbuilder.Session.pruneDialogStack
      - botbuilder.Session.pushDialogStackEntry
      - botbuilder.Session.replaceDialog
      - botbuilder.Session.reset
      - botbuilder.Session.routeToActiveDialog
      - botbuilder.Session.save
      - botbuilder.Session.say_1
      - botbuilder.Session.say
      - botbuilder.Session.sayLocalized
      - botbuilder.Session.send
      - botbuilder.Session.sendBatch
      - botbuilder.Session.sendLocalized
      - botbuilder.Session.sendTyping
      - botbuilder.Session.constructor
      - botbuilder.Session.sessionState
      - botbuilder.Session.toRecognizeContext
      - botbuilder.Session.userData
      - botbuilder.Session.validateDialogStack
      - botbuilder.Session.watch
      - botbuilder.Session.watchable
      - botbuilder.Session.watchableList
      - botbuilder.Session.watchList
    langs:
      - typeScript
    type: class
    summary: Manages the bots conversation with a user.
    package: botbuilder
  - uid: botbuilder.Session.activeDialogStackEntry
    name: 'activeDialogStackEntry(IDialogState[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a stacks active dialog or null.
    syntax:
      content: 'static function activeDialogStackEntry(stack: IDialogState[])'
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: |
            The dialog stack to return the entry for.
      return:
        type:
          - botbuilder.IDialogState
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.beginDialog
    name: 'beginDialog(string, T)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Passes control of the conversation to a new dialog. The current dialog
      will be suspended

      until the child dialog completes. Once the child ends the current dialog
      will receive a

      call to
      [dialogResumed()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.dialog.html#dialogresumed)

      where it can inspect any results returned from the child.
    syntax:
      content: 'function beginDialog<T>(id: string, args?: T)'
      parameters:
        - id: id
          type:
            - string
          description: Unique ID of the dialog to start.
        - id: args
          type:
            - T
          description: >
            (Optional) arguments to pass to the dialogs
            [begin()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.dialog.html#begin)
            method.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.cancelDialog
    name: 'cancelDialog(string | number, string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Cancels an existing dialog and optionally starts a new one it its place. 
      Unlike [endDialog()](#enddialog)

      and [replaceDialog()](#replacedialog) which affect the current dialog,
      this method lets you end a

      parent dialog anywhere on the stack. The parent of the canceled dialog
      will be continued as if the

      dialog had called endDialog(). A special
      [ResumeReason.canceled](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.resumereason#canceled)

      will be returned to indicate that the dialog was canceled.
    syntax:
      content: >-
        function cancelDialog(dialogId: string | number, replaceWithId?: string,
        replaceWithArgs?: any)
      parameters:
        - id: dialogId
          type:
            - string | number
          description: >-

            * __dialogId:__ _{string}_ - ID of the dialog to end. If multiple
            occurences of the dialog exist on the dialog stack, the last
            occurance will be canceled.

            * __dialogId:__ _{number}_ - Index of the dialog on the stack to
            cancel. This is the preferred way to cancel a dialog from an action
            handler as it ensures that the correct instance is canceled.
        - id: replaceWithId
          type:
            - string
          description: >-
            (Optional) specifies an ID to start in the canceled dialogs place.
            This prevents the dialogs parent from being resumed.
          optional: true
        - id: replaceWithArgs
          type:
            - any
          description: |
            (Optional) arguments to pass to the new dialog.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.clearDialogStack
    name: clearDialogStack()
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the current dialog stack.
    syntax:
      content: function clearDialogStack()
      parameters: []
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.connector
    name: connector
    fullName: connector
    children: []
    langs:
      - typeScript
    type: property
    summary: The connector being used for this session.
    syntax:
      content: 'connector: IConnector'
      return:
        type:
          - botbuilder.IConnector
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.conversationData
    name: conversationData
    fullName: conversationData
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Shared conversation data that's visible to all members of the
      conversation.
    syntax:
      content: 'conversationData: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.delay
    name: delay(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Inserts a delay between outgoing messages.
    syntax:
      content: 'function delay(delay: number)'
      parameters:
        - id: delay
          type:
            - number
          description: |
            Number of milliseconds to pause for.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.dialogData
    name: dialogData
    fullName: dialogData
    children: []
    langs:
      - typeScript
    type: property
    summary: Data that's only visible to the current dialog.
    syntax:
      content: 'dialogData: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.dialogStack
    name: 'dialogStack(IDialogState[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets/sets the current dialog stack. A copy of the current dialog is
      returned so if any

      changes are made to the returned stack they will need to be copied back to
      the session

      via a second call to `session.dialogStack()`.
    syntax:
      content: 'function dialogStack(newStack?: IDialogState[])'
      parameters:
        - id: newStack
          type:
            - 'botbuilder.IDialogState[]'
          description: >
            (Optional) dialog stack to assign to session. The sessions
            [dialogData](#dialogdata) will be updated to reflect the state of
            the new active dialog.
          optional: true
      return:
        type:
          - 'botbuilder.IDialogState[]'
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.dispatch
    name: 'dispatch(ISessionState, IMessage, Function)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Finalizes the initialization of the session object and then routes the
      session through all

      installed middleware. The passed in `next()` function will be called as
      the last step of the

      middleware chain.
    syntax:
      content: >-
        function dispatch(sessionState: ISessionState, message: IMessage, next:
        Function)
      parameters:
        - id: sessionState
          type:
            - botbuilder.ISessionState
          description: >-
            The current session state. If `null` a new conversation will be
            started beginning with the configured [dialogId](#dialogid).
        - id: message
          type:
            - botbuilder.IMessage
          description: The message to route through middleware.
        - id: next
          type:
            - Function
          description: |
            The function to invoke as the last step of the middleware chain.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.endConversation
    name: 'endConversation(TextOrMessageType, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ends the current conversation and optionally sends a message to the user.
    syntax:
      content: 'function endConversation(message?: TextOrMessageType, args: any[])'
      parameters:
        - id: message
          type:
            - botbuilder.TextOrMessageType
          description: >-
            (Optional) text/message to send the user before ending the
            conversation.
          optional: true
        - id: args
          type:
            - 'any[]'
          description: >
            (Optional) arguments used to format the final output text when
            __message__ is a _{string|string[]}_.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.endDialog
    name: 'endDialog(TextOrMessageType, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ends the current dialog and optionally sends a message to the user. The
      parent will be resumed with an
      [IDialogResult.resumed](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogresult.html#resumed)

      reason of
      [completed](/en-us/node/builder/chat-reference/enums/_botbuilder_d_.resumereason.html#completed).
    syntax:
      content: 'function endDialog(message?: TextOrMessageType, args: any[])'
      parameters:
        - id: message
          type:
            - botbuilder.TextOrMessageType
          description: (Optional) text/message to send the user before ending the dialog.
          optional: true
        - id: args
          type:
            - 'any[]'
          description: >
            (Optional) arguments used to format the final output text when
            __message__ is a _{string|string[]}_.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.endDialogWithResult
    name: endDialogWithResult(IDialogResult<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ends the current dialog and optionally returns a result to the dialogs
      parent.
    syntax:
      content: 'function endDialogWithResult(result?: IDialogResult<any>)'
      parameters:
        - id: result
          type:
            - botbuilder.IDialogResult<any>
          description: >
            (Optional) result to send the user. The value you'd like to return
            should be in the
            [response](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogresult#response)
            field.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.error
    name: error(Error)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that an error occured. The bot will signal the error via an
      on('error', err) event.
    syntax:
      content: 'function error(err: Error)'
      parameters:
        - id: err
          type:
            - Error
          description: Error that occured.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.findDialogStackEntry
    name: 'findDialogStackEntry(IDialogState[], string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Searches a dialog stack for a specific dialog, in either a forward or
      reverse direction,

      returning its index.
    syntax:
      content: >-
        static function findDialogStackEntry(stack: IDialogState[], dialogId:
        string, reverse?: boolean)
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: The dialog stack to search.
        - id: dialogId
          type:
            - string
          description: >-
            The unique ID of the dialog, in `<namespace>:<dialog>` format, to
            search for.
        - id: reverse
          type:
            - boolean
          description: >
            (Optional) if true the stack will be searched starting with the
            active dialog and working its way up to the root.
          optional: true
      return:
        type:
          - number
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.forEachDialogStackEntry
    name: >-
      forEachDialogStackEntry(IDialogState[], boolean, (entry: IDialogState,
      index: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enumerates all a stacks dialog entries in either a forward or reverse
      direction.
    syntax:
      content: >-
        static function forEachDialogStackEntry(stack: IDialogState[], reverse:
        boolean, fn: (entry: IDialogState, index: number) => void)
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: The dialog stack to enumerate.
        - id: reverse
          type:
            - boolean
          description: >-
            If true the entries will be enumerated starting with the active
            dialog and working up to the root dialog.
        - id: fn
          type:
            - '(entry: IDialogState, index: number) => void'
          description: Function to invoke with each entry on the stack.
    package: botbuilder
  - uid: botbuilder.Session.gettext
    name: 'gettext(string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Loads a localized string for the messages language. If arguments are
      passed the localized string

      will be treated as a template and formatted using
      [sprintf-js](https://github.com/alexei/sprintf.js) (see their docs for
      details.)
    syntax:
      content: 'function gettext(msgid: string, args: any[])'
      parameters:
        - id: msgid
          type:
            - string
          description: >-
            String to use as a key in the localized string table. Typically this
            will just be the english version of the string.
        - id: args
          type:
            - 'any[]'
          description: (Optional) arguments used to format the final output string.
      return:
        type:
          - string
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.isReset
    name: isReset()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns true if the session has been reset.
    syntax:
      content: function isReset()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.library
    name: library
    fullName: library
    children: []
    langs:
      - typeScript
    type: property
    summary: The bots root library of dialogs.
    syntax:
      content: 'library: Library'
      return:
        type:
          - botbuilder.Library
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.localizer
    name: localizer
    fullName: localizer
    children: []
    langs:
      - typeScript
    type: property
    summary: The localizer for the current session.
    syntax:
      content: 'localizer: ILocalizer'
      return:
        type:
          - botbuilder.ILocalizer
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.message
    name: message
    fullName: message
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The message received from the user. For bot originated messages this may
      only contain the "to" & "from" fields.
    syntax:
      content: 'message: IMessage'
      return:
        type:
          - botbuilder.IMessage
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.messageSent
    name: messageSent()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns true if a message has been sent for this session.
    syntax:
      content: function messageSent()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.ngettext
    name: 'ngettext(string, string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Loads the plural form of a localized string for the messages language. The
      output string will be formatted to

      include the count by replacing %d in the string with the count.
    syntax:
      content: 'function ngettext(msgid: string, msgid_plural: string, count: number)'
      parameters:
        - id: msgid
          type:
            - string
          description: >-
            Singular form of the string to use as a key in the localized string
            table. Use %d to specify where the count should go.
        - id: msgid_plural
          type:
            - string
          description: >-
            Plural form of the string to use as a key in the localized string
            table. Use %d to specify where the count should go.
        - id: count
          type:
            - number
          description: >
            Count to use when determining whether the singular or plural form of
            the string should be used.
      return:
        type:
          - string
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.on
    name: 'on(string, (data: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers an event listener.
    syntax:
      content: 'function on(event: string, listener: (data: any) => void)'
      parameters:
        - id: event
          type:
            - string
          description: |-
            Name of the event. Event types:
            - __error:__ An error occured. Passes a JavaScript `Error` object.
        - id: listener
          type:
            - '(data: any) => void'
          description: Function to invoke.
    package: botbuilder
  - uid: botbuilder.Session.popDialogStackEntry
    name: 'popDialogStackEntry(IDialogState[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Pops the active dialog off a stack and returns the new one if the stack
      isn't empty.
    syntax:
      content: 'static function popDialogStackEntry(stack: IDialogState[])'
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: |
            The dialog stack to update.
      return:
        type:
          - botbuilder.IDialogState
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.preferredLocale
    name: 'preferredLocale(string, (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the preferred locale when no parameters are supplied, otherwise
      sets the preferred locale.
    syntax:
      content: >-
        function preferredLocale(locale?: string, callback?: (err: Error) =>
        void)
      parameters:
        - id: locale
          type:
            - string
          description: (Optional) the locale to use for localizing messages.
          optional: true
        - id: callback
          type:
            - '(err: Error) => void'
          description: >-
            (Optional) function called when the localization table has been
            loaded for the supplied locale.
          optional: true
      return:
        type:
          - string
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.privateConversationData
    name: privateConversationData
    fullName: privateConversationData
    children: []
    langs:
      - typeScript
    type: property
    summary: Private conversation data that's only visible to the user.
    syntax:
      content: 'privateConversationData: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.pruneDialogStack
    name: 'pruneDialogStack(IDialogState[], number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes all dialog stack entries starting with the specified index and
      returns the new

      active dialog.
    syntax:
      content: 'static function pruneDialogStack(stack: IDialogState[], start: number)'
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: The dialog stack to update.
        - id: start
          type:
            - number
          description: |
            Index of the first element to remove.
      return:
        type:
          - botbuilder.IDialogState
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.pushDialogStackEntry
    name: 'pushDialogStackEntry(IDialogState[], IDialogState)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Pushes a new dialog onto a stack and returns it as the active dialog.
    syntax:
      content: >-
        static function pushDialogStackEntry(stack: IDialogState[], entry:
        IDialogState)
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: The dialog stack to update.
        - id: entry
          type:
            - botbuilder.IDialogState
          description: |
            Dialog entry to push onto the stack.
      return:
        type:
          - botbuilder.IDialogState
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.replaceDialog
    name: 'replaceDialog(string, T)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ends the current dialog and starts a new one its place. The parent dialog
      will not be

      resumed until the new dialog completes.
    syntax:
      content: 'function replaceDialog<T>(id: string, args?: T)'
      parameters:
        - id: id
          type:
            - string
          description: Unique ID of the dialog to start.
        - id: args
          type:
            - T
          description: >
            (Optional) arguments to pass to the dialogs
            [begin()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.dialog.html#begin)
            method.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.reset
    name: 'reset(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Clears the sessions callstack and restarts the conversation with the
      configured dialogId.
    syntax:
      content: 'function reset(dialogId?: string, dialogArgs?: any)'
      parameters:
        - id: dialogId
          type:
            - string
          description: (Optional) ID of the dialog to start.
          optional: true
        - id: dialogArgs
          type:
            - any
          description: >
            (Optional) arguments to pass to the dialogs
            [begin()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.dialog.html#begin)
            method.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.routeToActiveDialog
    name: routeToActiveDialog(IRecognizeResult)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Dispatches the session to either the active dialog or the default dialog
      for processing.
    syntax:
      content: 'function routeToActiveDialog(recognizeResult?: IRecognizeResult)'
      parameters:
        - id: recognizeResult
          type:
            - botbuilder.IRecognizeResult
          description: >
            (Optional) results returned from calling
            [Library.findRoutes()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#findroutes),
            [Library.findActiveDialogRoutes()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#findactivedialogroutes),
            * or
            [Dialog.recognize()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.dialog#recognize).
          optional: true
    package: botbuilder
  - uid: botbuilder.Session.save
    name: save()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Triggers saving of changes made to [dialogData](#dialogdata),
      [userData](#userdata), [conversationdata](#conversationdata), or
      [privateConversationData'(#privateconversationdata).
    syntax:
      content: function save()
      parameters: []
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.say_1
    name: 'say(TextType, IMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function say(text: TextType, options?: IMessageOptions)'
      parameters:
        - id: text
          type:
            - botbuilder.TextType
          description: ''
        - id: options
          type:
            - botbuilder.IMessageOptions
          description: ''
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.say
    name: 'say(TextType, TextType, IMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Sends a text, and optional SSML, message to the user.'
    syntax:
      content: >-
        function say(text: TextType, speak?: TextType, options?:
        IMessageOptions)
      parameters:
        - id: text
          type:
            - botbuilder.TextType
          description: >-
            Text to send to the user. This can be null to send only SSML or
            attachments.
        - id: speak
          type:
            - botbuilder.TextType
          description: >-
            (Optional) message that should be spoken to the user. The message
            should be formatted as [Speech Synthesis Markup Language
            (SSML)](https://msdn.microsoft.com/en-us/library/hh378377(v=office.14).aspx).

            If an array is passed a response will be chosen at random.
          optional: true
        - id: options
          type:
            - botbuilder.IMessageOptions
          description: >
            (Optional) properties that should be included on the outgoing
            message.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.sayLocalized
    name: 'sayLocalized(string, TextType, TextType, IMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends a text, and optional SSML, message to the user using a specific
      localization namespace.
    syntax:
      content: >-
        function sayLocalized(libraryNamespace: string, text: TextType, speak?:
        TextType, options?: IMessageOptions)
      parameters:
        - id: libraryNamespace
          type:
            - string
          description: Namespace to use for localizing the message.
        - id: text
          type:
            - botbuilder.TextType
          description: >-
            Text to send to the user. This can be null to send only SSML or
            attachments.
        - id: speak
          type:
            - botbuilder.TextType
          description: >-
            (Optional) message that should be spoken to the user. The message
            should be formatted as [Speech Synthesis Markup Language
            (SSML)](https://msdn.microsoft.com/en-us/library/hh378377(v=office.14).aspx).

            If an array is passed a response will be chosen at random.
          optional: true
        - id: options
          type:
            - botbuilder.IMessageOptions
          description: >
            (Optional) properties that should be included on the outgoing
            message.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.send
    name: 'send(TextOrMessageType, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a message to the user.
    syntax:
      content: 'function send(message: TextOrMessageType, args: any[])'
      parameters:
        - id: message
          type:
            - botbuilder.TextOrMessageType
          description: >-
            Text/message to send to user. If an array is passed a response will
            be chosen at random.
        - id: args
          type:
            - 'any[]'
          description: >
            (Optional) arguments used to format the final output text when
            __message__ is a _{string|string[]}_.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.sendBatch
    name: 'sendBatch((err: Error, addresses?: IAddress[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Immediately ends the current batch and delivers any queued up messages.
    syntax:
      content: 'function sendBatch(done?: (err: Error, addresses?: IAddress[]) => void)'
      parameters:
        - id: done
          type:
            - '(err: Error, addresses?: IAddress[]) => void'
          description: >-
            (Optional) function called when the batch was either successfully
            delievered or failed for some reason.
          optional: true
    package: botbuilder
  - uid: botbuilder.Session.sendLocalized
    name: 'sendLocalized(string, TextOrMessageType, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a message to a user using a specific localization namespace.
    syntax:
      content: >-
        function sendLocalized(libraryNamespace: string, message:
        TextOrMessageType, args: any[])
      parameters:
        - id: libraryNamespace
          type:
            - string
          description: Namespace to use for localizing the message.
        - id: message
          type:
            - botbuilder.TextOrMessageType
          description: Text/message to send to user.
        - id: args
          type:
            - 'any[]'
          description: >
            (Optional) arguments used to format the final output text when
            __message__ is a _{string|string[]}_.
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.sendTyping
    name: sendTyping()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends the user an indication that the bot is typing. For long running
      operations this should be called every few seconds.
    syntax:
      content: function sendTyping()
      parameters: []
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.constructor
    name: Session(ISessionOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of the session.
    syntax:
      content: 'new Session(options: ISessionOptions)'
      parameters:
        - id: options
          type:
            - botbuilder.ISessionOptions
          description: |
            Sessions configuration options.
    package: botbuilder
  - uid: botbuilder.Session.sessionState
    name: sessionState
    fullName: sessionState
    children: []
    langs:
      - typeScript
    type: property
    summary: Sessions current state information.
    syntax:
      content: 'sessionState: ISessionState'
      return:
        type:
          - botbuilder.ISessionState
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.toRecognizeContext
    name: toRecognizeContext()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the session object as a read only context object.
    syntax:
      content: function toRecognizeContext()
      parameters: []
      return:
        type:
          - botbuilder.IRecognizeContext
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.userData
    name: userData
    fullName: userData
    children: []
    langs:
      - typeScript
    type: property
    summary: Data for the user that's persisted across all conversations with the bot.
    syntax:
      content: 'userData: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.validateDialogStack
    name: 'validateDialogStack(IDialogState[], Library)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ensures that all of the entries on a dialog stack reference valid dialogs
      within a library

      hierarchy.
    syntax:
      content: >-
        static function validateDialogStack(stack: IDialogState[], root:
        Library)
      parameters:
        - id: stack
          type:
            - 'botbuilder.IDialogState[]'
          description: The dialog stack to validate.
        - id: root
          type:
            - botbuilder.Library
          description: |
            The root of the library hierarchy, typically the bot.
      return:
        type:
          - boolean
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.watch
    name: 'watch(string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Enables/disables a watch for the current session.
    syntax:
      content: 'function watch(variable: string, enable?: boolean)'
      parameters:
        - id: variable
          type:
            - string
          description: Name of the variable to watch/unwatch.
        - id: enable
          type:
            - boolean
          description: >
            (Optional) If true the variable will be watched, otherwise it will
            be unwatched. The default value is true.
          optional: true
      return:
        type:
          - botbuilder.Session
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.watchable
    name: 'watchable(string, IWatchableHandler)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds or retrieves a variable that can be watched.
    syntax:
      content: 'static function watchable(variable: string, handler?: IWatchableHandler)'
      parameters:
        - id: variable
          type:
            - string
          description: >-
            Name of the variable that can be watched. Case is used for display
            only.
        - id: handler
          type:
            - botbuilder.IWatchableHandler
          description: >
            (Optional) Function used to retrieve the variables current value. If
            specified a new handler will be registered, otherwise the existing
            handler will be retrieved.
          optional: true
      return:
        type:
          - botbuilder.IWatchableHandler
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.watchableList
    name: watchableList()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a list of watchable variables.
    syntax:
      content: static function watchableList()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder
  - uid: botbuilder.Session.watchList
    name: watchList()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the current list of watched variables for the session.
    syntax:
      content: function watchList()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder
references:
  - uid: botbuilder.ISessionOptions
    name: ISessionOptions
    spec.typeScript:
      - name: ISessionOptions
        fullName: ISessionOptions
        uid: botbuilder.ISessionOptions
  - uid: botbuilder.IConnector
    name: IConnector
    spec.typeScript:
      - name: IConnector
        fullName: IConnector
        uid: botbuilder.IConnector
  - uid: botbuilder.Library
    name: Library
    spec.typeScript:
      - name: Library
        fullName: Library
        uid: botbuilder.Library
  - uid: botbuilder.ILocalizer
    name: ILocalizer
    spec.typeScript:
      - name: ILocalizer
        fullName: ILocalizer
        uid: botbuilder.ILocalizer
  - uid: botbuilder.IMessage
    name: IMessage
    spec.typeScript:
      - name: IMessage
        fullName: IMessage
        uid: botbuilder.IMessage
  - uid: botbuilder.ISessionState
    name: ISessionState
    spec.typeScript:
      - name: ISessionState
        fullName: ISessionState
        uid: botbuilder.ISessionState
  - uid: botbuilder.Session
    name: Session
    spec.typeScript:
      - name: Session
        fullName: Session
        uid: botbuilder.Session
  - uid: 'botbuilder.IDialogState[]'
    name: 'IDialogState[]'
    spec.typeScript:
      - name: IDialogState
        fullName: IDialogState
        uid: botbuilder.IDialogState
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder.TextOrMessageType
    name: TextOrMessageType
    spec.typeScript:
      - name: TextOrMessageType
        fullName: TextOrMessageType
        uid: botbuilder.TextOrMessageType
  - uid: botbuilder.IDialogResult<any>
    name: IDialogResult<any>
    spec.typeScript:
      - name: IDialogResult
        fullName: IDialogResult
        uid: botbuilder.IDialogResult
      - name: <any>
        fullName: <any>
  - uid: botbuilder.IRecognizeResult
    name: IRecognizeResult
    spec.typeScript:
      - name: IRecognizeResult
        fullName: IRecognizeResult
        uid: botbuilder.IRecognizeResult
  - uid: botbuilder.TextType
    name: TextType
    spec.typeScript:
      - name: TextType
        fullName: TextType
        uid: botbuilder.TextType
  - uid: botbuilder.IMessageOptions
    name: IMessageOptions
    spec.typeScript:
      - name: IMessageOptions
        fullName: IMessageOptions
        uid: botbuilder.IMessageOptions
  - uid: botbuilder.IRecognizeContext
    name: IRecognizeContext
    spec.typeScript:
      - name: IRecognizeContext
        fullName: IRecognizeContext
        uid: botbuilder.IRecognizeContext
  - uid: botbuilder.IDialogState
    name: IDialogState
    spec.typeScript:
      - name: IDialogState
        fullName: IDialogState
        uid: botbuilder.IDialogState
  - uid: botbuilder.IWatchableHandler
    name: IWatchableHandler
    spec.typeScript:
      - name: IWatchableHandler
        fullName: IWatchableHandler
        uid: botbuilder.IWatchableHandler

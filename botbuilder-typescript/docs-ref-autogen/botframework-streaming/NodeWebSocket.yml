### YamlMime:UniversalReference
items:
  - uid: botframework-streaming.NodeWebSocket
    name: NodeWebSocket
    fullName: NodeWebSocket
    children:
      - botframework-streaming.NodeWebSocket.close
      - botframework-streaming.NodeWebSocket.connect
      - botframework-streaming.NodeWebSocket.create
      - botframework-streaming.NodeWebSocket.isConnected
      - botframework-streaming.NodeWebSocket.constructor
      - botframework-streaming.NodeWebSocket.setOnCloseHandler
      - botframework-streaming.NodeWebSocket.setOnErrorHandler
      - botframework-streaming.NodeWebSocket.setOnMessageHandler
      - botframework-streaming.NodeWebSocket.write
    langs:
      - typeScript
    type: class
    summary: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.close
    name: 'close(number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Close the socket.
    syntax:
      content: 'function close(code?: number, data?: string)'
      parameters:
        - id: code
          type:
            - number
          description: ''
          optional: true
        - id: data
          type:
            - string
          description: |+

          optional: true
    package: botframework-streaming
    remarks: >-
      Optionally pass in a status code and string explaining why the connection
      is closing.
  - uid: botframework-streaming.NodeWebSocket.connect
    name: 'connect(any, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Connects to the supporting socket using WebSocket protocol.
    syntax:
      content: 'function connect(serverAddress: any, port: number)'
      parameters:
        - id: serverAddress
          type:
            - any
          description: The address the server is listening on.
        - id: port
          type:
            - number
          description: |
            The port the server is listening on, defaults to 8082.
      return:
        type:
          - Promise<void>
        description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.create
    name: 'create(INodeIncomingMessage, INodeSocket, INodeBuffer)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Create and set a `ws` WebSocket with an HTTP Request, Socket and Buffer.'
    syntax:
      content: >-
        function create(req: INodeIncomingMessage, socket: INodeSocket, head:
        INodeBuffer)
      parameters:
        - id: req
          type:
            - botframework-streaming.INodeIncomingMessage
          description: INodeIncomingMessage
        - id: socket
          type:
            - botframework-streaming.INodeSocket
          description: INodeSocket
        - id: head
          type:
            - botframework-streaming.INodeBuffer
          description: |
            INodeBuffer
      return:
        type:
          - Promise<void>
        description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.isConnected
    name: isConnected
    fullName: isConnected
    children: []
    langs:
      - typeScript
    type: property
    summary: True if the 'ws' WebSocket is currently connected.
    syntax:
      content: boolean isConnected
      return:
        type:
          - boolean
        description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.constructor
    name: NodeWebSocket(WebSocket)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new instance of the
      [NodeWebSocket](xref:botframework-streaming.NodeWebSocket) class.
    syntax:
      content: 'new NodeWebSocket(wsSocket?: WebSocket)'
      parameters:
        - id: wsSocket
          type:
            - WebSocket
          description: ''
          optional: true
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.setOnCloseHandler
    name: 'setOnCloseHandler((x: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the callback to call when encountering socket closures.
    syntax:
      content: 'function setOnCloseHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type:
            - '(x: any) => void'
          description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.setOnErrorHandler
    name: 'setOnErrorHandler((x: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the callback to call when encountering errors.
    syntax:
      content: 'function setOnErrorHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type:
            - '(x: any) => void'
          description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.setOnMessageHandler
    name: 'setOnMessageHandler((x: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set the handler for `'data'` and `'message'` events received on the
      socket.
    syntax:
      content: 'function setOnMessageHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type:
            - '(x: any) => void'
          description: ''
    package: botframework-streaming
  - uid: botframework-streaming.NodeWebSocket.write
    name: write(INodeBuffer)
    children: []
    type: method
    langs:
      - typeScript
    summary: Writes a buffer to the socket and sends it.
    syntax:
      content: 'function write(buffer: INodeBuffer)'
      parameters:
        - id: buffer
          type:
            - botframework-streaming.INodeBuffer
          description: |
            The buffer of data to send across the connection.
    package: botframework-streaming
references:
  - uid: botframework-streaming.INodeIncomingMessage
    name: INodeIncomingMessage
    spec.typeScript:
      - name: INodeIncomingMessage
        fullName: INodeIncomingMessage
        uid: botframework-streaming.INodeIncomingMessage
  - uid: botframework-streaming.INodeSocket
    name: INodeSocket
    spec.typeScript:
      - name: INodeSocket
        fullName: INodeSocket
        uid: botframework-streaming.INodeSocket
  - uid: botframework-streaming.INodeBuffer
    name: INodeBuffer
    spec.typeScript:
      - name: INodeBuffer
        fullName: INodeBuffer
        uid: botframework-streaming.INodeBuffer

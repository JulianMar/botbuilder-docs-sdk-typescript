### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.SkillDialog
    name: SkillDialog
    fullName: SkillDialog
    children:
      - botbuilder-dialogs.SkillDialog.beginDialog
      - botbuilder-dialogs.SkillDialog.configure
      - botbuilder-dialogs.SkillDialog.continueDialog
      - botbuilder-dialogs.SkillDialog.endDialog
      - botbuilder-dialogs.SkillDialog.EndOfTurn
      - botbuilder-dialogs.SkillDialog.getVersion
      - botbuilder-dialogs.SkillDialog.id
      - botbuilder-dialogs.SkillDialog.onDialogEvent
      - botbuilder-dialogs.SkillDialog.repromptDialog
      - botbuilder-dialogs.SkillDialog.resumeDialog
      - botbuilder-dialogs.SkillDialog.constructor
      - botbuilder-dialogs.SkillDialog.telemetryClient
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: >-
        botbuilder-dialogs.Dialog<Partial<botbuilder-dialogs.BeginSkillDialogOptions>>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.beginDialog
    name: 'beginDialog(DialogContext, BeginSkillDialogOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options:
        BeginSkillDialogOptions)
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: options
          type:
            - botbuilder-dialogs.BeginSkillDialogOptions
          description: ''
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: ''
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets a default end-of-turn result.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - botbuilder-dialogs.DialogTurnResult
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
  - uid: botbuilder-dialogs.SkillDialog.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
  - uid: botbuilder-dialogs.SkillDialog.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs.SkillDialog.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - botbuilder-dialogs.DialogEvent
          description: The event being raised.
      return:
        type:
          - Promise<boolean>
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.SkillDialog.constructor
    name: 'SkillDialog(SkillDialogOptions, string)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: A sample dialog that can wrap remote calls to a skill.
    syntax:
      content: 'new SkillDialog(dialogOptions: SkillDialogOptions, dialogId?: string)'
      parameters:
        - id: dialogOptions
          type:
            - botbuilder-dialogs.SkillDialogOptions
          description: ''
        - id: dialogId
          type:
            - string
          description: |+

          optional: true
    package: botbuilder-dialogs
    remarks: >-
      The options parameter in `beginDialog()` must be a `SkillDialogArgs`
      object with the initial parameters

      for the dialog.
  - uid: botbuilder-dialogs.SkillDialog.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the telemetry client for this dialog.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs
references:
  - uid: >-
      botbuilder-dialogs.Dialog<Partial<botbuilder-dialogs.BeginSkillDialogOptions>>
    name: BeginSkillDialogOptions>>
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: <Partial<
        fullName: <Partial<
      - name: BeginSkillDialogOptions
        fullName: BeginSkillDialogOptions
        uid: botbuilder-dialogs.BeginSkillDialogOptions
      - name: '>>'
        fullName: '>>'
  - uid: botbuilder-dialogs.SkillDialogOptions
    name: SkillDialogOptions
    spec.typeScript:
      - name: SkillDialogOptions
        fullName: SkillDialogOptions
        uid: botbuilder-dialogs.SkillDialogOptions
  - uid: botbuilder-dialogs.DialogTurnResult
    name: DialogTurnResult
    spec.typeScript:
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
  - uid: botbuilder-dialogs.BeginSkillDialogOptions
    name: BeginSkillDialogOptions
    spec.typeScript:
      - name: BeginSkillDialogOptions
        fullName: BeginSkillDialogOptions
        uid: botbuilder-dialogs.BeginSkillDialogOptions
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: botbuilder-dialogs.DialogInstance
    name: DialogInstance
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
  - uid: botbuilder-dialogs.DialogReason
    name: DialogReason
    spec.typeScript:
      - name: DialogReason
        fullName: DialogReason
        uid: botbuilder-dialogs.DialogReason
  - uid: botbuilder-dialogs.DialogEvent
    name: DialogEvent
    spec.typeScript:
      - name: DialogEvent
        fullName: DialogEvent
        uid: botbuilder-dialogs.DialogEvent

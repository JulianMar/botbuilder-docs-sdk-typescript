### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.DialogContainer
    name: DialogContainer
    fullName: DialogContainer<O>
    children:
      - botbuilder-dialogs.DialogContainer.beginDialog
      - botbuilder-dialogs.DialogContainer.configure
      - botbuilder-dialogs.DialogContainer.continueDialog
      - botbuilder-dialogs.DialogContainer.createChildContext
      - botbuilder-dialogs.DialogContainer.constructor
      - botbuilder-dialogs.DialogContainer.dialogs
      - botbuilder-dialogs.DialogContainer.endDialog
      - botbuilder-dialogs.DialogContainer.findDialog
      - botbuilder-dialogs.DialogContainer.getVersion
      - botbuilder-dialogs.DialogContainer.id
      - botbuilder-dialogs.DialogContainer.onDialogEvent
      - botbuilder-dialogs.DialogContainer.repromptDialog
      - botbuilder-dialogs.DialogContainer.resumeDialog
      - botbuilder-dialogs.DialogContainer.telemetryClient
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: botbuilder-dialogs.Dialog<O>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.beginDialog
    name: 'beginDialog(DialogContext, O)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'When overridden in a derived class, starts the dialog.'
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The context for the current dialog turn.
        - id: options
          type:
            - O
          description: |
            Optional. Arguments to use when the dialog starts.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      Derived dialogs must override this method.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it creates

      a new [DialogInstance](xref:botbuilder-dialogs.DialogInstance) for this
      dialog, pushes it

      onto the dialog stack, and starts the dialog.


      A dialog that represents a single-turn conversation should await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
  - uid: botbuilder-dialogs.DialogContainer.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'When overridden in a derived class, continues the dialog.'
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: |
            The context for the current dialog turn.
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it continues

      the dialog.


      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.continueDialog](xref:botbuilder-dialogs.DialogContext.continueDialog)
  - uid: botbuilder-dialogs.DialogContainer.createChildContext
    name: createChildContext(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an inner dialog context for the containers active child.
    syntax:
      content: 'function createChildContext(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: Parents dialog context.
      return:
        type:
          - botbuilder-dialogs.DialogContext | undefined
        description: >-
          A new dialog context for the active child or `undefined` if there is
          no active child.
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.constructor
    name: DialogContainer(string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    syntax:
      content: 'new DialogContainer(dialogId?: string)'
      parameters:
        - id: dialogId
          type:
            - string
          description: |
            Optional. unique ID of the dialog.
          optional: true
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.dialogs
    name: dialogs
    fullName: dialogs
    children: []
    langs:
      - typeScript
    type: property
    summary: The containers dialog set.
    syntax:
      content: 'public dialogs: DialogSet = new DialogSet(undefined)'
      return:
        type:
          - botbuilder-dialogs.DialogSet
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: Current state information for this dialog.
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: |
            The reason the dialog is ending.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
  - uid: botbuilder-dialogs.DialogContainer.findDialog
    name: findDialog(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Finds a child dialog that was previously added to the container.
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type:
            - string
          description: |
            ID of the dialog to lookup.
      return:
        type:
          - botbuilder-dialogs.Dialog | undefined
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
  - uid: botbuilder-dialogs.DialogContainer.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: string id
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs.DialogContainer.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - botbuilder-dialogs.DialogEvent
          description: |
            The event being raised.
      return:
        type:
          - Promise<boolean>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'When overridden in a derived class, reprompts the user for input.'
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: |
            Current state information for this dialog.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
  - uid: botbuilder-dialogs.DialogContainer.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When overridden in a derived class, resumes the dialog after the dialog
      above it on the stack completes.
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The context for the current dialog turn.
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: |-
            The reason the dialog is resuming. This will typically be
                 [DialogReason.endCalled](xref:botbuilder-dialogs.DialogReason.endCalled)
        - id: result
          type:
            - any
          description: |
            Optional. The return value, if any, from the dialog that ended.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it resumes

      the dialog. If the previous dialog on the stack returned a value, that
      value is in the `result`

      parameter.


      To start a _child_ dialog, use
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      or [DialogContext.prompt](xref:botbuilder-dialogs.DialogContext.prompt);
      however, this dialog will not

      necessarily be the one that started the child dialog.

      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
  - uid: botbuilder-dialogs.DialogContainer.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Set the telemetry client, and also apply it to all child dialogs.
      Future dialogs added to the component will also inherit this client.
      Get the current telemetry client.
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs
references:
  - uid: botbuilder-dialogs.Dialog<O>
    name: Dialog<O>
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: <O>
        fullName: <O>
  - uid: botbuilder-dialogs.DialogSet
    name: DialogSet
    spec.typeScript:
      - name: DialogSet
        fullName: DialogSet
        uid: botbuilder-dialogs.DialogSet
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: botbuilder-dialogs.DialogContext | undefined
    name: DialogContext | undefined
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: botbuilder-dialogs.DialogInstance
    name: DialogInstance
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
  - uid: botbuilder-dialogs.DialogReason
    name: DialogReason
    spec.typeScript:
      - name: DialogReason
        fullName: DialogReason
        uid: botbuilder-dialogs.DialogReason
  - uid: botbuilder-dialogs.Dialog | undefined
    name: Dialog | undefined
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: botbuilder-dialogs.DialogEvent
    name: DialogEvent
    spec.typeScript:
      - name: DialogEvent
        fullName: DialogEvent
        uid: botbuilder-dialogs.DialogEvent

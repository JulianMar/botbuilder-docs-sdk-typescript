### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.LGTemplateParser
    name: LGTemplateParser
    fullName: LGTemplateParser
    children:
      - botbuilder-lg.LGTemplateParser.action
      - botbuilder-lg.LGTemplateParser.addErrorListener
      - botbuilder-lg.LGTemplateParser.addParseListener
      - botbuilder-lg.LGTemplateParser.atn
      - botbuilder-lg.LGTemplateParser.body
      - botbuilder-lg.LGTemplateParser.buildParseTree
      - botbuilder-lg.LGTemplateParser.CASE
      - botbuilder-lg.LGTemplateParser.COMMENTS
      - botbuilder-lg.LGTemplateParser.compileParseTreePattern
      - botbuilder-lg.LGTemplateParser.compileParseTreePattern_1
      - botbuilder-lg.LGTemplateParser.consume
      - botbuilder-lg.LGTemplateParser.context
      - botbuilder-lg.LGTemplateParser.createErrorNode
      - botbuilder-lg.LGTemplateParser.createTerminalNode
      - botbuilder-lg.LGTemplateParser.currentToken
      - botbuilder-lg.LGTemplateParser.DASH
      - botbuilder-lg.LGTemplateParser.DEFAULT
      - botbuilder-lg.LGTemplateParser.dumpDFA
      - botbuilder-lg.LGTemplateParser.ELSE
      - botbuilder-lg.LGTemplateParser.ELSEIF
      - botbuilder-lg.LGTemplateParser.enterLeftFactoredRule
      - botbuilder-lg.LGTemplateParser.enterOuterAlt
      - botbuilder-lg.LGTemplateParser.enterRecursionRule
      - botbuilder-lg.LGTemplateParser.enterRule
      - botbuilder-lg.LGTemplateParser.EOF
      - botbuilder-lg.LGTemplateParser.errorHandler
      - botbuilder-lg.LGTemplateParser.errorStructuredName
      - botbuilder-lg.LGTemplateParser.errorStructureLine
      - botbuilder-lg.LGTemplateParser.errorTemplateString
      - botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER
      - botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY
      - botbuilder-lg.LGTemplateParser.exitRule
      - botbuilder-lg.LGTemplateParser.EXPRESSION
      - botbuilder-lg.LGTemplateParser.expression
      - botbuilder-lg.LGTemplateParser.expressionInStructure
      - botbuilder-lg.LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY
      - botbuilder-lg.LGTemplateParser.getATNWithBypassAlts
      - botbuilder-lg.LGTemplateParser.getDFAStrings
      - botbuilder-lg.LGTemplateParser.getErrorHeader
      - botbuilder-lg.LGTemplateParser.getErrorListenerDispatch
      - botbuilder-lg.LGTemplateParser.getErrorListeners
      - botbuilder-lg.LGTemplateParser.getExpectedTokens
      - botbuilder-lg.LGTemplateParser.getExpectedTokensWithinCurrentRule
      - botbuilder-lg.LGTemplateParser.getInvokingContext
      - botbuilder-lg.LGTemplateParser.getParseListeners
      - botbuilder-lg.LGTemplateParser.getRuleIndex
      - botbuilder-lg.LGTemplateParser.getRuleIndexMap
      - botbuilder-lg.LGTemplateParser.getRuleInvocationStack
      - botbuilder-lg.LGTemplateParser.getTokenType
      - botbuilder-lg.LGTemplateParser.getTokenTypeMap
      - botbuilder-lg.LGTemplateParser.grammarFileName
      - botbuilder-lg.LGTemplateParser.IF
      - botbuilder-lg.LGTemplateParser.ifCondition
      - botbuilder-lg.LGTemplateParser.ifConditionRule
      - botbuilder-lg.LGTemplateParser.ifElseTemplateBody
      - botbuilder-lg.LGTemplateParser.inContext
      - botbuilder-lg.LGTemplateParser.inputStream
      - botbuilder-lg.LGTemplateParser.interpreter
      - botbuilder-lg.LGTemplateParser.INVALID_TOKEN
      - botbuilder-lg.LGTemplateParser.isExpectedToken
      - botbuilder-lg.LGTemplateParser.isMatchedEOF
      - botbuilder-lg.LGTemplateParser.isTrace
      - botbuilder-lg.LGTemplateParser.keyValueStructureLine
      - botbuilder-lg.LGTemplateParser.keyValueStructureValue
      - botbuilder-lg.LGTemplateParser.LEFT_SQUARE_BRACKET
      - botbuilder-lg.LGTemplateParser.constructor
      - botbuilder-lg.LGTemplateParser.match
      - botbuilder-lg.LGTemplateParser.matchWildcard
      - botbuilder-lg.LGTemplateParser.MULTILINE_PREFIX
      - botbuilder-lg.LGTemplateParser.MULTILINE_SUFFIX
      - botbuilder-lg.LGTemplateParser.NEWLINE
      - botbuilder-lg.LGTemplateParser.NEWLINE_IN_BODY
      - botbuilder-lg.LGTemplateParser.NEWLINE_IN_STRUCTURE_NAME
      - botbuilder-lg.LGTemplateParser.normalTemplateBody
      - botbuilder-lg.LGTemplateParser.normalTemplateString
      - botbuilder-lg.LGTemplateParser.notifyErrorListeners
      - botbuilder-lg.LGTemplateParser.notifyErrorListeners_1
      - botbuilder-lg.LGTemplateParser.numberOfSyntaxErrors
      - botbuilder-lg.LGTemplateParser.parseInfo
      - botbuilder-lg.LGTemplateParser.precedence
      - botbuilder-lg.LGTemplateParser.precpred
      - botbuilder-lg.LGTemplateParser.pushNewRecursionContext
      - botbuilder-lg.LGTemplateParser.removeErrorListener
      - botbuilder-lg.LGTemplateParser.removeErrorListeners
      - botbuilder-lg.LGTemplateParser.removeParseListener
      - botbuilder-lg.LGTemplateParser.removeParseListeners
      - botbuilder-lg.LGTemplateParser.reset
      - botbuilder-lg.LGTemplateParser.reset_1
      - botbuilder-lg.LGTemplateParser.ruleContext
      - botbuilder-lg.LGTemplateParser.ruleNames
      - botbuilder-lg.LGTemplateParser.ruleNames
      - botbuilder-lg.LGTemplateParser.RULE_body
      - botbuilder-lg.LGTemplateParser.RULE_errorStructuredName
      - botbuilder-lg.LGTemplateParser.RULE_errorStructureLine
      - botbuilder-lg.LGTemplateParser.RULE_errorTemplateString
      - botbuilder-lg.LGTemplateParser.RULE_expression
      - botbuilder-lg.LGTemplateParser.RULE_expressionInStructure
      - botbuilder-lg.LGTemplateParser.RULE_ifCondition
      - botbuilder-lg.LGTemplateParser.RULE_ifConditionRule
      - botbuilder-lg.LGTemplateParser.RULE_ifElseTemplateBody
      - botbuilder-lg.LGTemplateParser.RULE_keyValueStructureLine
      - botbuilder-lg.LGTemplateParser.RULE_keyValueStructureValue
      - botbuilder-lg.LGTemplateParser.RULE_normalTemplateBody
      - botbuilder-lg.LGTemplateParser.RULE_normalTemplateString
      - botbuilder-lg.LGTemplateParser.RULE_structuredBodyContentLine
      - botbuilder-lg.LGTemplateParser.RULE_structuredBodyEndLine
      - botbuilder-lg.LGTemplateParser.RULE_structuredBodyNameLine
      - botbuilder-lg.LGTemplateParser.RULE_structuredTemplateBody
      - botbuilder-lg.LGTemplateParser.RULE_switchCaseRule
      - botbuilder-lg.LGTemplateParser.RULE_switchCaseStat
      - botbuilder-lg.LGTemplateParser.RULE_switchCaseTemplateBody
      - botbuilder-lg.LGTemplateParser.RULE_template
      - botbuilder-lg.LGTemplateParser.RULE_templateString
      - botbuilder-lg.LGTemplateParser.sempred
      - botbuilder-lg.LGTemplateParser.serializedATN
      - botbuilder-lg.LGTemplateParser.setProfile
      - botbuilder-lg.LGTemplateParser.sourceName
      - botbuilder-lg.LGTemplateParser.state
      - botbuilder-lg.LGTemplateParser.structuredBodyContentLine
      - botbuilder-lg.LGTemplateParser.structuredBodyEndLine
      - botbuilder-lg.LGTemplateParser.structuredBodyNameLine
      - botbuilder-lg.LGTemplateParser.structuredTemplateBody
      - botbuilder-lg.LGTemplateParser.STRUCTURED_BODY_END
      - botbuilder-lg.LGTemplateParser.STRUCTURED_COMMENTS
      - botbuilder-lg.LGTemplateParser.STRUCTURED_NEWLINE
      - botbuilder-lg.LGTemplateParser.STRUCTURE_EQUALS
      - botbuilder-lg.LGTemplateParser.STRUCTURE_IDENTIFIER
      - botbuilder-lg.LGTemplateParser.STRUCTURE_NAME
      - botbuilder-lg.LGTemplateParser.STRUCTURE_OR_MARK
      - botbuilder-lg.LGTemplateParser.SWITCH
      - botbuilder-lg.LGTemplateParser.switchCaseRule
      - botbuilder-lg.LGTemplateParser.switchCaseStat
      - botbuilder-lg.LGTemplateParser.switchCaseTemplateBody
      - botbuilder-lg.LGTemplateParser.template
      - botbuilder-lg.LGTemplateParser.templateString
      - botbuilder-lg.LGTemplateParser.TEXT
      - botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_BODY
      - botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_NAME
      - botbuilder-lg.LGTemplateParser.tokenFactory
      - botbuilder-lg.LGTemplateParser.unrollRecursionContexts
      - botbuilder-lg.LGTemplateParser.VOCABULARY
      - botbuilder-lg.LGTemplateParser.vocabulary
      - botbuilder-lg.LGTemplateParser.WS
      - botbuilder-lg.LGTemplateParser.WS_IN_BODY
      - botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_BODY
      - botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_NAME
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Parser
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.action
    name: 'action(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.addErrorListener
    name: addErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.addParseListener
    name: addParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to add
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.body
    name: body()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function body()
      parameters: []
      return:
        type:
          - botbuilder-lg.BodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.buildParseTree
    name: buildParseTree
    fullName: buildParseTree
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.CASE
    name: CASE
    fullName: CASE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CASE: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.COMMENTS
    name: COMMENTS
    fullName: COMMENTS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static COMMENTS: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.compileParseTreePattern
    name: 'compileParseTreePattern(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.compileParseTreePattern_1
    name: 'compileParseTreePattern(string, number, Lexer)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
        - id: lexer
          type:
            - Lexer
          description: ''
          optional: true
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.consume
    name: consume()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    syntax:
      content: function consume()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.createErrorNode
    name: 'createErrorNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - ErrorNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.createTerminalNode
    name: 'createTerminalNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    syntax:
      content: 'function createTerminalNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.currentToken
    name: currentToken
    fullName: currentToken
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    syntax:
      content: 'currentToken: Token'
      return:
        type:
          - Token
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.DASH
    name: DASH
    fullName: DASH
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DASH: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.DEFAULT
    name: DEFAULT
    fullName: DEFAULT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DEFAULT: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.dumpDFA
    name: dumpDFA()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function dumpDFA()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ELSE
    name: ELSE
    fullName: ELSE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ELSE: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ELSEIF
    name: ELSEIF
    fullName: ELSEIF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ELSEIF: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.enterLeftFactoredRule
    name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.enterOuterAlt
    name: 'enterOuterAlt(ParserRuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: altNum
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.enterRecursionRule
    name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: precedence
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.enterRule
    name: 'enterRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.errorHandler
    name: errorHandler
    fullName: errorHandler
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type:
          - ANTLRErrorStrategy
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.errorStructuredName
    name: errorStructuredName()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function errorStructuredName()
      parameters: []
      return:
        type:
          - botbuilder-lg.ErrorStructuredNameContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.errorStructureLine
    name: errorStructureLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function errorStructureLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.ErrorStructureLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.errorTemplateString
    name: errorTemplateString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function errorTemplateString()
      parameters: []
      return:
        type:
          - botbuilder-lg.ErrorTemplateStringContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER
    name: ESCAPE_CHARACTER
    fullName: ESCAPE_CHARACTER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ESCAPE_CHARACTER: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    name: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    fullName: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ESCAPE_CHARACTER_IN_STRUCTURE_BODY: 31 = 31'
      return:
        type:
          - '31'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.exitRule
    name: exitRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function exitRule()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.EXPRESSION
    name: EXPRESSION
    fullName: EXPRESSION
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EXPRESSION: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.expression
    name: expression()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function expression()
      parameters: []
      return:
        type:
          - botbuilder-lg.ExpressionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.expressionInStructure
    name: expressionInStructure()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function expressionInStructure()
      parameters: []
      return:
        type:
          - botbuilder-lg.ExpressionInStructureContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY
    name: EXPRESSION_IN_STRUCTURE_BODY
    fullName: EXPRESSION_IN_STRUCTURE_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EXPRESSION_IN_STRUCTURE_BODY: 32 = 32'
      return:
        type:
          - '32'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getATNWithBypassAlts
    name: getATNWithBypassAlts()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    syntax:
      content: function getATNWithBypassAlts()
      parameters: []
      return:
        type:
          - ATN
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getDFAStrings
    name: getDFAStrings()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function getDFAStrings()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ParserErrorListener
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<Token>>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getExpectedTokens
    name: getExpectedTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    syntax:
      content: function getExpectedTokens()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getExpectedTokensWithinCurrentRule
    name: getExpectedTokensWithinCurrentRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getInvokingContext
    name: getInvokingContext(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type:
            - number
          description: ''
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getParseListeners
    name: getParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getParseListeners()
      parameters: []
      return:
        type:
          - 'ParseTreeListener[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getRuleIndex
    name: getRuleIndex(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getRuleInvocationStack
    name: getRuleInvocationStack(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type:
            - RuleContext
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string grammarFileName
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.IF
    name: IF
    fullName: IF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IF: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ifCondition
    name: ifCondition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ifCondition()
      parameters: []
      return:
        type:
          - botbuilder-lg.IfConditionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ifConditionRule
    name: ifConditionRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ifConditionRule()
      parameters: []
      return:
        type:
          - botbuilder-lg.IfConditionRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ifElseTemplateBody
    name: ifElseTemplateBody()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ifElseTemplateBody()
      parameters: []
      return:
        type:
          - botbuilder-lg.IfElseTemplateBodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.inContext
    name: inContext(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the token stream and reset the parser.
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type:
          - TokenStream
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type:
          - ParserATNSimulator
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.INVALID_TOKEN
    name: INVALID_TOKEN
    fullName: INVALID_TOKEN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static INVALID_TOKEN: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.isExpectedToken
    name: isExpectedToken(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type:
            - number
          description: the symbol type to check
      return:
        type:
          - boolean
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.isMatchedEOF
    name: isMatchedEOF
    fullName: isMatchedEOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.isTrace
    name: isTrace
    fullName: isTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    syntax:
      content: 'isTrace: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.keyValueStructureLine
    name: keyValueStructureLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function keyValueStructureLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.KeyValueStructureLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.keyValueStructureValue
    name: keyValueStructureValue()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function keyValueStructureValue()
      parameters: []
      return:
        type:
          - botbuilder-lg.KeyValueStructureValueContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.LEFT_SQUARE_BRACKET
    name: LEFT_SQUARE_BRACKET
    fullName: LEFT_SQUARE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LEFT_SQUARE_BRACKET: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.constructor
    name: LGTemplateParser(TokenStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new LGTemplateParser(input: TokenStream)'
      parameters:
        - id: input
          type:
            - TokenStream
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.match
    name: match(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: the token type to match
      return:
        type:
          - Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.matchWildcard
    name: matchWildcard()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: function matchWildcard()
      parameters: []
      return:
        type:
          - Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.MULTILINE_PREFIX
    name: MULTILINE_PREFIX
    fullName: MULTILINE_PREFIX
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MULTILINE_PREFIX: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.MULTILINE_SUFFIX
    name: MULTILINE_SUFFIX
    fullName: MULTILINE_SUFFIX
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MULTILINE_SUFFIX: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.NEWLINE
    name: NEWLINE
    fullName: NEWLINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NEWLINE: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.NEWLINE_IN_BODY
    name: NEWLINE_IN_BODY
    fullName: NEWLINE_IN_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NEWLINE_IN_BODY: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.NEWLINE_IN_STRUCTURE_NAME
    name: NEWLINE_IN_STRUCTURE_NAME
    fullName: NEWLINE_IN_STRUCTURE_NAME
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NEWLINE_IN_STRUCTURE_NAME: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.normalTemplateBody
    name: normalTemplateBody()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function normalTemplateBody()
      parameters: []
      return:
        type:
          - botbuilder-lg.NormalTemplateBodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.normalTemplateString
    name: normalTemplateString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function normalTemplateString()
      parameters: []
      return:
        type:
          - botbuilder-lg.NormalTemplateStringContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.notifyErrorListeners
    name: notifyErrorListeners(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type:
            - string
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.notifyErrorListeners_1
    name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type:
            - string
          description: ''
        - id: offendingToken
          type:
            - Token | null
          description: ''
        - id: e
          type:
            - RecognitionException | undefined
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.numberOfSyntaxErrors
    name: numberOfSyntaxErrors
    fullName: numberOfSyntaxErrors
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.precedence
    name: precedence
    fullName: precedence
    children: []
    langs:
      - typeScript
    type: property
    summary: Get the precedence level for the top-most precedence rule.
    syntax:
      content: 'precedence: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.precpred
    name: 'precpred(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.pushNewRecursionContext
    name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.removeParseListener
    name: removeParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to remove
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.removeParseListeners
    name: removeParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove all parse listeners.
    syntax:
      content: function removeParseListeners()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: reset the parser's state
    syntax:
      content: function reset()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"template\", \"body\", \"structuredTemplateBody\", \"structuredBodyNameLine\", \r\n\t\t\"errorStructuredName\", \"structuredBodyContentLine\", \"errorStructureLine\", \r\n\t\t\"keyValueStructureLine\", \"keyValueStructureValue\", \"structuredBodyEndLine\", \r\n\t\t\"normalTemplateBody\", \"templateString\", \"normalTemplateString\", \"errorTemplateString\", \r\n\t\t\"ifElseTemplateBody\", \"ifConditionRule\", \"ifCondition\", \"switchCaseTemplateBody\", \r\n\t\t\"switchCaseRule\", \"switchCaseStat\", \"expression\", \"expressionInStructure\",\r\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] ruleNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_body
    name: RULE_body
    fullName: RULE_body
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_body: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_errorStructuredName
    name: RULE_errorStructuredName
    fullName: RULE_errorStructuredName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_errorStructuredName: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_errorStructureLine
    name: RULE_errorStructureLine
    fullName: RULE_errorStructureLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_errorStructureLine: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_errorTemplateString
    name: RULE_errorTemplateString
    fullName: RULE_errorTemplateString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_errorTemplateString: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_expression
    name: RULE_expression
    fullName: RULE_expression
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_expression: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_expressionInStructure
    name: RULE_expressionInStructure
    fullName: RULE_expressionInStructure
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_expressionInStructure: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_ifCondition
    name: RULE_ifCondition
    fullName: RULE_ifCondition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_ifCondition: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_ifConditionRule
    name: RULE_ifConditionRule
    fullName: RULE_ifConditionRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_ifConditionRule: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_ifElseTemplateBody
    name: RULE_ifElseTemplateBody
    fullName: RULE_ifElseTemplateBody
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_ifElseTemplateBody: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_keyValueStructureLine
    name: RULE_keyValueStructureLine
    fullName: RULE_keyValueStructureLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_keyValueStructureLine: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_keyValueStructureValue
    name: RULE_keyValueStructureValue
    fullName: RULE_keyValueStructureValue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_keyValueStructureValue: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_normalTemplateBody
    name: RULE_normalTemplateBody
    fullName: RULE_normalTemplateBody
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_normalTemplateBody: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_normalTemplateString
    name: RULE_normalTemplateString
    fullName: RULE_normalTemplateString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_normalTemplateString: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyContentLine
    name: RULE_structuredBodyContentLine
    fullName: RULE_structuredBodyContentLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_structuredBodyContentLine: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyEndLine
    name: RULE_structuredBodyEndLine
    fullName: RULE_structuredBodyEndLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_structuredBodyEndLine: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyNameLine
    name: RULE_structuredBodyNameLine
    fullName: RULE_structuredBodyNameLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_structuredBodyNameLine: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_structuredTemplateBody
    name: RULE_structuredTemplateBody
    fullName: RULE_structuredTemplateBody
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_structuredTemplateBody: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseRule
    name: RULE_switchCaseRule
    fullName: RULE_switchCaseRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_switchCaseRule: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseStat
    name: RULE_switchCaseStat
    fullName: RULE_switchCaseStat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_switchCaseStat: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseTemplateBody
    name: RULE_switchCaseTemplateBody
    fullName: RULE_switchCaseTemplateBody
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_switchCaseTemplateBody: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_template
    name: RULE_template
    fullName: RULE_template
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_template: 0 = 0'
      return:
        type:
          - '0'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.RULE_templateString
    name: RULE_templateString
    fullName: RULE_templateString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_templateString: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.sempred
    name: 'sempred(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string serializedATN
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.setProfile
    name: setProfile(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type:
            - boolean
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.structuredBodyContentLine
    name: structuredBodyContentLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function structuredBodyContentLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.StructuredBodyContentLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.structuredBodyEndLine
    name: structuredBodyEndLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function structuredBodyEndLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.StructuredBodyEndLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.structuredBodyNameLine
    name: structuredBodyNameLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function structuredBodyNameLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.StructuredBodyNameLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.structuredTemplateBody
    name: structuredTemplateBody()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function structuredTemplateBody()
      parameters: []
      return:
        type:
          - botbuilder-lg.StructuredTemplateBodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURED_BODY_END
    name: STRUCTURED_BODY_END
    fullName: STRUCTURED_BODY_END
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURED_BODY_END: 27 = 27'
      return:
        type:
          - '27'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURED_COMMENTS
    name: STRUCTURED_COMMENTS
    fullName: STRUCTURED_COMMENTS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURED_COMMENTS: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURED_NEWLINE
    name: STRUCTURED_NEWLINE
    fullName: STRUCTURED_NEWLINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURED_NEWLINE: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURE_EQUALS
    name: STRUCTURE_EQUALS
    fullName: STRUCTURE_EQUALS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURE_EQUALS: 29 = 29'
      return:
        type:
          - '29'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURE_IDENTIFIER
    name: STRUCTURE_IDENTIFIER
    fullName: STRUCTURE_IDENTIFIER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURE_IDENTIFIER: 28 = 28'
      return:
        type:
          - '28'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURE_NAME
    name: STRUCTURE_NAME
    fullName: STRUCTURE_NAME
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURE_NAME: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.STRUCTURE_OR_MARK
    name: STRUCTURE_OR_MARK
    fullName: STRUCTURE_OR_MARK
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRUCTURE_OR_MARK: 30 = 30'
      return:
        type:
          - '30'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.SWITCH
    name: SWITCH
    fullName: SWITCH
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SWITCH: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.switchCaseRule
    name: switchCaseRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function switchCaseRule()
      parameters: []
      return:
        type:
          - botbuilder-lg.SwitchCaseRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.switchCaseStat
    name: switchCaseStat()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function switchCaseStat()
      parameters: []
      return:
        type:
          - botbuilder-lg.SwitchCaseStatContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.switchCaseTemplateBody
    name: switchCaseTemplateBody()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function switchCaseTemplateBody()
      parameters: []
      return:
        type:
          - botbuilder-lg.SwitchCaseTemplateBodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.template
    name: template()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function template()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.templateString
    name: templateString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function templateString()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateStringContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.TEXT
    name: TEXT
    fullName: TEXT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEXT: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_BODY
    name: TEXT_IN_STRUCTURE_BODY
    fullName: TEXT_IN_STRUCTURE_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_BODY: 33 = 33'
      return:
        type:
          - '33'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_NAME
    name: TEXT_IN_STRUCTURE_NAME
    fullName: TEXT_IN_STRUCTURE_NAME
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_NAME: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.unrollRecursionContexts
    name: unrollRecursionContexts(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type:
            - ParserRuleContext
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGTemplateParser._LITERAL_NAMES,
        LGTemplateParser._SYMBOLIC_NAMES, [])
      return:
        type:
          - Vocabulary
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: Vocabulary vocabulary
      return:
        type:
          - Vocabulary
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.WS
    name: WS
    fullName: WS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WS: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.WS_IN_BODY
    name: WS_IN_BODY
    fullName: WS_IN_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WS_IN_BODY: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_BODY
    name: WS_IN_STRUCTURE_BODY
    fullName: WS_IN_STRUCTURE_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WS_IN_STRUCTURE_BODY: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_NAME
    name: WS_IN_STRUCTURE_NAME
    fullName: WS_IN_STRUCTURE_NAME
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WS_IN_STRUCTURE_NAME: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: botbuilder-lg
references:
  - uid: botbuilder-lg.BodyContext
    name: BodyContext
    spec.typeScript:
      - name: BodyContext
        fullName: BodyContext
        uid: botbuilder-lg.BodyContext
  - uid: botbuilder-lg.ErrorStructureLineContext
    name: ErrorStructureLineContext
    spec.typeScript:
      - name: ErrorStructureLineContext
        fullName: ErrorStructureLineContext
        uid: botbuilder-lg.ErrorStructureLineContext
  - uid: botbuilder-lg.ErrorStructuredNameContext
    name: ErrorStructuredNameContext
    spec.typeScript:
      - name: ErrorStructuredNameContext
        fullName: ErrorStructuredNameContext
        uid: botbuilder-lg.ErrorStructuredNameContext
  - uid: botbuilder-lg.ErrorTemplateStringContext
    name: ErrorTemplateStringContext
    spec.typeScript:
      - name: ErrorTemplateStringContext
        fullName: ErrorTemplateStringContext
        uid: botbuilder-lg.ErrorTemplateStringContext
  - uid: botbuilder-lg.ExpressionContext
    name: ExpressionContext
    spec.typeScript:
      - name: ExpressionContext
        fullName: ExpressionContext
        uid: botbuilder-lg.ExpressionContext
  - uid: botbuilder-lg.ExpressionInStructureContext
    name: ExpressionInStructureContext
    spec.typeScript:
      - name: ExpressionInStructureContext
        fullName: ExpressionInStructureContext
        uid: botbuilder-lg.ExpressionInStructureContext
  - uid: botbuilder-lg.IfConditionContext
    name: IfConditionContext
    spec.typeScript:
      - name: IfConditionContext
        fullName: IfConditionContext
        uid: botbuilder-lg.IfConditionContext
  - uid: botbuilder-lg.IfConditionRuleContext
    name: IfConditionRuleContext
    spec.typeScript:
      - name: IfConditionRuleContext
        fullName: IfConditionRuleContext
        uid: botbuilder-lg.IfConditionRuleContext
  - uid: botbuilder-lg.IfElseTemplateBodyContext
    name: IfElseTemplateBodyContext
    spec.typeScript:
      - name: IfElseTemplateBodyContext
        fullName: IfElseTemplateBodyContext
        uid: botbuilder-lg.IfElseTemplateBodyContext
  - uid: botbuilder-lg.KeyValueStructureLineContext
    name: KeyValueStructureLineContext
    spec.typeScript:
      - name: KeyValueStructureLineContext
        fullName: KeyValueStructureLineContext
        uid: botbuilder-lg.KeyValueStructureLineContext
  - uid: botbuilder-lg.KeyValueStructureValueContext
    name: KeyValueStructureValueContext
    spec.typeScript:
      - name: KeyValueStructureValueContext
        fullName: KeyValueStructureValueContext
        uid: botbuilder-lg.KeyValueStructureValueContext
  - uid: botbuilder-lg.NormalTemplateBodyContext
    name: NormalTemplateBodyContext
    spec.typeScript:
      - name: NormalTemplateBodyContext
        fullName: NormalTemplateBodyContext
        uid: botbuilder-lg.NormalTemplateBodyContext
  - uid: botbuilder-lg.NormalTemplateStringContext
    name: NormalTemplateStringContext
    spec.typeScript:
      - name: NormalTemplateStringContext
        fullName: NormalTemplateStringContext
        uid: botbuilder-lg.NormalTemplateStringContext
  - uid: botbuilder-lg.StructuredBodyContentLineContext
    name: StructuredBodyContentLineContext
    spec.typeScript:
      - name: StructuredBodyContentLineContext
        fullName: StructuredBodyContentLineContext
        uid: botbuilder-lg.StructuredBodyContentLineContext
  - uid: botbuilder-lg.StructuredBodyEndLineContext
    name: StructuredBodyEndLineContext
    spec.typeScript:
      - name: StructuredBodyEndLineContext
        fullName: StructuredBodyEndLineContext
        uid: botbuilder-lg.StructuredBodyEndLineContext
  - uid: botbuilder-lg.StructuredBodyNameLineContext
    name: StructuredBodyNameLineContext
    spec.typeScript:
      - name: StructuredBodyNameLineContext
        fullName: StructuredBodyNameLineContext
        uid: botbuilder-lg.StructuredBodyNameLineContext
  - uid: botbuilder-lg.StructuredTemplateBodyContext
    name: StructuredTemplateBodyContext
    spec.typeScript:
      - name: StructuredTemplateBodyContext
        fullName: StructuredTemplateBodyContext
        uid: botbuilder-lg.StructuredTemplateBodyContext
  - uid: botbuilder-lg.SwitchCaseRuleContext
    name: SwitchCaseRuleContext
    spec.typeScript:
      - name: SwitchCaseRuleContext
        fullName: SwitchCaseRuleContext
        uid: botbuilder-lg.SwitchCaseRuleContext
  - uid: botbuilder-lg.SwitchCaseStatContext
    name: SwitchCaseStatContext
    spec.typeScript:
      - name: SwitchCaseStatContext
        fullName: SwitchCaseStatContext
        uid: botbuilder-lg.SwitchCaseStatContext
  - uid: botbuilder-lg.SwitchCaseTemplateBodyContext
    name: SwitchCaseTemplateBodyContext
    spec.typeScript:
      - name: SwitchCaseTemplateBodyContext
        fullName: SwitchCaseTemplateBodyContext
        uid: botbuilder-lg.SwitchCaseTemplateBodyContext
  - uid: botbuilder-lg.TemplateContext
    name: TemplateContext
    spec.typeScript:
      - name: TemplateContext
        fullName: TemplateContext
        uid: botbuilder-lg.TemplateContext
  - uid: botbuilder-lg.TemplateStringContext
    name: TemplateStringContext
    spec.typeScript:
      - name: TemplateStringContext
        fullName: TemplateStringContext
        uid: botbuilder-lg.TemplateStringContext

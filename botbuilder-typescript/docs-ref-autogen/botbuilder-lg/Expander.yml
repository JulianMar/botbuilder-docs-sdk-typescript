### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.Expander
    name: Expander
    fullName: Expander
    children:
      - botbuilder-lg.Expander.constructScope
      - botbuilder-lg.Expander.constructor
      - botbuilder-lg.Expander.expandTemplate
      - botbuilder-lg.Expander.templateMap
      - botbuilder-lg.Expander.templates
      - botbuilder-lg.Expander.visit
      - botbuilder-lg.Expander.visitChildren
      - botbuilder-lg.Expander.visitErrorNode
      - botbuilder-lg.Expander.visitIfElseBody
      - botbuilder-lg.Expander.visitNormalBody
      - botbuilder-lg.Expander.visitNormalTemplateBody
      - botbuilder-lg.Expander.visitNormalTemplateString
      - botbuilder-lg.Expander.visitStructuredBody
      - botbuilder-lg.Expander.visitSwitchCaseBody
      - botbuilder-lg.Expander.visitTerminal
    langs:
      - typeScript
    type: class
    summary: LG template expander.
    extends:
      name: 'AbstractParseTreeVisitor<string[]>'
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.constructScope
    name: 'constructScope(string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function constructScope(templateName: string, args: any[])'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.constructor
    name: 'Expander(Template[], ExpressionParser, EvaluationOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Expander(templates: Template[], expressionParser: ExpressionParser,
        opt?: EvaluationOptions)
      parameters:
        - id: templates
          type:
            - 'botbuilder-lg.Template[]'
          description: ''
        - id: expressionParser
          type:
            - ExpressionParser
          description: ''
        - id: opt
          type:
            - botbuilder-lg.EvaluationOptions
          description: ''
          optional: true
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.expandTemplate
    name: 'expandTemplate(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Expand the results of a template with given name and scope.
    syntax:
      content: 'function expandTemplate(templateName: string, scope: any)'
      parameters:
        - id: templateName
          type:
            - string
          description: Given template name.
        - id: scope
          type:
            - any
          description: Given scope.
      return:
        type:
          - 'any[]'
        description: All possiable results.
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.templateMap
    name: templateMap
    fullName: templateMap
    children: []
    langs:
      - typeScript
    type: property
    summary: TemplateMap.
    syntax:
      content: 'templateMap: [key: string]: Template'
      return:
        type:
          - '[key: string]: botbuilder-lg.Template'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.templates
    name: templates
    fullName: templates
    children: []
    langs:
      - typeScript
    type: property
    summary: Templates.
    syntax:
      content: 'templates: Template[]'
      return:
        type:
          - 'botbuilder-lg.Template[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visit
    name: visit(ParseTree)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      The default implementation calls <xref:ParseTree%23accept> on the
      specified tree.
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type:
            - ParseTree
          description: ''
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitChildren
    name: visitChildren(RuleNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      The default implementation initializes the aggregate result to
      [defaultResult()](xref:%23defaultResult). Before visiting each child, it
      calls [shouldVisitNextChild](xref:%23shouldVisitNextChild); if the result
      is `false` no more children are visited and the current aggregate
      result is returned. After visiting a child, the aggregate result is
      updated by calling [aggregateResult](xref:%23aggregateResult) with the
      previous aggregate result and the result of visiting the child.

      The default implementation is not safe for use in visitors that modify
      the tree structure. Visitors that modify the tree should override this
      method to behave properly in respect to the specific algorithm in use.
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type:
            - RuleNode
          description: ''
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitErrorNode
    name: visitErrorNode(ErrorNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type:
            - ErrorNode
          description: ''
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitIfElseBody
    name: visitIfElseBody(IfElseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitIfElseBody(ctx: IfElseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.IfElseBodyContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitNormalBody
    name: visitNormalBody(NormalBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalBody(ctx: NormalBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalBodyContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitNormalTemplateBody
    name: visitNormalTemplateBody(NormalTemplateBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateBody(ctx: NormalTemplateBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateBodyContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitNormalTemplateString
    name: visitNormalTemplateString(NormalTemplateStringContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateString(ctx: NormalTemplateStringContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateStringContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitStructuredBody
    name: visitStructuredBody(StructuredBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitStructuredBody(ctx: StructuredBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.StructuredBodyContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitSwitchCaseBody
    name: visitSwitchCaseBody(SwitchCaseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitSwitchCaseBody(ctx: SwitchCaseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.SwitchCaseBodyContext
          description: ''
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Expander.visitTerminal
    name: visitTerminal(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type:
            - TerminalNode
          description: ''
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
references:
  - uid: 'botbuilder-lg.Template[]'
    name: 'Template[]'
    spec.typeScript:
      - name: Template
        fullName: Template
        uid: botbuilder-lg.Template
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-lg.EvaluationOptions
    name: EvaluationOptions
    spec.typeScript:
      - name: EvaluationOptions
        fullName: EvaluationOptions
        uid: botbuilder-lg.EvaluationOptions
  - uid: '[key: string]: botbuilder-lg.Template'
    name: Template
    spec.typeScript:
      - name: '[key: string]: '
        fullName: '[key: string]: '
      - name: Template
        fullName: Template
        uid: botbuilder-lg.Template
  - uid: botbuilder-lg.IfElseBodyContext
    name: IfElseBodyContext
    spec.typeScript:
      - name: IfElseBodyContext
        fullName: IfElseBodyContext
        uid: botbuilder-lg.IfElseBodyContext
  - uid: botbuilder-lg.NormalBodyContext
    name: NormalBodyContext
    spec.typeScript:
      - name: NormalBodyContext
        fullName: NormalBodyContext
        uid: botbuilder-lg.NormalBodyContext
  - uid: botbuilder-lg.NormalTemplateBodyContext
    name: NormalTemplateBodyContext
    spec.typeScript:
      - name: NormalTemplateBodyContext
        fullName: NormalTemplateBodyContext
        uid: botbuilder-lg.NormalTemplateBodyContext
  - uid: botbuilder-lg.NormalTemplateStringContext
    name: NormalTemplateStringContext
    spec.typeScript:
      - name: NormalTemplateStringContext
        fullName: NormalTemplateStringContext
        uid: botbuilder-lg.NormalTemplateStringContext
  - uid: botbuilder-lg.StructuredBodyContext
    name: StructuredBodyContext
    spec.typeScript:
      - name: StructuredBodyContext
        fullName: StructuredBodyContext
        uid: botbuilder-lg.StructuredBodyContext
  - uid: botbuilder-lg.SwitchCaseBodyContext
    name: SwitchCaseBodyContext
    spec.typeScript:
      - name: SwitchCaseBodyContext
        fullName: SwitchCaseBodyContext
        uid: botbuilder-lg.SwitchCaseBodyContext

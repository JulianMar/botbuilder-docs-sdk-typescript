### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.LGFileParser
    name: LGFileParser
    fullName: LGFileParser
    children:
      - botbuilder-lg.LGFileParser.action
      - botbuilder-lg.LGFileParser.addErrorListener
      - botbuilder-lg.LGFileParser.addParseListener
      - botbuilder-lg.LGFileParser.atn
      - botbuilder-lg.LGFileParser.buildParseTree
      - botbuilder-lg.LGFileParser.COMMENT
      - botbuilder-lg.LGFileParser.commentDefinition
      - botbuilder-lg.LGFileParser.compileParseTreePattern
      - botbuilder-lg.LGFileParser.compileParseTreePattern_1
      - botbuilder-lg.LGFileParser.consume
      - botbuilder-lg.LGFileParser.context
      - botbuilder-lg.LGFileParser.createErrorNode
      - botbuilder-lg.LGFileParser.createTerminalNode
      - botbuilder-lg.LGFileParser.currentToken
      - botbuilder-lg.LGFileParser.dumpDFA
      - botbuilder-lg.LGFileParser.enterLeftFactoredRule
      - botbuilder-lg.LGFileParser.enterOuterAlt
      - botbuilder-lg.LGFileParser.enterRecursionRule
      - botbuilder-lg.LGFileParser.enterRule
      - botbuilder-lg.LGFileParser.EOF
      - botbuilder-lg.LGFileParser.errorDefinition
      - botbuilder-lg.LGFileParser.errorHandler
      - botbuilder-lg.LGFileParser.ESCAPE_CHARACTER
      - botbuilder-lg.LGFileParser.exitRule
      - botbuilder-lg.LGFileParser.file
      - botbuilder-lg.LGFileParser.getATNWithBypassAlts
      - botbuilder-lg.LGFileParser.getDFAStrings
      - botbuilder-lg.LGFileParser.getErrorHeader
      - botbuilder-lg.LGFileParser.getErrorListenerDispatch
      - botbuilder-lg.LGFileParser.getErrorListeners
      - botbuilder-lg.LGFileParser.getExpectedTokens
      - botbuilder-lg.LGFileParser.getExpectedTokensWithinCurrentRule
      - botbuilder-lg.LGFileParser.getInvokingContext
      - botbuilder-lg.LGFileParser.getParseListeners
      - botbuilder-lg.LGFileParser.getRuleIndex
      - botbuilder-lg.LGFileParser.getRuleIndexMap
      - botbuilder-lg.LGFileParser.getRuleInvocationStack
      - botbuilder-lg.LGFileParser.getTokenType
      - botbuilder-lg.LGFileParser.getTokenTypeMap
      - botbuilder-lg.LGFileParser.grammarFileName
      - botbuilder-lg.LGFileParser.IMPORT
      - botbuilder-lg.LGFileParser.importDefinition
      - botbuilder-lg.LGFileParser.inContext
      - botbuilder-lg.LGFileParser.inputStream
      - botbuilder-lg.LGFileParser.interpreter
      - botbuilder-lg.LGFileParser.INVALID_LINE
      - botbuilder-lg.LGFileParser.isExpectedToken
      - botbuilder-lg.LGFileParser.isMatchedEOF
      - botbuilder-lg.LGFileParser.isTrace
      - botbuilder-lg.LGFileParser.constructor
      - botbuilder-lg.LGFileParser.match
      - botbuilder-lg.LGFileParser.matchWildcard
      - botbuilder-lg.LGFileParser.MULTILINE_PREFIX
      - botbuilder-lg.LGFileParser.MULTILINE_SUFFIX
      - botbuilder-lg.LGFileParser.MULTILINE_TEXT
      - botbuilder-lg.LGFileParser.NEWLINE
      - botbuilder-lg.LGFileParser.notifyErrorListeners
      - botbuilder-lg.LGFileParser.notifyErrorListeners_1
      - botbuilder-lg.LGFileParser.numberOfSyntaxErrors
      - botbuilder-lg.LGFileParser.OPTION
      - botbuilder-lg.LGFileParser.optionDefinition
      - botbuilder-lg.LGFileParser.paragraph
      - botbuilder-lg.LGFileParser.parseInfo
      - botbuilder-lg.LGFileParser.precedence
      - botbuilder-lg.LGFileParser.precpred
      - botbuilder-lg.LGFileParser.pushNewRecursionContext
      - botbuilder-lg.LGFileParser.removeErrorListener
      - botbuilder-lg.LGFileParser.removeErrorListeners
      - botbuilder-lg.LGFileParser.removeParseListener
      - botbuilder-lg.LGFileParser.removeParseListeners
      - botbuilder-lg.LGFileParser.reset
      - botbuilder-lg.LGFileParser.reset_1
      - botbuilder-lg.LGFileParser.ruleContext
      - botbuilder-lg.LGFileParser.ruleNames
      - botbuilder-lg.LGFileParser.ruleNames
      - botbuilder-lg.LGFileParser.RULE_commentDefinition
      - botbuilder-lg.LGFileParser.RULE_errorDefinition
      - botbuilder-lg.LGFileParser.RULE_file
      - botbuilder-lg.LGFileParser.RULE_importDefinition
      - botbuilder-lg.LGFileParser.RULE_optionDefinition
      - botbuilder-lg.LGFileParser.RULE_paragraph
      - botbuilder-lg.LGFileParser.RULE_templateBody
      - botbuilder-lg.LGFileParser.RULE_templateBodyLine
      - botbuilder-lg.LGFileParser.RULE_templateDefinition
      - botbuilder-lg.LGFileParser.RULE_templateNameLine
      - botbuilder-lg.LGFileParser.sempred
      - botbuilder-lg.LGFileParser.serializedATN
      - botbuilder-lg.LGFileParser.setProfile
      - botbuilder-lg.LGFileParser.sourceName
      - botbuilder-lg.LGFileParser.state
      - botbuilder-lg.LGFileParser.templateBody
      - botbuilder-lg.LGFileParser.templateBodyLine
      - botbuilder-lg.LGFileParser.templateDefinition
      - botbuilder-lg.LGFileParser.templateNameLine
      - botbuilder-lg.LGFileParser.TEMPLATE_BODY
      - botbuilder-lg.LGFileParser.TEMPLATE_NAME_LINE
      - botbuilder-lg.LGFileParser.tokenFactory
      - botbuilder-lg.LGFileParser.unrollRecursionContexts
      - botbuilder-lg.LGFileParser.VOCABULARY
      - botbuilder-lg.LGFileParser.vocabulary
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Parser
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.action
    name: 'action(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.addErrorListener
    name: addErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.addParseListener
    name: addParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to add
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.buildParseTree
    name: buildParseTree
    fullName: buildParseTree
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.COMMENT
    name: COMMENT
    fullName: COMMENT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static COMMENT: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.commentDefinition
    name: commentDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function commentDefinition()
      parameters: []
      return:
        type:
          - botbuilder-lg.CommentDefinitionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.compileParseTreePattern
    name: 'compileParseTreePattern(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.compileParseTreePattern_1
    name: 'compileParseTreePattern(string, number, Lexer)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
        - id: lexer
          type:
            - Lexer
          description: ''
          optional: true
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.consume
    name: consume()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    syntax:
      content: function consume()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.createErrorNode
    name: 'createErrorNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - ErrorNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.createTerminalNode
    name: 'createTerminalNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    syntax:
      content: 'function createTerminalNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.currentToken
    name: currentToken
    fullName: currentToken
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    syntax:
      content: 'currentToken: Token'
      return:
        type:
          - Token
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.dumpDFA
    name: dumpDFA()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function dumpDFA()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.enterLeftFactoredRule
    name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.enterOuterAlt
    name: 'enterOuterAlt(ParserRuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: altNum
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.enterRecursionRule
    name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: precedence
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.enterRule
    name: 'enterRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.errorDefinition
    name: errorDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function errorDefinition()
      parameters: []
      return:
        type:
          - botbuilder-lg.ErrorDefinitionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.errorHandler
    name: errorHandler
    fullName: errorHandler
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type:
          - ANTLRErrorStrategy
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.ESCAPE_CHARACTER
    name: ESCAPE_CHARACTER
    fullName: ESCAPE_CHARACTER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ESCAPE_CHARACTER: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.exitRule
    name: exitRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function exitRule()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.file
    name: file()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function file()
      parameters: []
      return:
        type:
          - botbuilder-lg.FileContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getATNWithBypassAlts
    name: getATNWithBypassAlts()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    syntax:
      content: function getATNWithBypassAlts()
      parameters: []
      return:
        type:
          - ATN
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getDFAStrings
    name: getDFAStrings()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function getDFAStrings()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ParserErrorListener
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<Token>>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getExpectedTokens
    name: getExpectedTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    syntax:
      content: function getExpectedTokens()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getExpectedTokensWithinCurrentRule
    name: getExpectedTokensWithinCurrentRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getInvokingContext
    name: getInvokingContext(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type:
            - number
          description: ''
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getParseListeners
    name: getParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getParseListeners()
      parameters: []
      return:
        type:
          - 'ParseTreeListener[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getRuleIndex
    name: getRuleIndex(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getRuleInvocationStack
    name: getRuleInvocationStack(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type:
            - RuleContext
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string grammarFileName
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.IMPORT
    name: IMPORT
    fullName: IMPORT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IMPORT: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.importDefinition
    name: importDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function importDefinition()
      parameters: []
      return:
        type:
          - botbuilder-lg.ImportDefinitionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.inContext
    name: inContext(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the token stream and reset the parser.
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type:
          - TokenStream
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type:
          - ParserATNSimulator
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.INVALID_LINE
    name: INVALID_LINE
    fullName: INVALID_LINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static INVALID_LINE: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.isExpectedToken
    name: isExpectedToken(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type:
            - number
          description: the symbol type to check
      return:
        type:
          - boolean
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.isMatchedEOF
    name: isMatchedEOF
    fullName: isMatchedEOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.isTrace
    name: isTrace
    fullName: isTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    syntax:
      content: 'isTrace: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.constructor
    name: LGFileParser(TokenStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new LGFileParser(input: TokenStream)'
      parameters:
        - id: input
          type:
            - TokenStream
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.match
    name: match(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: the token type to match
      return:
        type:
          - Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.matchWildcard
    name: matchWildcard()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: function matchWildcard()
      parameters: []
      return:
        type:
          - Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.MULTILINE_PREFIX
    name: MULTILINE_PREFIX
    fullName: MULTILINE_PREFIX
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MULTILINE_PREFIX: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.MULTILINE_SUFFIX
    name: MULTILINE_SUFFIX
    fullName: MULTILINE_SUFFIX
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MULTILINE_SUFFIX: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.MULTILINE_TEXT
    name: MULTILINE_TEXT
    fullName: MULTILINE_TEXT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MULTILINE_TEXT: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.NEWLINE
    name: NEWLINE
    fullName: NEWLINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NEWLINE: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.notifyErrorListeners
    name: notifyErrorListeners(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type:
            - string
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.notifyErrorListeners_1
    name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type:
            - string
          description: ''
        - id: offendingToken
          type:
            - Token | null
          description: ''
        - id: e
          type:
            - RecognitionException | undefined
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.numberOfSyntaxErrors
    name: numberOfSyntaxErrors
    fullName: numberOfSyntaxErrors
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.OPTION
    name: OPTION
    fullName: OPTION
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OPTION: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.optionDefinition
    name: optionDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function optionDefinition()
      parameters: []
      return:
        type:
          - botbuilder-lg.OptionDefinitionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.paragraph
    name: paragraph()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function paragraph()
      parameters: []
      return:
        type:
          - botbuilder-lg.ParagraphContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.precedence
    name: precedence
    fullName: precedence
    children: []
    langs:
      - typeScript
    type: property
    summary: Get the precedence level for the top-most precedence rule.
    syntax:
      content: 'precedence: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.precpred
    name: 'precpred(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.pushNewRecursionContext
    name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.removeParseListener
    name: removeParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to remove
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.removeParseListeners
    name: removeParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove all parse listeners.
    syntax:
      content: function removeParseListeners()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: reset the parser's state
    syntax:
      content: function reset()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"file\", \"paragraph\", \"commentDefinition\", \"importDefinition\", \"optionDefinition\", \r\n\t\t\"errorDefinition\", \"templateDefinition\", \"templateNameLine\", \"templateBody\", \r\n\t\t\"templateBodyLine\",\r\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] ruleNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_commentDefinition
    name: RULE_commentDefinition
    fullName: RULE_commentDefinition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_commentDefinition: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_errorDefinition
    name: RULE_errorDefinition
    fullName: RULE_errorDefinition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_errorDefinition: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_file
    name: RULE_file
    fullName: RULE_file
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_file: 0 = 0'
      return:
        type:
          - '0'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_importDefinition
    name: RULE_importDefinition
    fullName: RULE_importDefinition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_importDefinition: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_optionDefinition
    name: RULE_optionDefinition
    fullName: RULE_optionDefinition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_optionDefinition: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_paragraph
    name: RULE_paragraph
    fullName: RULE_paragraph
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_paragraph: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_templateBody
    name: RULE_templateBody
    fullName: RULE_templateBody
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_templateBody: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_templateBodyLine
    name: RULE_templateBodyLine
    fullName: RULE_templateBodyLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_templateBodyLine: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_templateDefinition
    name: RULE_templateDefinition
    fullName: RULE_templateDefinition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_templateDefinition: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.RULE_templateNameLine
    name: RULE_templateNameLine
    fullName: RULE_templateNameLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_templateNameLine: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.sempred
    name: 'sempred(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string serializedATN
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.setProfile
    name: setProfile(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type:
            - boolean
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.templateBody
    name: templateBody()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function templateBody()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateBodyContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.templateBodyLine
    name: templateBodyLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function templateBodyLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateBodyLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.templateDefinition
    name: templateDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function templateDefinition()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateDefinitionContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.templateNameLine
    name: templateNameLine()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function templateNameLine()
      parameters: []
      return:
        type:
          - botbuilder-lg.TemplateNameLineContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.TEMPLATE_BODY
    name: TEMPLATE_BODY
    fullName: TEMPLATE_BODY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEMPLATE_BODY: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.TEMPLATE_NAME_LINE
    name: TEMPLATE_NAME_LINE
    fullName: TEMPLATE_NAME_LINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEMPLATE_NAME_LINE: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.unrollRecursionContexts
    name: unrollRecursionContexts(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type:
            - ParserRuleContext
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGFileParser._LITERAL_NAMES,
        LGFileParser._SYMBOLIC_NAMES, [])
      return:
        type:
          - Vocabulary
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGFileParser.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: Vocabulary vocabulary
      return:
        type:
          - Vocabulary
        description: ''
    package: botbuilder-lg
references:
  - uid: botbuilder-lg.CommentDefinitionContext
    name: CommentDefinitionContext
    spec.typeScript:
      - name: CommentDefinitionContext
        fullName: CommentDefinitionContext
        uid: botbuilder-lg.CommentDefinitionContext
  - uid: botbuilder-lg.ErrorDefinitionContext
    name: ErrorDefinitionContext
    spec.typeScript:
      - name: ErrorDefinitionContext
        fullName: ErrorDefinitionContext
        uid: botbuilder-lg.ErrorDefinitionContext
  - uid: botbuilder-lg.FileContext
    name: FileContext
    spec.typeScript:
      - name: FileContext
        fullName: FileContext
        uid: botbuilder-lg.FileContext
  - uid: botbuilder-lg.ImportDefinitionContext
    name: ImportDefinitionContext
    spec.typeScript:
      - name: ImportDefinitionContext
        fullName: ImportDefinitionContext
        uid: botbuilder-lg.ImportDefinitionContext
  - uid: botbuilder-lg.OptionDefinitionContext
    name: OptionDefinitionContext
    spec.typeScript:
      - name: OptionDefinitionContext
        fullName: OptionDefinitionContext
        uid: botbuilder-lg.OptionDefinitionContext
  - uid: botbuilder-lg.ParagraphContext
    name: ParagraphContext
    spec.typeScript:
      - name: ParagraphContext
        fullName: ParagraphContext
        uid: botbuilder-lg.ParagraphContext
  - uid: botbuilder-lg.TemplateBodyContext
    name: TemplateBodyContext
    spec.typeScript:
      - name: TemplateBodyContext
        fullName: TemplateBodyContext
        uid: botbuilder-lg.TemplateBodyContext
  - uid: botbuilder-lg.TemplateBodyLineContext
    name: TemplateBodyLineContext
    spec.typeScript:
      - name: TemplateBodyLineContext
        fullName: TemplateBodyLineContext
        uid: botbuilder-lg.TemplateBodyLineContext
  - uid: botbuilder-lg.TemplateDefinitionContext
    name: TemplateDefinitionContext
    spec.typeScript:
      - name: TemplateDefinitionContext
        fullName: TemplateDefinitionContext
        uid: botbuilder-lg.TemplateDefinitionContext
  - uid: botbuilder-lg.TemplateNameLineContext
    name: TemplateNameLineContext
    spec.typeScript:
      - name: TemplateNameLineContext
        fullName: TemplateNameLineContext
        uid: botbuilder-lg.TemplateNameLineContext

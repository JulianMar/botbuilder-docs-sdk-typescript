### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.ExtendedUserTokenProvider
    name: ExtendedUserTokenProvider
    fullName: ExtendedUserTokenProvider
    children:
      - botbuilder-core.ExtendedUserTokenProvider.exchangeToken
      - botbuilder-core.ExtendedUserTokenProvider.exchangeToken_1
      - botbuilder-core.ExtendedUserTokenProvider.getAadTokens
      - botbuilder-core.ExtendedUserTokenProvider.getSignInLink
      - botbuilder-core.ExtendedUserTokenProvider.getSignInResource
      - botbuilder-core.ExtendedUserTokenProvider.getSignInResource_1
      - botbuilder-core.ExtendedUserTokenProvider.getSignInResource_2
      - botbuilder-core.ExtendedUserTokenProvider.getTokenStatus
      - botbuilder-core.ExtendedUserTokenProvider.getUserToken
      - botbuilder-core.ExtendedUserTokenProvider.signOutUser
    langs:
      - typeScript
    type: interface
    summary: >-
      Interface for User Token OAuth Single Sign On and Token Exchange APIs for
      BotAdapters
    extends:
      name: botbuilder-core.IUserTokenProvider
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.exchangeToken
    name: 'exchangeToken(TurnContext, string, string, TokenExchangeRequest)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Performs a token exchange operation such as for single sign-on.
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: userId
          type:
            - string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type:
            - TokenExchangeRequest
          description: >
            The exchange request details, either a token to exchange or a uri to
            exchange.
      return:
        type:
          - Promise<TokenResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.exchangeToken_1
    name: >-
      exchangeToken(TurnContext, string, string, TokenExchangeRequest,
      CoreAppCredentials)
    children: []
    type: method
    langs:
      - typeScript
    summary: Performs a token exchange operation such as for single sign-on.
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest,
        appCredentials: CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: userId
          type:
            - string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type:
            - TokenExchangeRequest
          description: >
            The exchange request details, either a token to exchange or a uri to
            exchange.
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
      return:
        type:
          - Promise<TokenResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getAadTokens
    name: 'getAadTokens(TurnContext, string, string[], CoreAppCredentials)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Signs the user out with the token server.
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[], appCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: resourceUrls
          type:
            - 'string[]'
          description: ''
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
          optional: true
      return:
        type:
          - 'Promise<[key: string]: TokenResponse>'
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getSignInLink
    name: 'getSignInLink(TurnContext, string, CoreAppCredentials)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a signin link from the token server that can be sent as part of a
      SigninCard.
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        appCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource
    name: 'getSignInResource(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    syntax:
      content: 'function getSignInResource(context: TurnContext, connectionName: string)'
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: |
            Name of the auth connection to use.
      return:
        type:
          - Promise<SignInUrlResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource_1
    name: 'getSignInResource(TurnContext, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId: string, finalRedirect?: string)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: userId
          type:
            - string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type:
            - string
          description: |
            The final URL that the OAuth flow will redirect to.
          optional: true
      return:
        type:
          - Promise<SignInUrlResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource_2
    name: 'getSignInResource(TurnContext, string, string, string, CoreAppCredentials)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId: string, finalRedirect?: string, appCredentials?:
        CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: userId
          type:
            - string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type:
            - string
          description: |
            The final URL that the OAuth flow will redirect to.
          optional: true
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
          optional: true
      return:
        type:
          - Promise<SignInUrlResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getTokenStatus
    name: 'getTokenStatus(TurnContext, string, string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the token status for each configured connection for the given
      user, using the bot's AppCredentials.
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId: string,
        includeFilter?: string, oAuthAppCredentials?: any)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: userId
          type:
            - string
          description: The user Id for which token status is retrieved.
        - id: includeFilter
          type:
            - string
          description: >-
            Comma separated list of connection's to include. Blank will return
            token status for all configured connections.
          optional: true
        - id: oAuthAppCredentials
          type:
            - any
          description: |
            The app credentials for OAuth.
          optional: true
      return:
        type:
          - 'Promise<any[]>'
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.getUserToken
    name: 'getUserToken(TurnContext, string, string, CoreAppCredentials)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves the OAuth token for a user that is in a sign-in flow.
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string, appCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: magicCode
          type:
            - string
          description: |
            (Optional) Optional user entered code to validate.
          optional: true
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
          optional: true
      return:
        type:
          - Promise<TokenResponse>
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.ExtendedUserTokenProvider.signOutUser
    name: 'signOutUser(TurnContext, string, string, CoreAppCredentials)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Signs the user out with the token server.
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName: string,
        userId?: string, appCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: userId
          type:
            - string
          description: User id of user to sign out.
          optional: true
        - id: appCredentials
          type:
            - botbuilder-core.CoreAppCredentials
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-core
references:
  - uid: botbuilder-core.IUserTokenProvider
    name: IUserTokenProvider
    spec.typeScript:
      - name: IUserTokenProvider
        fullName: IUserTokenProvider
        uid: botbuilder-core.IUserTokenProvider
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    spec.typeScript:
      - name: TurnContext
        fullName: TurnContext
        uid: botbuilder-core.TurnContext
  - uid: botbuilder-core.CoreAppCredentials
    name: CoreAppCredentials
    spec.typeScript:
      - name: CoreAppCredentials
        fullName: CoreAppCredentials
        uid: botbuilder-core.CoreAppCredentials

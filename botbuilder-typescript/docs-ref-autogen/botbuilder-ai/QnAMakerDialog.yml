### YamlMime:UniversalReference
items:
  - uid: botbuilder-ai.QnAMakerDialog
    name: QnAMakerDialog
    fullName: QnAMakerDialog<O>
    children:
      - botbuilder-ai.QnAMakerDialog.addStep
      - botbuilder-ai.QnAMakerDialog.beginDialog
      - botbuilder-ai.QnAMakerDialog.configure
      - botbuilder-ai.QnAMakerDialog.continueDialog
      - botbuilder-ai.QnAMakerDialog.endDialog
      - botbuilder-ai.QnAMakerDialog.EndOfTurn
      - botbuilder-ai.QnAMakerDialog.getVersion
      - botbuilder-ai.QnAMakerDialog.id
      - botbuilder-ai.QnAMakerDialog.onDialogEvent
      - botbuilder-ai.QnAMakerDialog.constructor
      - botbuilder-ai.QnAMakerDialog.repromptDialog
      - botbuilder-ai.QnAMakerDialog.resumeDialog
      - botbuilder-ai.QnAMakerDialog.telemetryClient
    langs:
      - typeScript
    type: class
    summary: >-
      A dialog that supports multi-step and adaptive-learning QnA Maker
      services.
    extends:
      name: WaterfallDialog
    package: botbuilder-ai
    remarks: >-
      An instance of this class targets a specific QnA Maker knowledge base.

      It supports knowledge bases that include follow-up prompt and active
      learning features.

      The dialog will also present user with appropriate multi-turn prompt or
      active learning options.
  - uid: botbuilder-ai.QnAMakerDialog.addStep
    name: addStep(WaterfallStep<O>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a new step to the waterfall.
    syntax:
      content: 'function addStep(step: WaterfallStep<O>)'
      parameters:
        - id: step
          type:
            - WaterfallStep<O>
          description: |
            Asynchronous step function to call.
      return:
        type:
          - this
        description: ''
    package: botbuilder-ai
    remarks: >-
      All step functions should be asynchronous and return a `DialogTurnResult`.
      The

      `WaterfallStepContext` passed into your function derives from
      `DialogContext` and contains

      numerous stack manipulation methods which return a `DialogTurnResult` so
      you can typically

      just return the result from the DialogContext method you call.


      The step function itself can be either an asynchronous closure:


      ```JavaScript

      const helloDialog = new WaterfallDialog('hello');


      helloDialog.addStep(async (step) => {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      });

      ```


      A named async function:


      ```JavaScript

      async function helloWorldStep(step) {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      }


      helloDialog.addStep(helloWorldStep);

      ```


      Or a class method that's been bound to its `this` pointer:


      ```JavaScript

      helloDialog.addStep(this.helloWorldStep.bind(this));

      ```
  - uid: botbuilder-ai.QnAMakerDialog.beginDialog
    name: 'beginDialog(DialogContext, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called when the dialog is started and pushed onto the dialog stack.
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: object)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: options
          type:
            - object
          description: |
            (Optional) Initial information to pass to the dialog.
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-ai
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog.


      You can use the [options](#options) parameter to include the QnA Maker
      context data,

      which represents context from the previous query. To do so, the value
      should include a

      `context` property of type [QnAResponseContext](#QnAResponseContext).
  - uid: botbuilder-ai.QnAMakerDialog.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called when the dialog is ending.
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: instance
          type:
            - DialogInstance
          description: The instance of the current dialog.
        - id: reason
          type:
            - DialogReason
          description: |
            The reason the dialog is ending.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets a default end-of-turn result.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - DialogTurnResult
        description: ''
    package: botbuilder-ai
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
  - uid: botbuilder-ai.QnAMakerDialog.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-ai
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-ai.QnAMakerDialog.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - DialogEvent
          description: The event being raised.
      return:
        type:
          - Promise<boolean>
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.constructor
    name: >-
      QnAMakerDialog(string, string, string, Activity, number, string, string,
      number, Activity, QnAMakerMetadata[], string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Initializes a new instance of the [QnAMakerDialog](xref:QnAMakerDialog)
      class.
    syntax:
      content: >-
        new QnAMakerDialog(knowledgeBaseId: string, endpointKey: string,
        hostName: string, noAnswer?: Activity, threshold: number,
        activeLearningCardTitle: string, cardNoMatchText: string, top: number,
        cardNoMatchResponse?: Activity, strictFilters?: QnAMakerMetadata[],
        dialogId: string)
      parameters:
        - id: knowledgeBaseId
          type:
            - string
          description: The ID of the QnA Maker knowledge base to query.
        - id: endpointKey
          type:
            - string
          description: The QnA Maker endpoint key to use to query the knowledge base.
        - id: hostName
          type:
            - string
          description: >-
            The QnA Maker host URL for the knowledge base, starting with
            "https://" and ending with "/qnamaker".
        - id: noAnswer
          type:
            - Activity
          description: >-
            (Optional) The activity to send the user when QnA Maker does not
            find an answer.
          optional: true
        - id: threshold
          type:
            - number
          description: >-
            (Optional) The threshold above which to treat answers found from the
            knowledgebase as a match.
        - id: activeLearningCardTitle
          type:
            - string
          description: >-
            (Optional) The card title to use when showing active learning
            options to the user, if active learning is enabled.
        - id: cardNoMatchText
          type:
            - string
          description: >-
            (Optional) The button text to use with active learning options,
            allowing a user to indicate none of the options are applicable.
        - id: top
          type:
            - number
          description: >-
            (Optional) Maximum number of answers to return from the knowledge
            base.
        - id: cardNoMatchResponse
          type:
            - Activity
          description: >-
            (Optional) The activity to send the user if they select the no match
            option on an active learning card.
          optional: true
        - id: strictFilters
          type:
            - 'botbuilder-ai.QnAMakerMetadata[]'
          description: >-
            (Optional) QnA Maker metadata with which to filter or boost queries
            to the knowledge base; or null to apply none.
          optional: true
        - id: dialogId
          type:
            - string
          description: |
            (Optional) Id of the created dialog. Default is 'QnAMakerDialog'.
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'When overridden in a derived class, reprompts the user for input.'
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: instance
          type:
            - DialogInstance
          description: |
            Current state information for this dialog.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-ai
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
  - uid: botbuilder-ai.QnAMakerDialog.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: reason
          type:
            - DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMakerDialog.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the telemetry client for this dialog.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-ai
references:
  - uid: 'botbuilder-ai.QnAMakerMetadata[]'
    name: 'QnAMakerMetadata[]'
    spec.typeScript:
      - name: QnAMakerMetadata
        fullName: QnAMakerMetadata
        uid: botbuilder-ai.QnAMakerMetadata
      - name: '[]'
        fullName: '[]'

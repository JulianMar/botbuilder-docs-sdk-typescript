### YamlMime:TSType
name: TeamsInfo
uid: botbuilder.TeamsInfo
package: botbuilder
summary: >-
  Provides utility methods for the events and interactions that occur within
  Microsoft Teams.
fullName: TeamsInfo
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: 'getMeetingInfo(TurnContext, string)'
    uid: botbuilder.TeamsInfo.getMeetingInfo
    package: botbuilder
    summary: Gets the information for the given meeting id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getMeetingInfo(context: TurnContext, meetingId?: string)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: meetingId
          type: string
          description: The BASE64-encoded id of the Teams meeting.
      return:
        type: Promise&lt;TeamsMeetingInfo&gt;
        description: 'The [TeamsMeetingInfo](xref:botbuilder-core.TeamsMeetingInfo) fetched'
  - name: 'getMeetingParticipant(TurnContext, string, string, string)'
    uid: botbuilder.TeamsInfo.getMeetingParticipant
    package: botbuilder
    summary: >-
      Gets the meeting participant for the given meeting id and participant id.
      This only works in

      teams scoped meeting conversations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getMeetingParticipant(context: TurnContext, meetingId?:
        string, participantId?: string, tenantId?: string)
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: meetingId
          type: string
          description: The meeting ID to fetch
        - id: participantId
          type: string
          description: The participant ID to fetch
        - id: tenantId
          type: string
          description: The tenant ID to use when scoping the request
      return:
        type: Promise&lt;TeamsMeetingParticipant&gt;
        description: >-
          The
          [TeamsMeetingParticipant](xref:botbuilder-core.TeamsMeetingParticipant)
          fetched
  - name: 'getMember(TurnContext, string)'
    uid: botbuilder.TeamsInfo.getMember
    package: botbuilder
    summary: Gets the account of a single conversation member.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getMember(context: TurnContext, userId: string)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: userId
          type: string
          description: ID of the user in question.
      return:
        type: Promise&lt;TeamsChannelAccount&gt;
        description: >-
          The
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the member.
  - name: getMembers(TurnContext)
    uid: botbuilder.TeamsInfo.getMembers
    package: botbuilder
    summary: Gets the conversation members of a one-on-one or group chat.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getMembers(context: TurnContext)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
      return:
        type: 'Promise&lt;TeamsChannelAccount[]&gt;'
        description: >-
          The list of
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount).
  - name: 'getPagedMembers(TurnContext, number, string)'
    uid: botbuilder.TeamsInfo.getPagedMembers
    package: botbuilder
    summary: 'Gets a pagined list of members of one-on-one, group, or team conversation.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getPagedMembers(context: TurnContext, pageSize?: number,
        continuationToken?: string)
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: pageSize
          type: number
          description: Suggested number of entries on a page.
        - id: continuationToken
          type: string
          description: A continuation token.
      return:
        type: Promise&lt;TeamsPagedMembersResult&gt;
        description: >-
          The
          [TeamsPagedMembersResult](xref:botframework-schema.TeamsPagedMembersResult)
          with the list of members.
  - name: 'getPagedTeamMembers(TurnContext, string, number, string)'
    uid: botbuilder.TeamsInfo.getPagedTeamMembers
    package: botbuilder
    summary: Gets a paginated list of members of a team.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getPagedTeamMembers(context: TurnContext, teamId?:
        string, pageSize?: number, continuationToken?: string)
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: teamId
          type: string
          description: ID of the Teams team.
        - id: pageSize
          type: number
          description: The number of entries on the page.
        - id: continuationToken
          type: string
          description: The continuationToken token.
      return:
        type: Promise&lt;TeamsPagedMembersResult&gt;
        description: >-
          A
          [TeamsPagedMembersResult](xref:botframework-schema.TeamsPagedMembersResult)
          with the list of members.
  - name: 'getTeamChannels(TurnContext, string)'
    uid: botbuilder.TeamsInfo.getTeamChannels
    package: botbuilder
    summary: >-
      Returns a list of channels in a Team. This only works in teams scoped
      conversations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getTeamChannels(context: TurnContext, teamId?: string)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: teamId
          type: string
          description: ID of the Teams team.
      return:
        type: 'Promise&lt;ChannelInfo[]&gt;'
        description: >-
          The list of [ChannelInfo](xref:botframework-schema.ChannelInfo)
          objects with the conversations.
  - name: 'getTeamDetails(TurnContext, string)'
    uid: botbuilder.TeamsInfo.getTeamDetails
    package: botbuilder
    summary: >-
      Gets the details for the given team id. This only works in teams scoped
      conversations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getTeamDetails(context: TurnContext, teamId?: string)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: teamId
          type: string
          description: The id of the Teams team.
      return:
        type: Promise&lt;TeamDetails&gt;
        description: 'The [TeamDetails](xref:botbuilder-core.TeamDetails) fetched'
  - name: 'getTeamMember(TurnContext, string, string)'
    uid: botbuilder.TeamsInfo.getTeamMember
    package: botbuilder
    summary: Gets the account of a member in a teams scoped conversation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getTeamMember(context: TurnContext, teamId?: string,
        userId?: string)
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: teamId
          type: string
          description: ID of the Teams team.
        - id: userId
          type: string
          description: ID of the Teams user.
      return:
        type: Promise&lt;TeamsChannelAccount&gt;
        description: >-
          The
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the member.
  - name: 'getTeamMembers(TurnContext, string)'
    uid: botbuilder.TeamsInfo.getTeamMembers
    package: botbuilder
    summary: >-
      Gets the list of
      [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) within
      a team.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function getTeamMembers(context: TurnContext, teamId?: string)'
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: teamId
          type: string
          description: ID of the Teams team.
      return:
        type: 'Promise&lt;TeamsChannelAccount[]&gt;'
        description: >-
          The list of
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the members.
  - name: 'sendMessageToTeamsChannel(TurnContext, Activity, string, string)'
    uid: botbuilder.TeamsInfo.sendMessageToTeamsChannel
    package: botbuilder
    summary: >-
      Creates a new thread in a Teams chat and sends an
      [Activity](xref:botframework-schema.Activity) to that new thread.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToTeamsChannel(context: TurnContext,
        activity: Activity, teamsChannelId: string, botAppId?: string)
      parameters:
        - id: context
          type: TurnContext
          description: 'The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.'
        - id: activity
          type: Activity
          description: 'The [Activity](xref:botframework-schema.Activity) to send.'
        - id: teamsChannelId
          type: string
          description: >-
            The Team's Channel ID, note this is distinct from the Bot Framework
            activity property with same name.
        - id: botAppId
          type: string
          description: >-
            The bot's appId. This is only used when context.adapter is an
            instance of CloudAdapter.
      return:
        type: Promise&lt;Object&gt;
        description: >-
          The
          [ConversationReference](xref:botframework-schema.ConversationReference)
          and the id of the [Activity](xref:botframework-schema.Activity) (if
          sent).

### YamlMime:TSType
name: LetterContext
uid: adaptive-expressions-ie11.LetterContext
package: adaptive-expressions-ie11
summary: ''
fullName: LetterContext
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'LetterContext(ParserRuleContext | undefined, number)'
    uid: adaptive-expressions-ie11.LetterContext.constructor
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new LetterContext(parent: ParserRuleContext | undefined, invokingState:
        number)
      parameters:
        - id: parent
          type: ParserRuleContext | undefined
          description: ''
        - id: invokingState
          type: number
          description: ''
properties:
  - name: altNumber
    uid: adaptive-expressions-ie11.LetterContext.altNumber
    package: adaptive-expressions-ie11
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    fullName: altNumber
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altNumber: number'
      return:
        type: number
        description: ''
  - name: childCount
    uid: adaptive-expressions-ie11.LetterContext.childCount
    package: adaptive-expressions-ie11
    summary: ''
    fullName: childCount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'childCount: number'
      return:
        type: number
        description: ''
  - name: children
    uid: adaptive-expressions-ie11.LetterContext.children
    package: adaptive-expressions-ie11
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    fullName: children
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ParseTree[]'
      return:
        type: 'ParseTree[]'
        description: ''
  - name: exception
    uid: adaptive-expressions-ie11.LetterContext.exception
    package: adaptive-expressions-ie11
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is `undefined`.
    fullName: exception
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exception?: RecognitionException'
      return:
        type: RecognitionException
        description: ''
  - name: invokingState
    uid: adaptive-expressions-ie11.LetterContext.invokingState
    package: adaptive-expressions-ie11
    summary: ''
    fullName: invokingState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'invokingState: number'
      return:
        type: number
        description: ''
  - name: isEmpty
    uid: adaptive-expressions-ie11.LetterContext.isEmpty
    package: adaptive-expressions-ie11
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    fullName: isEmpty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isEmpty: boolean'
      return:
        type: boolean
        description: ''
  - name: parent
    uid: adaptive-expressions-ie11.LetterContext.parent
    package: adaptive-expressions-ie11
    summary: ''
    fullName: parent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        type: ParserRuleContext | undefined
        description: ''
  - name: payload
    uid: adaptive-expressions-ie11.LetterContext.payload
    package: adaptive-expressions-ie11
    summary: ''
    fullName: payload
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'payload: RuleContext'
      return:
        type: RuleContext
        description: ''
  - name: ruleContext
    uid: adaptive-expressions-ie11.LetterContext.ruleContext
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: this'
      return:
        type: this
        description: ''
  - name: ruleIndex
    uid: adaptive-expressions-ie11.LetterContext.ruleIndex
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleIndex: number'
      return:
        type: number
        description: ''
  - name: sourceInterval
    uid: adaptive-expressions-ie11.LetterContext.sourceInterval
    package: adaptive-expressions-ie11
    summary: ''
    fullName: sourceInterval
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceInterval: Interval'
      return:
        type: Interval
        description: ''
  - name: start
    uid: adaptive-expressions-ie11.LetterContext.start
    package: adaptive-expressions-ie11
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    fullName: start
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Token'
      return:
        type: Token
        description: ''
  - name: stop
    uid: adaptive-expressions-ie11.LetterContext.stop
    package: adaptive-expressions-ie11
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    fullName: stop
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stop: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: text
    uid: adaptive-expressions-ie11.LetterContext.text
    package: adaptive-expressions-ie11
    summary: |
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
methods:
  - name: accept<Result>(CommonRegexVisitor<Result>)
    uid: adaptive-expressions-ie11.LetterContext.accept
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function accept<Result>(visitor: CommonRegexVisitor<Result>)'
      parameters:
        - id: visitor
          type: >-
            <xref uid="adaptive-expressions-ie11.CommonRegexVisitor"
            />&lt;Result&gt;
          description: ''
      return:
        type: Result
        description: ''
  - name: addAnyChild<T>(T)
    uid: adaptive-expressions-ie11.LetterContext.addAnyChild
    package: adaptive-expressions-ie11
    summary: |
      Add a parse tree node to this as a child.  Works for
       internal and leaf nodes. Does not set parent link;
       other add methods must do that. Other addChild methods
       call this.
       We cannot set the parent pointer of the incoming node
       because the existing interfaces do not have a setParent()
       method and I don't want to break backward compatibility for this.

       @since 4.7
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addAnyChild<T>(t: T)'
      parameters:
        - id: t
          type: T
          description: ''
      return:
        type: T
        description: ''
  - name: addChild(RuleContext)
    uid: adaptive-expressions-ie11.LetterContext.addChild_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type: RuleContext
          description: ''
  - name: addChild(TerminalNode)
    uid: adaptive-expressions-ie11.LetterContext.addChild
    package: adaptive-expressions-ie11
    summary: Add a token leaf node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type: TerminalNode
          description: ''
  - name: addChild(Token)
    uid: adaptive-expressions-ie11.LetterContext.addChild_2
    package: adaptive-expressions-ie11
    summary: >-
      Add a child to this node based upon matchedToken. It

      creates a TerminalNodeImpl rather than using

      [Token)](xref:Parser%23createTerminalNode(ParserRuleContext%2C). I'm
      leaving this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(matchedToken: Token)'
      parameters:
        - id: matchedToken
          type: Token
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: addErrorNode(ErrorNode)
    uid: adaptive-expressions-ie11.LetterContext.addErrorNode
    package: adaptive-expressions-ie11
    summary: Add an error node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(errorNode: ErrorNode)'
      parameters:
        - id: errorNode
          type: ErrorNode
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: addErrorNode(Token)
    uid: adaptive-expressions-ie11.LetterContext.addErrorNode_1
    package: adaptive-expressions-ie11
    summary: >-
      Add a child to this node based upon badToken. It

      creates a ErrorNode rather than using

      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C). I'm leaving
      this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(badToken: Token)'
      parameters:
        - id: badToken
          type: Token
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: ALC()
    uid: adaptive-expressions-ie11.LetterContext.ALC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ALC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: AUC()
    uid: adaptive-expressions-ie11.LetterContext.AUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function AUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: BLC()
    uid: adaptive-expressions-ie11.LetterContext.BLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function BLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: BUC()
    uid: adaptive-expressions-ie11.LetterContext.BUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function BUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: CLC()
    uid: adaptive-expressions-ie11.LetterContext.CLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function CLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: copyFrom(ParserRuleContext)
    uid: adaptive-expressions-ie11.LetterContext.copyFrom
    package: adaptive-expressions-ie11
    summary: |
      COPY a ctx (I'm deliberately not using copy constructor) to avoid
      confusion with creating node with parent. Does not copy children
      (except error leaves).
      This is used in the generated parser code to flip a generic XContext
      node for rule X to a YContext for alt label Y. In that sense, it is not
      really a generic copy function.

      If we do an error sync() at start of a rule, we might add error nodes
      to the generic XContext so this function must copy those nodes to the
      YContext as well else they are lost!
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function copyFrom(ctx: ParserRuleContext)'
      parameters:
        - id: ctx
          type: ParserRuleContext
          description: ''
  - name: CUC()
    uid: adaptive-expressions-ie11.LetterContext.CUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function CUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: depth()
    uid: adaptive-expressions-ie11.LetterContext.depth
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function depth()
      return:
        type: number
        description: ''
  - name: DLC()
    uid: adaptive-expressions-ie11.LetterContext.DLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function DLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: DUC()
    uid: adaptive-expressions-ie11.LetterContext.DUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function DUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: ELC()
    uid: adaptive-expressions-ie11.LetterContext.ELC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ELC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: emptyContext()
    uid: adaptive-expressions-ie11.LetterContext.emptyContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: static function emptyContext()
      return:
        type: ParserRuleContext
        description: ''
  - name: enterRule(CommonRegexListener)
    uid: adaptive-expressions-ie11.LetterContext.enterRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterRule(listener: CommonRegexListener)'
      parameters:
        - id: listener
          type: <xref uid="adaptive-expressions-ie11.CommonRegexListener" />
          description: ''
  - name: EUC()
    uid: adaptive-expressions-ie11.LetterContext.EUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function EUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: exitRule(CommonRegexListener)
    uid: adaptive-expressions-ie11.LetterContext.exitRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exitRule(listener: CommonRegexListener)'
      parameters:
        - id: listener
          type: <xref uid="adaptive-expressions-ie11.CommonRegexListener" />
          description: ''
  - name: FLC()
    uid: adaptive-expressions-ie11.LetterContext.FLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function FLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: FUC()
    uid: adaptive-expressions-ie11.LetterContext.FUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function FUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: getChild(number)
    uid: adaptive-expressions-ie11.LetterContext.getChild
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild(i: number)'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        type: ParseTree
        description: ''
  - name: 'getChild<T>(number, Object)'
    uid: adaptive-expressions-ie11.LetterContext.getChild_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T
        description: ''
  - name: 'getChildContext(RuleContext, number)'
    uid: adaptive-expressions-ie11.LetterContext.getChildContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number)
      parameters:
        - id: parent
          type: RuleContext
          description: ''
        - id: invokingState
          type: number
          description: ''
      return:
        type: RuleContext
        description: ''
  - name: 'getRuleContext<T>(number, Object)'
    uid: adaptive-expressions-ie11.LetterContext.getRuleContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T
        description: ''
  - name: getRuleContexts<T>(Object)
    uid: adaptive-expressions-ie11.LetterContext.getRuleContexts
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContexts<T>(ctxType: Object)'
      parameters:
        - id: ctxType
          type: Object
          description: ''
      return:
        type: 'T[]'
        description: ''
  - name: 'getToken(number, number)'
    uid: adaptive-expressions-ie11.LetterContext.getToken
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: getTokens(number)
    uid: adaptive-expressions-ie11.LetterContext.getTokens
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokens(ttype: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
      return:
        type: 'TerminalNode[]'
        description: ''
  - name: GLC()
    uid: adaptive-expressions-ie11.LetterContext.GLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function GLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: GUC()
    uid: adaptive-expressions-ie11.LetterContext.GUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function GUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: HLC()
    uid: adaptive-expressions-ie11.LetterContext.HLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function HLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: HUC()
    uid: adaptive-expressions-ie11.LetterContext.HUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function HUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: ILC()
    uid: adaptive-expressions-ie11.LetterContext.ILC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ILC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: IUC()
    uid: adaptive-expressions-ie11.LetterContext.IUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function IUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: JLC()
    uid: adaptive-expressions-ie11.LetterContext.JLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function JLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: JUC()
    uid: adaptive-expressions-ie11.LetterContext.JUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function JUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: KLC()
    uid: adaptive-expressions-ie11.LetterContext.KLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function KLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: KUC()
    uid: adaptive-expressions-ie11.LetterContext.KUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function KUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: LLC()
    uid: adaptive-expressions-ie11.LetterContext.LLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function LLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: LUC()
    uid: adaptive-expressions-ie11.LetterContext.LUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function LUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: MLC()
    uid: adaptive-expressions-ie11.LetterContext.MLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function MLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: MUC()
    uid: adaptive-expressions-ie11.LetterContext.MUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function MUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: NLC()
    uid: adaptive-expressions-ie11.LetterContext.NLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function NLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: NUC()
    uid: adaptive-expressions-ie11.LetterContext.NUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function NUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: OLC()
    uid: adaptive-expressions-ie11.LetterContext.OLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function OLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: OUC()
    uid: adaptive-expressions-ie11.LetterContext.OUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function OUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: PLC()
    uid: adaptive-expressions-ie11.LetterContext.PLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function PLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: PUC()
    uid: adaptive-expressions-ie11.LetterContext.PUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function PUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: QLC()
    uid: adaptive-expressions-ie11.LetterContext.QLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function QLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: QUC()
    uid: adaptive-expressions-ie11.LetterContext.QUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function QUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: removeLastChild()
    uid: adaptive-expressions-ie11.LetterContext.removeLastChild
    package: adaptive-expressions-ie11
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeLastChild()
  - name: RLC()
    uid: adaptive-expressions-ie11.LetterContext.RLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function RLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: RUC()
    uid: adaptive-expressions-ie11.LetterContext.RUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function RUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: setParent(RuleContext)
    uid: adaptive-expressions-ie11.LetterContext.setParent
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setParent(parent: RuleContext)'
      parameters:
        - id: parent
          type: RuleContext
          description: ''
  - name: SLC()
    uid: adaptive-expressions-ie11.LetterContext.SLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function SLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: SUC()
    uid: adaptive-expressions-ie11.LetterContext.SUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function SUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: TLC()
    uid: adaptive-expressions-ie11.LetterContext.TLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function TLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: toInfoString(Parser)
    uid: adaptive-expressions-ie11.LetterContext.toInfoString
    package: adaptive-expressions-ie11
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toInfoString(recognizer: Parser)'
      parameters:
        - id: recognizer
          type: Parser
          description: ''
      return:
        type: string
        description: ''
  - name: toString()
    uid: adaptive-expressions-ie11.LetterContext.toString
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toString()
      return:
        type: string
        description: ''
  - name: 'toString(Recognizer<any, any> | undefined)'
    uid: adaptive-expressions-ie11.LetterContext.toString_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined)'
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    uid: adaptive-expressions-ie11.LetterContext.toString_3
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined)
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(string[] | undefined)'
    uid: adaptive-expressions-ie11.LetterContext.toString_2
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(string[] | undefined, RuleContext | undefined)'
    uid: adaptive-expressions-ie11.LetterContext.toString_4
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined)
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        type: string
        description: ''
  - name: toStringTree()
    uid: adaptive-expressions-ie11.LetterContext.toStringTree_2
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toStringTree()
      return:
        type: string
        description: ''
  - name: toStringTree(Parser)
    uid: adaptive-expressions-ie11.LetterContext.toStringTree
    package: adaptive-expressions-ie11
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(recog: Parser)'
      parameters:
        - id: recog
          type: Parser
          description: ''
      return:
        type: string
        description: ''
  - name: 'toStringTree(string[] | undefined)'
    uid: adaptive-expressions-ie11.LetterContext.toStringTree_1
    package: adaptive-expressions-ie11
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'tryGetChild<T>(number, Object)'
    uid: adaptive-expressions-ie11.LetterContext.tryGetChild
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T | undefined
        description: ''
  - name: 'tryGetRuleContext<T>(number, Object)'
    uid: adaptive-expressions-ie11.LetterContext.tryGetRuleContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T | undefined
        description: ''
  - name: 'tryGetToken(number, number)'
    uid: adaptive-expressions-ie11.LetterContext.tryGetToken
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode | undefined
        description: ''
  - name: TUC()
    uid: adaptive-expressions-ie11.LetterContext.TUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function TUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: ULC()
    uid: adaptive-expressions-ie11.LetterContext.ULC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ULC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: UUC()
    uid: adaptive-expressions-ie11.LetterContext.UUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function UUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: VLC()
    uid: adaptive-expressions-ie11.LetterContext.VLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function VLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: VUC()
    uid: adaptive-expressions-ie11.LetterContext.VUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function VUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: WLC()
    uid: adaptive-expressions-ie11.LetterContext.WLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function WLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: WUC()
    uid: adaptive-expressions-ie11.LetterContext.WUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function WUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: XLC()
    uid: adaptive-expressions-ie11.LetterContext.XLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function XLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: XUC()
    uid: adaptive-expressions-ie11.LetterContext.XUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function XUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: YLC()
    uid: adaptive-expressions-ie11.LetterContext.YLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function YLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: YUC()
    uid: adaptive-expressions-ie11.LetterContext.YUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function YUC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: ZLC()
    uid: adaptive-expressions-ie11.LetterContext.ZLC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ZLC()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: ZUC()
    uid: adaptive-expressions-ie11.LetterContext.ZUC
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ZUC()
      return:
        type: TerminalNode | undefined
        description: ''
extends: ParserRuleContext

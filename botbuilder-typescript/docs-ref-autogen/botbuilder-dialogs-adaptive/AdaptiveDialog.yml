### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog
    name: AdaptiveDialog
    fullName: AdaptiveDialog<O>
    children:
      - botbuilder-dialogs-adaptive.AdaptiveDialog.constructor
      - botbuilder-dialogs-adaptive.AdaptiveDialog.autoEndDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.beginDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.conditionTracker
      - botbuilder-dialogs-adaptive.AdaptiveDialog.configure
      - botbuilder-dialogs-adaptive.AdaptiveDialog.continueDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.createChildContext
      - botbuilder-dialogs-adaptive.AdaptiveDialog.defaultResultProperty
      - botbuilder-dialogs-adaptive.AdaptiveDialog.dialogs
      - botbuilder-dialogs-adaptive.AdaptiveDialog.endDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.EndOfTurn
      - botbuilder-dialogs-adaptive.AdaptiveDialog.findDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.generator
      - botbuilder-dialogs-adaptive.AdaptiveDialog.getDependencies
      - botbuilder-dialogs-adaptive.AdaptiveDialog.getVersion
      - botbuilder-dialogs-adaptive.AdaptiveDialog.id
      - botbuilder-dialogs-adaptive.AdaptiveDialog.onDialogEvent
      - botbuilder-dialogs-adaptive.AdaptiveDialog.recognizer
      - botbuilder-dialogs-adaptive.AdaptiveDialog.repromptDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.resumeDialog
      - botbuilder-dialogs-adaptive.AdaptiveDialog.schema
      - botbuilder-dialogs-adaptive.AdaptiveDialog.selector
      - botbuilder-dialogs-adaptive.AdaptiveDialog.telemetryClient
      - botbuilder-dialogs-adaptive.AdaptiveDialog.triggers
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: DialogContainer<O>
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.constructor
    name: AdaptiveDialog(string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new `AdaptiveDialog` instance.
    syntax:
      content: 'new AdaptiveDialog(dialogId?: string)'
      parameters:
        - id: dialogId
          type:
            - string
          description: |
            (Optional) unique ID of the component within its parents dialog set.
          optional: true
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.autoEndDialog
    name: autoEndDialog
    fullName: autoEndDialog
    children: []
    langs:
      - typeScript
    type: property
    summary: Whether to end the dialog when there are no actions to execute.
    syntax:
      content: 'autoEndDialog: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      If true, when there are no actions to execute, the current dialog will
      end.

      If false, when there are no actions to execute, the current dialog will
      simply end the turn and still be active.

      Defaults to a value of true.
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.beginDialog
    name: 'beginDialog(DialogContext, O)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: options
          type:
            - O
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.conditionTracker
    name: conditionTracker
    fullName: conditionTracker
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static conditionTracker: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.createChildContext
    name: createChildContext(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createChildContext(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
      return:
        type:
          - DialogContext
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.defaultResultProperty
    name: defaultResultProperty
    fullName: defaultResultProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The property to return as the result when the dialog ends when there are
      no more Actions and `AutoEndDialog = true`.
    syntax:
      content: 'defaultResultProperty: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: Defaults to a value of `dialog.result`.
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.dialogs
    name: dialogs
    fullName: dialogs
    children: []
    langs:
      - typeScript
    type: property
    summary: The containers dialog set.
    syntax:
      content: 'dialogs: DialogSet'
      return:
        type:
          - DialogSet
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function endDialog(turnContext: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: turnContext
          type:
            - TurnContext
          description: ''
        - id: instance
          type:
            - DialogInstance
          description: ''
        - id: reason
          type:
            - DialogReason
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets a default end-of-turn result.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - DialogTurnResult
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.findDialog
    name: findDialog(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Finds a child dialog that was previously added to the container.
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type:
            - string
          description: |
            ID of the dialog to lookup.
      return:
        type:
          - Dialog | undefined
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.generator
    name: generator
    fullName: generator
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional. Language Generator override.
    optional: true
    syntax:
      content: 'generator?: LanguageGenerator'
      return:
        type:
          - botbuilder-dialogs-adaptive.LanguageGenerator
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.getDependencies
    name: getDependencies()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDependencies()
      parameters: []
      return:
        type:
          - 'Dialog[]'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - DialogEvent
          description: |
            The event being raised.
      return:
        type:
          - Promise<boolean>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.recognizer
    name: recognizer
    fullName: recognizer
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional. Recognizer used to analyze any message utterances.
    optional: true
    syntax:
      content: 'recognizer?: Recognizer'
      return:
        type:
          - botbuilder-dialogs-adaptive.Recognizer
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.repromptDialog
    name: 'repromptDialog(DialogContext | TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function repromptDialog(context: DialogContext | TurnContext, instance:
        DialogInstance)
      parameters:
        - id: context
          type:
            - DialogContext | TurnContext
          description: ''
        - id: instance
          type:
            - DialogInstance
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: reason
          type:
            - DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.schema
    name: schema
    fullName: schema
    children: []
    langs:
      - typeScript
    type: property
    summary: JSON Schema for the dialog.
    syntax:
      content: 'schema: object'
      return:
        type:
          - object
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.selector
    name: selector
    fullName: selector
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional. The selector for picking the possible events to execute.
    syntax:
      content: 'selector: TriggerSelector'
      return:
        type:
          - botbuilder-dialogs-adaptive.TriggerSelector
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Get the current telemetry client.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.AdaptiveDialog.triggers
    name: triggers
    fullName: triggers
    children: []
    langs:
      - typeScript
    type: property
    summary: Trigger handlers to respond to conditions which modify the executing plan.
    syntax:
      content: 'triggers: OnCondition[]'
      return:
        type:
          - 'botbuilder-dialogs-adaptive.OnCondition[]'
        description: ''
    package: botbuilder-dialogs-adaptive
references:
  - uid: botbuilder-dialogs-adaptive.LanguageGenerator
    name: LanguageGenerator
    spec.typeScript:
      - name: LanguageGenerator
        fullName: LanguageGenerator
        uid: botbuilder-dialogs-adaptive.LanguageGenerator
  - uid: botbuilder-dialogs-adaptive.Recognizer
    name: Recognizer
    spec.typeScript:
      - name: Recognizer
        fullName: Recognizer
        uid: botbuilder-dialogs-adaptive.Recognizer
  - uid: botbuilder-dialogs-adaptive.TriggerSelector
    name: TriggerSelector
    spec.typeScript:
      - name: TriggerSelector
        fullName: TriggerSelector
        uid: botbuilder-dialogs-adaptive.TriggerSelector
  - uid: 'botbuilder-dialogs-adaptive.OnCondition[]'
    name: 'OnCondition[]'
    spec.typeScript:
      - name: OnCondition
        fullName: OnCondition
        uid: botbuilder-dialogs-adaptive.OnCondition
      - name: '[]'
        fullName: '[]'

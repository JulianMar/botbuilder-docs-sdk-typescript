### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs-adaptive.Case
    name: Case
    fullName: Case<O>
    children:
      - botbuilder-dialogs-adaptive.Case.actions
      - botbuilder-dialogs-adaptive.Case.beginDialog
      - botbuilder-dialogs-adaptive.Case.constructor
      - botbuilder-dialogs-adaptive.Case.configure
      - botbuilder-dialogs-adaptive.Case.continueDialog
      - botbuilder-dialogs-adaptive.Case.createValueExpression
      - botbuilder-dialogs-adaptive.Case.endDialog
      - botbuilder-dialogs-adaptive.Case.EndOfTurn
      - botbuilder-dialogs-adaptive.Case.getDependencies
      - botbuilder-dialogs-adaptive.Case.getVersion
      - botbuilder-dialogs-adaptive.Case.id
      - botbuilder-dialogs-adaptive.Case.onDialogEvent
      - botbuilder-dialogs-adaptive.Case.repromptDialog
      - botbuilder-dialogs-adaptive.Case.resumeDialog
      - botbuilder-dialogs-adaptive.Case.telemetryClient
      - botbuilder-dialogs-adaptive.Case.value
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: botbuilder-dialogs-adaptive.ActionScope
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.actions
    name: actions
    fullName: actions
    children: []
    langs:
      - typeScript
    type: property
    summary: The actions to execute.
    syntax:
      content: 'actions: Dialog[]'
      return:
        type:
          - 'Dialog[]'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.beginDialog
    name: 'beginDialog(DialogContext, O)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: options
          type:
            - O
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.constructor
    name: 'Case(string, Dialog[])'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Case(value?: string, actions?: Dialog[])'
      parameters:
        - id: value
          type:
            - string
          description: ''
          optional: true
        - id: actions
          type:
            - 'Dialog[]'
          description: ''
          optional: true
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.createValueExpression
    name: createValueExpression()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an expression that returns the value in its primitive type. Still

      assumes that switch case values are compile time constants and not
      expressions

      that can be evaluated against state.
    syntax:
      content: function createValueExpression()
      parameters: []
      return:
        type:
          - Expression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: instance
          type:
            - DialogInstance
          description: Current state information for this dialog.
        - id: reason
          type:
            - DialogReason
          description: |
            The reason the dialog is ending.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
  - uid: botbuilder-dialogs-adaptive.Case.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets a default end-of-turn result.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - DialogTurnResult
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
  - uid: botbuilder-dialogs-adaptive.Case.getDependencies
    name: getDependencies()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDependencies()
      parameters: []
      return:
        type:
          - 'Dialog[]'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs-adaptive.Case.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - DialogEvent
          description: The event being raised.
      return:
        type:
          - Promise<boolean>
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'When overridden in a derived class, reprompts the user for input.'
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: instance
          type:
            - DialogInstance
          description: |
            Current state information for this dialog.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
  - uid: botbuilder-dialogs-adaptive.Case.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, _reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: _reason
          type:
            - DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the telemetry client for this dialog.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.Case.value
    name: value
    fullName: value
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets or sets value expression to be compared against condition.
    syntax:
      content: 'value: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
references:
  - uid: botbuilder-dialogs-adaptive.ActionScope
    name: ActionScope
    spec.typeScript:
      - name: ActionScope
        fullName: ActionScope
        uid: botbuilder-dialogs-adaptive.ActionScope

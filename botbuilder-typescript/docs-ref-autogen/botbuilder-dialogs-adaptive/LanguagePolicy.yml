### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy
    name: LanguagePolicy
    fullName: LanguagePolicy
    children:
      - botbuilder-dialogs-adaptive.LanguagePolicy.clear
      - botbuilder-dialogs-adaptive.LanguagePolicy.defaultPolicy
      - botbuilder-dialogs-adaptive.LanguagePolicy.delete
      - botbuilder-dialogs-adaptive.LanguagePolicy.entries
      - botbuilder-dialogs-adaptive.LanguagePolicy.forEach
      - botbuilder-dialogs-adaptive.LanguagePolicy.get
      - botbuilder-dialogs-adaptive.LanguagePolicy.has
      - botbuilder-dialogs-adaptive.LanguagePolicy.keys
      - botbuilder-dialogs-adaptive.LanguagePolicy.constructor
      - botbuilder-dialogs-adaptive.LanguagePolicy.locales
      - botbuilder-dialogs-adaptive.LanguagePolicy.Map
      - botbuilder-dialogs-adaptive.LanguagePolicy.set
      - botbuilder-dialogs-adaptive.LanguagePolicy.size
      - botbuilder-dialogs-adaptive.LanguagePolicy.values
    langs:
      - typeScript
    type: class
    summary: >-
      Language policy with fallback for each language as most specific to
      default en-us -> en -> default.
    extends:
      name: 'Map<string, string[]>'
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.clear
    name: clear()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clear()
      parameters: []
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.defaultPolicy
    name: 'defaultPolicy(string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function defaultPolicy(defaultLanguages?: string[])'
      parameters:
        - id: defaultLanguages
          type:
            - 'string[]'
          description: ''
          optional: true
      return:
        type:
          - 'Map<string, string[]>'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.delete
    name: delete(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function delete(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.entries
    name: entries()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Returns an iterable of key, value pairs for every entry in the map.'
    syntax:
      content: function entries()
      parameters: []
      return:
        type:
          - IterableIterator<Object>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.forEach
    name: >-
      forEach((value: string[], key: string, map: Map<string, string[]>) =>
      void, any)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forEach(callbackfn: (value: string[], key: string, map:
        Map<string, string[]>) => void, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: string[], key: string, map: Map<string, string[]>) => void'
          description: ''
        - id: thisArg
          type:
            - any
          description: ''
          optional: true
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.get
    name: get(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - 'string[] | undefined'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.has
    name: has(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function has(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.keys
    name: keys()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns an iterable of keys in the map
    syntax:
      content: function keys()
      parameters: []
      return:
        type:
          - IterableIterator<string>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.constructor
    name: 'LanguagePolicy(string[])'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new LanguagePolicy(defaultLanguages: string[])'
      parameters:
        - id: defaultLanguages
          type:
            - 'string[]'
          description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.locales
    name: locales
    fullName: locales
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static locales: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.Map
    name: Map
    fullName: Map
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Map: MapConstructor'
      return:
        type:
          - MapConstructor
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.set
    name: 'set(string, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function set(key: string, value: string[])'
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: value
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.size
    name: size
    fullName: size
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'size: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.LanguagePolicy.values
    name: values()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns an iterable of values in the map
    syntax:
      content: function values()
      parameters: []
      return:
        type:
          - 'IterableIterator<string[]>'
        description: ''
    package: botbuilder-dialogs-adaptive

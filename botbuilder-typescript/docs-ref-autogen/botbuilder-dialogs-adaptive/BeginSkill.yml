### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs-adaptive.BeginSkill
    name: BeginSkill
    fullName: BeginSkill
    children:
      - botbuilder-dialogs-adaptive.BeginSkill.activity
      - botbuilder-dialogs-adaptive.BeginSkill.activityProcessed
      - botbuilder-dialogs-adaptive.BeginSkill.beginDialog
      - botbuilder-dialogs-adaptive.BeginSkill.constructor
      - botbuilder-dialogs-adaptive.BeginSkill.botId
      - botbuilder-dialogs-adaptive.BeginSkill.configure
      - botbuilder-dialogs-adaptive.BeginSkill.connectionName
      - botbuilder-dialogs-adaptive.BeginSkill.continueDialog
      - botbuilder-dialogs-adaptive.BeginSkill.disabled
      - botbuilder-dialogs-adaptive.BeginSkill.endDialog
      - botbuilder-dialogs-adaptive.BeginSkill.EndOfTurn
      - botbuilder-dialogs-adaptive.BeginSkill.getVersion
      - botbuilder-dialogs-adaptive.BeginSkill.id
      - botbuilder-dialogs-adaptive.BeginSkill.onDialogEvent
      - botbuilder-dialogs-adaptive.BeginSkill.repromptDialog
      - botbuilder-dialogs-adaptive.BeginSkill.resultProperty
      - botbuilder-dialogs-adaptive.BeginSkill.resumeDialog
      - botbuilder-dialogs-adaptive.BeginSkill.skillAppId
      - botbuilder-dialogs-adaptive.BeginSkill.skillEndpoint
      - botbuilder-dialogs-adaptive.BeginSkill.skillHostEndpoint
      - botbuilder-dialogs-adaptive.BeginSkill.telemetryClient
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: SkillDialog
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.activity
    name: activity
    fullName: activity
    children: []
    langs:
      - typeScript
    type: property
    summary: Template for the activity.
    syntax:
      content: 'activity: TemplateInterface<Partial<Activity>>'
      return:
        type:
          - botbuilder-dialogs-adaptive.TemplateInterface<Partial<Activity>>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.activityProcessed
    name: activityProcessed
    fullName: activityProcessed
    children: []
    langs:
      - typeScript
    type: property
    summary: Value indicating whether the new dialog should process the activity.
    syntax:
      content: 'activityProcessed: BoolExpression'
      return:
        type:
          - BoolExpression
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      The default for this will be true, which means the new dialog should not
      look at the activity.

      You can set this to false to dispatch the activity to the new dialog.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.beginDialog
    name: 'beginDialog(DialogContext, BeginSkillDialogOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options?:
        BeginSkillDialogOptions)
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: options
          type:
            - BeginSkillDialogOptions
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.constructor
    name: BeginSkill(SkillDialogOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new `BeginSkillDialog instance.
    syntax:
      content: 'new BeginSkill(options?: SkillDialogOptions)'
      parameters:
        - id: options
          type:
            - SkillDialogOptions
          description: |
            Optional options used to configure the skill dialog.
          optional: true
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.botId
    name: botId
    fullName: botId
    children: []
    langs:
      - typeScript
    type: property
    summary: The Microsoft App ID that will be calling the skill.
    syntax:
      content: 'botId: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      Defauls to a value of `=settings.MicrosoftAppId` which retrievs the bots
      ID from settings.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.connectionName
    name: connectionName
    fullName: connectionName
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional. The OAuth Connection Name for the Parent Bot.
    syntax:
      content: 'connectionName: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
      return:
        type:
          - Promise<DialogTurnResult>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.disabled
    name: disabled
    fullName: disabled
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional expression which if is true will disable this action.
    optional: true
    syntax:
      content: 'disabled?: BoolExpression'
      return:
        type:
          - BoolExpression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function endDialog(turnContext: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: turnContext
          type:
            - TurnContext
          description: ''
        - id: instance
          type:
            - DialogInstance
          description: ''
        - id: reason
          type:
            - DialogReason
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets a default end-of-turn result.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - DialogTurnResult
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.getVersion
    name: getVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    syntax:
      content: function getVersion()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type:
            - DialogEvent
          description: The event being raised.
      return:
        type:
          - Promise<boolean>
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function repromptDialog(turnContext: TurnContext, instance:
        DialogInstance)
      parameters:
        - id: turnContext
          type:
            - TurnContext
          description: ''
        - id: instance
          type:
            - DialogInstance
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.resultProperty
    name: resultProperty
    fullName: resultProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional property path to store the dialog result in.
    optional: true
    syntax:
      content: 'resultProperty?: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - DialogContext
          description: ''
        - id: reason
          type:
            - DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<DialogTurnResult<any>>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.skillAppId
    name: skillAppId
    fullName: skillAppId
    children: []
    langs:
      - typeScript
    type: property
    summary: The Microsoft App ID for the skill.
    syntax:
      content: 'skillAppId: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.skillEndpoint
    name: skillEndpoint
    fullName: skillEndpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: The `/api/messages` endpoint for the skill.
    syntax:
      content: 'skillEndpoint: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.BeginSkill.skillHostEndpoint
    name: skillHostEndpoint
    fullName: skillHostEndpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: The callback Url for the skill host.
    syntax:
      content: 'skillHostEndpoint: StringExpression'
      return:
        type:
          - StringExpression
        description: ''
    package: botbuilder-dialogs-adaptive
    remarks: >-
      Defauls to a value of `=settings.SkillHostEndpoint` which retrieves the
      endpoint from settings.
  - uid: botbuilder-dialogs-adaptive.BeginSkill.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the telemetry client for this dialog.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs-adaptive
references:
  - uid: botbuilder-dialogs-adaptive.TemplateInterface<Partial<Activity>>
    name: TemplateInterface<Partial<Activity>>
    spec.typeScript:
      - name: TemplateInterface
        fullName: TemplateInterface
        uid: botbuilder-dialogs-adaptive.TemplateInterface
      - name: <Partial<Activity>>
        fullName: <Partial<Activity>>

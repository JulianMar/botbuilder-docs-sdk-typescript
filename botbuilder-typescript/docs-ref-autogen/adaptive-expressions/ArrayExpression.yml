### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ArrayExpression
    name: ArrayExpression
    fullName: ArrayExpression<T>
    children:
      - adaptive-expressions.ArrayExpression.constructor
      - adaptive-expressions.ArrayExpression.expressionText
      - adaptive-expressions.ArrayExpression.getValue
      - adaptive-expressions.ArrayExpression.setValue
      - adaptive-expressions.ArrayExpression.toExpression
      - adaptive-expressions.ArrayExpression.toString
      - adaptive-expressions.ArrayExpression.tryGetValue
      - adaptive-expressions.ArrayExpression.value
    langs:
      - typeScript
    type: class
    summary: >-
      Represents a property which is either a value of array of T or a string
      expression to bind to a

      array of T.
    extends:
      name: 'adaptive-expressions.ExpressionProperty<T[]>'
    package: adaptive-expressions
    remarks: >-
      String values are always interpreted as an expression, whether it has '='
      prefix or not.
  - uid: adaptive-expressions.ArrayExpression.constructor
    name: 'ArrayExpression(T[] | string | Expression)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ArrayExpression(value?: T[] | string | Expression)'
      parameters:
        - id: value
          type:
            - 'T[] | string | adaptive-expressions.Expression'
          description: ''
          optional: true
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.expressionText
    name: expressionText
    fullName: expressionText
    children: []
    langs:
      - typeScript
    type: property
    summary: Getes or sets the expression text to evaluate to get the value.
    syntax:
      content: 'expressionText: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.getValue
    name: getValue(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the value.
    syntax:
      content: 'function getValue(data: object)'
      parameters:
        - id: data
          type:
            - object
          description: Data to use for expression binding.
      return:
        type:
          - 'T[]'
        description: The value.
    package: adaptive-expressions
    remarks: An error will be thrown if value is an invalid expression.
  - uid: adaptive-expressions.ArrayExpression.setValue
    name: 'setValue(T[] | string | Expression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the value.
    syntax:
      content: 'function setValue(value: T[] | string | Expression)'
      parameters:
        - id: value
          type:
            - 'T[] | string | adaptive-expressions.Expression'
          description: |
            Value to set.
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.toExpression
    name: toExpression()
    children: []
    type: method
    langs:
      - typeScript
    summary: This will return the existing expression if the value is non-complex type.
    syntax:
      content: function toExpression()
      parameters: []
      return:
        type:
          - adaptive-expressions.Expression
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: Convert an expression property to string.
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.tryGetValue
    name: tryGetValue(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Try to Get the value.
    syntax:
      content: 'function tryGetValue(data: object)'
      parameters:
        - id: data
          type:
            - object
          description: Data to use for expression binding.
      return:
        type:
          - Object
        description: the value or an error.
    package: adaptive-expressions
  - uid: adaptive-expressions.ArrayExpression.value
    name: value
    fullName: value
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets or sets the raw value of the expression property.
    syntax:
      content: 'value: T[]'
      return:
        type:
          - 'T[]'
        description: ''
    package: adaptive-expressions
references:
  - uid: 'adaptive-expressions.ExpressionProperty<T[]>'
    name: 'ExpressionProperty<T[]>'
    spec.typeScript:
      - name: ExpressionProperty
        fullName: ExpressionProperty
        uid: adaptive-expressions.ExpressionProperty
      - name: '<T[]>'
        fullName: '<T[]>'
  - uid: 'T[] | string | adaptive-expressions.Expression'
    name: Expression
    spec.typeScript:
      - name: 'T[] | string | '
        fullName: 'T[] | string | '
      - name: Expression
        fullName: Expression
        uid: adaptive-expressions.Expression
  - uid: adaptive-expressions.Expression
    name: Expression
    spec.typeScript:
      - name: Expression
        fullName: Expression
        uid: adaptive-expressions.Expression

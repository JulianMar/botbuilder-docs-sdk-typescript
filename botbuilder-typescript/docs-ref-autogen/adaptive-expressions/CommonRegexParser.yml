### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.CommonRegexParser
    name: CommonRegexParser
    fullName: CommonRegexParser
    children:
      - adaptive-expressions.CommonRegexParser.action
      - adaptive-expressions.CommonRegexParser.addErrorListener
      - adaptive-expressions.CommonRegexParser.addParseListener
      - adaptive-expressions.CommonRegexParser.ALC
      - adaptive-expressions.CommonRegexParser.alpha_nums
      - adaptive-expressions.CommonRegexParser.alternation
      - adaptive-expressions.CommonRegexParser.Ampersand
      - adaptive-expressions.CommonRegexParser.atn
      - adaptive-expressions.CommonRegexParser.atom
      - adaptive-expressions.CommonRegexParser.AUC
      - adaptive-expressions.CommonRegexParser.Backslash
      - adaptive-expressions.CommonRegexParser.BellChar
      - adaptive-expressions.CommonRegexParser.BLC
      - adaptive-expressions.CommonRegexParser.BlockQuoted
      - adaptive-expressions.CommonRegexParser.BUC
      - adaptive-expressions.CommonRegexParser.buildParseTree
      - adaptive-expressions.CommonRegexParser.capture
      - adaptive-expressions.CommonRegexParser.Caret
      - adaptive-expressions.CommonRegexParser.CarriageReturn
      - adaptive-expressions.CommonRegexParser.cc_atom
      - adaptive-expressions.CommonRegexParser.cc_literal
      - adaptive-expressions.CommonRegexParser.CharacterClassEnd
      - adaptive-expressions.CommonRegexParser.CharacterClassStart
      - adaptive-expressions.CommonRegexParser.character_class
      - adaptive-expressions.CommonRegexParser.CharWithoutProperty
      - adaptive-expressions.CommonRegexParser.CharWithProperty
      - adaptive-expressions.CommonRegexParser.CLC
      - adaptive-expressions.CommonRegexParser.CloseBrace
      - adaptive-expressions.CommonRegexParser.CloseParen
      - adaptive-expressions.CommonRegexParser.Colon
      - adaptive-expressions.CommonRegexParser.Comma
      - adaptive-expressions.CommonRegexParser.constructor
      - adaptive-expressions.CommonRegexParser.compileParseTreePattern
      - adaptive-expressions.CommonRegexParser.compileParseTreePattern_1
      - adaptive-expressions.CommonRegexParser.consume
      - adaptive-expressions.CommonRegexParser.context
      - adaptive-expressions.CommonRegexParser.ControlChar
      - adaptive-expressions.CommonRegexParser.CUC
      - adaptive-expressions.CommonRegexParser.currentToken
      - adaptive-expressions.CommonRegexParser.D0
      - adaptive-expressions.CommonRegexParser.D1
      - adaptive-expressions.CommonRegexParser.D2
      - adaptive-expressions.CommonRegexParser.D3
      - adaptive-expressions.CommonRegexParser.D4
      - adaptive-expressions.CommonRegexParser.D5
      - adaptive-expressions.CommonRegexParser.D6
      - adaptive-expressions.CommonRegexParser.D7
      - adaptive-expressions.CommonRegexParser.D8
      - adaptive-expressions.CommonRegexParser.D9
      - adaptive-expressions.CommonRegexParser.DecimalDigit
      - adaptive-expressions.CommonRegexParser.digit
      - adaptive-expressions.CommonRegexParser.digits
      - adaptive-expressions.CommonRegexParser.DLC
      - adaptive-expressions.CommonRegexParser.Dot
      - adaptive-expressions.CommonRegexParser.DUC
      - adaptive-expressions.CommonRegexParser.dumpDFA
      - adaptive-expressions.CommonRegexParser.ELC
      - adaptive-expressions.CommonRegexParser.element
      - adaptive-expressions.CommonRegexParser.EndOfSubject
      - adaptive-expressions.CommonRegexParser.enterLeftFactoredRule
      - adaptive-expressions.CommonRegexParser.enterOuterAlt
      - adaptive-expressions.CommonRegexParser.enterRecursionRule
      - adaptive-expressions.CommonRegexParser.enterRule
      - adaptive-expressions.CommonRegexParser.EOF
      - adaptive-expressions.CommonRegexParser.Equals
      - adaptive-expressions.CommonRegexParser.errorHandler
      - adaptive-expressions.CommonRegexParser.EscapeChar
      - adaptive-expressions.CommonRegexParser.EUC
      - adaptive-expressions.CommonRegexParser.Exclamation
      - adaptive-expressions.CommonRegexParser.exitRule
      - adaptive-expressions.CommonRegexParser.expr
      - adaptive-expressions.CommonRegexParser.FLC
      - adaptive-expressions.CommonRegexParser.FormFeed
      - adaptive-expressions.CommonRegexParser.FUC
      - adaptive-expressions.CommonRegexParser.getATNWithBypassAlts
      - adaptive-expressions.CommonRegexParser.getDFAStrings
      - adaptive-expressions.CommonRegexParser.getErrorHeader
      - adaptive-expressions.CommonRegexParser.getErrorListenerDispatch
      - adaptive-expressions.CommonRegexParser.getErrorListeners
      - adaptive-expressions.CommonRegexParser.getExpectedTokens
      - >-
        adaptive-expressions.CommonRegexParser.getExpectedTokensWithinCurrentRule
      - adaptive-expressions.CommonRegexParser.getInvokingContext
      - adaptive-expressions.CommonRegexParser.getParseListeners
      - adaptive-expressions.CommonRegexParser.getRuleIndex
      - adaptive-expressions.CommonRegexParser.getRuleIndexMap
      - adaptive-expressions.CommonRegexParser.getRuleInvocationStack
      - adaptive-expressions.CommonRegexParser.getTokenType
      - adaptive-expressions.CommonRegexParser.getTokenTypeMap
      - adaptive-expressions.CommonRegexParser.GLC
      - adaptive-expressions.CommonRegexParser.grammarFileName
      - adaptive-expressions.CommonRegexParser.GreaterThan
      - adaptive-expressions.CommonRegexParser.GUC
      - adaptive-expressions.CommonRegexParser.Hash
      - adaptive-expressions.CommonRegexParser.HexChar
      - adaptive-expressions.CommonRegexParser.HLC
      - adaptive-expressions.CommonRegexParser.HUC
      - adaptive-expressions.CommonRegexParser.Hyphen
      - adaptive-expressions.CommonRegexParser.ILC
      - adaptive-expressions.CommonRegexParser.inContext
      - adaptive-expressions.CommonRegexParser.inputStream
      - adaptive-expressions.CommonRegexParser.interpreter
      - adaptive-expressions.CommonRegexParser.isExpectedToken
      - adaptive-expressions.CommonRegexParser.isMatchedEOF
      - adaptive-expressions.CommonRegexParser.isTrace
      - adaptive-expressions.CommonRegexParser.IUC
      - adaptive-expressions.CommonRegexParser.JLC
      - adaptive-expressions.CommonRegexParser.JUC
      - adaptive-expressions.CommonRegexParser.KLC
      - adaptive-expressions.CommonRegexParser.KUC
      - adaptive-expressions.CommonRegexParser.LessThan
      - adaptive-expressions.CommonRegexParser.letter
      - adaptive-expressions.CommonRegexParser.literal
      - adaptive-expressions.CommonRegexParser.LLC
      - adaptive-expressions.CommonRegexParser.LUC
      - adaptive-expressions.CommonRegexParser.match
      - adaptive-expressions.CommonRegexParser.matchWildcard
      - adaptive-expressions.CommonRegexParser.MLC
      - adaptive-expressions.CommonRegexParser.MUC
      - adaptive-expressions.CommonRegexParser.name
      - adaptive-expressions.CommonRegexParser.NewLine
      - adaptive-expressions.CommonRegexParser.NLC
      - adaptive-expressions.CommonRegexParser.non_capture
      - adaptive-expressions.CommonRegexParser.non_close_paren
      - adaptive-expressions.CommonRegexParser.non_close_parens
      - adaptive-expressions.CommonRegexParser.NotDecimalDigit
      - adaptive-expressions.CommonRegexParser.notifyErrorListeners
      - adaptive-expressions.CommonRegexParser.notifyErrorListeners_1
      - adaptive-expressions.CommonRegexParser.NotWhiteSpace
      - adaptive-expressions.CommonRegexParser.NotWordChar
      - adaptive-expressions.CommonRegexParser.NUC
      - adaptive-expressions.CommonRegexParser.number
      - adaptive-expressions.CommonRegexParser.numberOfSyntaxErrors
      - adaptive-expressions.CommonRegexParser.octal_char
      - adaptive-expressions.CommonRegexParser.octal_digit
      - adaptive-expressions.CommonRegexParser.OLC
      - adaptive-expressions.CommonRegexParser.OpenBrace
      - adaptive-expressions.CommonRegexParser.OpenParen
      - adaptive-expressions.CommonRegexParser.option
      - adaptive-expressions.CommonRegexParser.option_flag
      - adaptive-expressions.CommonRegexParser.OtherChar
      - adaptive-expressions.CommonRegexParser.OUC
      - adaptive-expressions.CommonRegexParser.parse
      - adaptive-expressions.CommonRegexParser.parseInfo
      - adaptive-expressions.CommonRegexParser.Pipe
      - adaptive-expressions.CommonRegexParser.PLC
      - adaptive-expressions.CommonRegexParser.Plus
      - adaptive-expressions.CommonRegexParser.precedence
      - adaptive-expressions.CommonRegexParser.precpred
      - adaptive-expressions.CommonRegexParser.PUC
      - adaptive-expressions.CommonRegexParser.pushNewRecursionContext
      - adaptive-expressions.CommonRegexParser.QLC
      - adaptive-expressions.CommonRegexParser.quantifier
      - adaptive-expressions.CommonRegexParser.quantifier_type
      - adaptive-expressions.CommonRegexParser.QUC
      - adaptive-expressions.CommonRegexParser.QuestionMark
      - adaptive-expressions.CommonRegexParser.Quoted
      - adaptive-expressions.CommonRegexParser.removeErrorListener
      - adaptive-expressions.CommonRegexParser.removeErrorListeners
      - adaptive-expressions.CommonRegexParser.removeParseListener
      - adaptive-expressions.CommonRegexParser.removeParseListeners
      - adaptive-expressions.CommonRegexParser.reset
      - adaptive-expressions.CommonRegexParser.reset_1
      - adaptive-expressions.CommonRegexParser.RLC
      - adaptive-expressions.CommonRegexParser.RUC
      - adaptive-expressions.CommonRegexParser.ruleContext
      - adaptive-expressions.CommonRegexParser.ruleNames
      - adaptive-expressions.CommonRegexParser.ruleNames
      - adaptive-expressions.CommonRegexParser.RULE_alpha_nums
      - adaptive-expressions.CommonRegexParser.RULE_alternation
      - adaptive-expressions.CommonRegexParser.RULE_atom
      - adaptive-expressions.CommonRegexParser.RULE_capture
      - adaptive-expressions.CommonRegexParser.RULE_cc_atom
      - adaptive-expressions.CommonRegexParser.RULE_cc_literal
      - adaptive-expressions.CommonRegexParser.RULE_character_class
      - adaptive-expressions.CommonRegexParser.RULE_digit
      - adaptive-expressions.CommonRegexParser.RULE_digits
      - adaptive-expressions.CommonRegexParser.RULE_element
      - adaptive-expressions.CommonRegexParser.RULE_expr
      - adaptive-expressions.CommonRegexParser.RULE_letter
      - adaptive-expressions.CommonRegexParser.RULE_literal
      - adaptive-expressions.CommonRegexParser.RULE_name
      - adaptive-expressions.CommonRegexParser.RULE_non_capture
      - adaptive-expressions.CommonRegexParser.RULE_non_close_paren
      - adaptive-expressions.CommonRegexParser.RULE_non_close_parens
      - adaptive-expressions.CommonRegexParser.RULE_number
      - adaptive-expressions.CommonRegexParser.RULE_octal_char
      - adaptive-expressions.CommonRegexParser.RULE_octal_digit
      - adaptive-expressions.CommonRegexParser.RULE_option
      - adaptive-expressions.CommonRegexParser.RULE_option_flag
      - adaptive-expressions.CommonRegexParser.RULE_parse
      - adaptive-expressions.CommonRegexParser.RULE_quantifier
      - adaptive-expressions.CommonRegexParser.RULE_quantifier_type
      - adaptive-expressions.CommonRegexParser.RULE_shared_atom
      - adaptive-expressions.CommonRegexParser.RULE_shared_literal
      - adaptive-expressions.CommonRegexParser.sempred
      - adaptive-expressions.CommonRegexParser.serializedATN
      - adaptive-expressions.CommonRegexParser.setProfile
      - adaptive-expressions.CommonRegexParser.shared_atom
      - adaptive-expressions.CommonRegexParser.shared_literal
      - adaptive-expressions.CommonRegexParser.SingleQuote
      - adaptive-expressions.CommonRegexParser.SLC
      - adaptive-expressions.CommonRegexParser.sourceName
      - adaptive-expressions.CommonRegexParser.Star
      - adaptive-expressions.CommonRegexParser.state
      - adaptive-expressions.CommonRegexParser.SUC
      - adaptive-expressions.CommonRegexParser.Tab
      - adaptive-expressions.CommonRegexParser.TLC
      - adaptive-expressions.CommonRegexParser.tokenFactory
      - adaptive-expressions.CommonRegexParser.TUC
      - adaptive-expressions.CommonRegexParser.ULC
      - adaptive-expressions.CommonRegexParser.Underscore
      - adaptive-expressions.CommonRegexParser.unrollRecursionContexts
      - adaptive-expressions.CommonRegexParser.UUC
      - adaptive-expressions.CommonRegexParser.VLC
      - adaptive-expressions.CommonRegexParser.vocabulary
      - adaptive-expressions.CommonRegexParser.VOCABULARY
      - adaptive-expressions.CommonRegexParser.VUC
      - adaptive-expressions.CommonRegexParser.WhiteSpace
      - adaptive-expressions.CommonRegexParser.WLC
      - adaptive-expressions.CommonRegexParser.WordChar
      - adaptive-expressions.CommonRegexParser.WUC
      - adaptive-expressions.CommonRegexParser.XLC
      - adaptive-expressions.CommonRegexParser.XUC
      - adaptive-expressions.CommonRegexParser.YLC
      - adaptive-expressions.CommonRegexParser.YUC
      - adaptive-expressions.CommonRegexParser.ZLC
      - adaptive-expressions.CommonRegexParser.ZUC
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Parser
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.action
    name: 'action(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.addErrorListener
    name: addErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.addParseListener
    name: addParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registers {@code listener} to receive events during the parsing process.
      <p>To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.</p>

      <p>With the following specific exceptions, calls to listener events are
      <em>deterministic</em>, i.e. for identical input the calls to listener
      methods will be the same.</p>

      <ul>
      <li>Alterations to the grammar used to generate code may change the
      behavior of the listener calls.</li>
      <li>Alterations to the command line options passed to ANTLR 4 when
      generating the parser may change the behavior of the listener calls.</li>
      <li>Changing the version of the ANTLR Tool used to generate the parser
      may change the behavior of the listener calls.</li>
      </ul>
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to add

            @ if {@code} listener is {@code null}
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ALC
    name: ALC
    fullName: ALC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ALC: 44 = 44'
      return:
        type:
          - '44'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.alpha_nums
    name: alpha_nums()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function alpha_nums()
      parameters: []
      return:
        type:
          - adaptive-expressions.Alpha_numsContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.alternation
    name: alternation()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function alternation()
      parameters: []
      return:
        type:
          - adaptive-expressions.AlternationContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Ampersand
    name: Ampersand
    fullName: Ampersand
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Ampersand: 43 = 43'
      return:
        type:
          - '43'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.atom
    name: atom()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function atom()
      parameters: []
      return:
        type:
          - adaptive-expressions.AtomContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.AUC
    name: AUC
    fullName: AUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static AUC: 70 = 70'
      return:
        type:
          - '70'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Backslash
    name: Backslash
    fullName: Backslash
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Backslash: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.BellChar
    name: BellChar
    fullName: BellChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static BellChar: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.BLC
    name: BLC
    fullName: BLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static BLC: 45 = 45'
      return:
        type:
          - '45'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.BlockQuoted
    name: BlockQuoted
    fullName: BlockQuoted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static BlockQuoted: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.BUC
    name: BUC
    fullName: BUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static BUC: 71 = 71'
      return:
        type:
          - '71'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.buildParseTree
    name: buildParseTree
    fullName: buildParseTree
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      <p>Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.</p>

      <p>When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.</p>
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.capture
    name: capture()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function capture()
      parameters: []
      return:
        type:
          - adaptive-expressions.CaptureContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Caret
    name: Caret
    fullName: Caret
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Caret: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CarriageReturn
    name: CarriageReturn
    fullName: CarriageReturn
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CarriageReturn: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.cc_atom
    name: cc_atom()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function cc_atom()
      parameters: []
      return:
        type:
          - adaptive-expressions.Cc_atomContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.cc_literal
    name: cc_literal()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function cc_literal()
      parameters: []
      return:
        type:
          - adaptive-expressions.Cc_literalContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CharacterClassEnd
    name: CharacterClassEnd
    fullName: CharacterClassEnd
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CharacterClassEnd: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CharacterClassStart
    name: CharacterClassStart
    fullName: CharacterClassStart
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CharacterClassStart: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.character_class
    name: character_class()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function character_class()
      parameters: []
      return:
        type:
          - adaptive-expressions.Character_classContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CharWithoutProperty
    name: CharWithoutProperty
    fullName: CharWithoutProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CharWithoutProperty: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CharWithProperty
    name: CharWithProperty
    fullName: CharWithProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CharWithProperty: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CLC
    name: CLC
    fullName: CLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CLC: 46 = 46'
      return:
        type:
          - '46'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CloseBrace
    name: CloseBrace
    fullName: CloseBrace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CloseBrace: 29 = 29'
      return:
        type:
          - '29'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CloseParen
    name: CloseParen
    fullName: CloseParen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CloseParen: 34 = 34'
      return:
        type:
          - '34'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Colon
    name: Colon
    fullName: Colon
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Colon: 39 = 39'
      return:
        type:
          - '39'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Comma
    name: Comma
    fullName: Comma
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Comma: 30 = 30'
      return:
        type:
          - '30'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.constructor
    name: CommonRegexParser(TokenStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new CommonRegexParser(input: TokenStream)'
      parameters:
        - id: input
          type:
            - TokenStream
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.compileParseTreePattern
    name: 'compileParseTreePattern(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.compileParseTreePattern_1
    name: 'compileParseTreePattern(string, number, Lexer)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
        - id: lexer
          type:
            - Lexer
          description: ''
          optional: true
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.consume
    name: consume()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Consume and return the [current symbol](`currentToken`).
      <p>E.g., given the following input with {@code A} being the current
      lookahead symbol, this function moves the cursor to {@code B} and returns
      {@code A}.</p>

      <pre>
       A B
       ^
      </pre>

      If the parser is not in error recovery mode, the consumed symbol is added
      to the parse tree using <xref:ParserRuleContext%23addChild(Token)>, and
      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.
      If the parser <em>is</em> in error recovery mode, the consumed symbol is
      added to the parse tree using
      <xref:ParserRuleContext%23addErrorNode(Token)>, and
      <xref:ParseTreeListener%23visitErrorNode> is called on any parse
      listeners.
    syntax:
      content: function consume()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ControlChar
    name: ControlChar
    fullName: ControlChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ControlChar: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.CUC
    name: CUC
    fullName: CUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CUC: 72 = 72'
      return:
        type:
          - '72'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.currentToken
    name: currentToken
    fullName: currentToken
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    syntax:
      content: 'currentToken: Token'
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D0
    name: D0
    fullName: D0
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D0: 105 = 105'
      return:
        type:
          - '105'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D1
    name: D1
    fullName: D1
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D1: 96 = 96'
      return:
        type:
          - '96'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D2
    name: D2
    fullName: D2
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D2: 97 = 97'
      return:
        type:
          - '97'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D3
    name: D3
    fullName: D3
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D3: 98 = 98'
      return:
        type:
          - '98'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D4
    name: D4
    fullName: D4
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D4: 99 = 99'
      return:
        type:
          - '99'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D5
    name: D5
    fullName: D5
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D5: 100 = 100'
      return:
        type:
          - '100'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D6
    name: D6
    fullName: D6
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D6: 101 = 101'
      return:
        type:
          - '101'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D7
    name: D7
    fullName: D7
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D7: 102 = 102'
      return:
        type:
          - '102'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D8
    name: D8
    fullName: D8
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D8: 103 = 103'
      return:
        type:
          - '103'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.D9
    name: D9
    fullName: D9
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static D9: 104 = 104'
      return:
        type:
          - '104'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.DecimalDigit
    name: DecimalDigit
    fullName: DecimalDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DecimalDigit: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.digit
    name: digit()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function digit()
      parameters: []
      return:
        type:
          - adaptive-expressions.DigitContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.digits
    name: digits()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function digits()
      parameters: []
      return:
        type:
          - adaptive-expressions.DigitsContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.DLC
    name: DLC
    fullName: DLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DLC: 47 = 47'
      return:
        type:
          - '47'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Dot
    name: Dot
    fullName: Dot
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Dot: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.DUC
    name: DUC
    fullName: DUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DUC: 73 = 73'
      return:
        type:
          - '73'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.dumpDFA
    name: dumpDFA()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function dumpDFA()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ELC
    name: ELC
    fullName: ELC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ELC: 48 = 48'
      return:
        type:
          - '48'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.element
    name: element()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function element()
      parameters: []
      return:
        type:
          - adaptive-expressions.ElementContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.EndOfSubject
    name: EndOfSubject
    fullName: EndOfSubject
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EndOfSubject: 31 = 31'
      return:
        type:
          - '31'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.enterLeftFactoredRule
    name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.enterOuterAlt
    name: 'enterOuterAlt(ParserRuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: altNum
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.enterRecursionRule
    name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: precedence
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.enterRule
    name: 'enterRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Equals
    name: Equals
    fullName: Equals
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Equals: 41 = 41'
      return:
        type:
          - '41'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.errorHandler
    name: errorHandler
    fullName: errorHandler
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type:
          - ANTLRErrorStrategy
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.EscapeChar
    name: EscapeChar
    fullName: EscapeChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EscapeChar: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.EUC
    name: EUC
    fullName: EUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EUC: 74 = 74'
      return:
        type:
          - '74'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Exclamation
    name: Exclamation
    fullName: Exclamation
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Exclamation: 42 = 42'
      return:
        type:
          - '42'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.exitRule
    name: exitRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function exitRule()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.expr
    name: expr()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function expr()
      parameters: []
      return:
        type:
          - adaptive-expressions.ExprContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.FLC
    name: FLC
    fullName: FLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static FLC: 49 = 49'
      return:
        type:
          - '49'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.FormFeed
    name: FormFeed
    fullName: FormFeed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static FormFeed: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.FUC
    name: FUC
    fullName: FUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static FUC: 75 = 75'
      return:
        type:
          - '75'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getATNWithBypassAlts
    name: getATNWithBypassAlts()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    syntax:
      content: function getATNWithBypassAlts()
      parameters: []
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getDFAStrings
    name: getDFAStrings()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function getDFAStrings()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ParserErrorListener
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<Token>>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getExpectedTokens
    name: getExpectedTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    syntax:
      content: function getExpectedTokens()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getExpectedTokensWithinCurrentRule
    name: getExpectedTokensWithinCurrentRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getInvokingContext
    name: getInvokingContext(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type:
            - number
          description: ''
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getParseListeners
    name: getParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getParseListeners()
      parameters: []
      return:
        type:
          - 'ParseTreeListener[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getRuleIndex
    name: getRuleIndex(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a rule''s index (i.e., {@code RULE_ruleName} field) or -1 if not found.'
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      <p>Used for XPath and tree pattern compilation.</p>
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getRuleInvocationStack
    name: getRuleInvocationStack(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type:
            - RuleContext
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      <p>Used for XPath and tree pattern compilation.</p>
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.GLC
    name: GLC
    fullName: GLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static GLC: 50 = 50'
      return:
        type:
          - '50'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'grammarFileName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.GreaterThan
    name: GreaterThan
    fullName: GreaterThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static GreaterThan: 36 = 36'
      return:
        type:
          - '36'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.GUC
    name: GUC
    fullName: GUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static GUC: 76 = 76'
      return:
        type:
          - '76'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Hash
    name: Hash
    fullName: Hash
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Hash: 40 = 40'
      return:
        type:
          - '40'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.HexChar
    name: HexChar
    fullName: HexChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static HexChar: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.HLC
    name: HLC
    fullName: HLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static HLC: 51 = 51'
      return:
        type:
          - '51'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.HUC
    name: HUC
    fullName: HUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static HUC: 77 = 77'
      return:
        type:
          - '77'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Hyphen
    name: Hyphen
    fullName: Hyphen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Hyphen: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ILC
    name: ILC
    fullName: ILC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ILC: 52 = 52'
      return:
        type:
          - '52'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.inContext
    name: inContext(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the token stream and reset the parser.
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type:
          - TokenStream
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type:
          - ParserATNSimulator
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.isExpectedToken
    name: isExpectedToken(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Checks whether or not {@code symbol} can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      <pre>
      return getExpectedTokens().contains(symbol);
      </pre>
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type:
            - number
          description: the symbol type to check
      return:
        type:
          - boolean
        description: |-
          if {@code symbol} can follow the current state in
          the ATN, otherwise {@code false}.
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.isMatchedEOF
    name: isMatchedEOF
    fullName: isMatchedEOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.isTrace
    name: isTrace
    fullName: isTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    syntax:
      content: 'isTrace: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.IUC
    name: IUC
    fullName: IUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static IUC: 78 = 78'
      return:
        type:
          - '78'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.JLC
    name: JLC
    fullName: JLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static JLC: 53 = 53'
      return:
        type:
          - '53'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.JUC
    name: JUC
    fullName: JUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static JUC: 79 = 79'
      return:
        type:
          - '79'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.KLC
    name: KLC
    fullName: KLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static KLC: 54 = 54'
      return:
        type:
          - '54'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.KUC
    name: KUC
    fullName: KUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static KUC: 80 = 80'
      return:
        type:
          - '80'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.LessThan
    name: LessThan
    fullName: LessThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LessThan: 35 = 35'
      return:
        type:
          - '35'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.letter
    name: letter()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function letter()
      parameters: []
      return:
        type:
          - adaptive-expressions.LetterContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.literal
    name: literal()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function literal()
      parameters: []
      return:
        type:
          - adaptive-expressions.LiteralContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.LLC
    name: LLC
    fullName: LLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LLC: 55 = 55'
      return:
        type:
          - '55'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.LUC
    name: LUC
    fullName: LUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LUC: 81 = 81'
      return:
        type:
          - '81'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.match
    name: match(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Match current input symbol against {@code ttype}. If the symbol type
      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are
      called to complete the match process.
      <p>If the symbol type does not match,
      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error
      strategy to attempt recovery. If <xref:%23getBuildParseTree> is
      {@code true} and the token index of the symbol returned by
      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to
      the parse tree by calling <xref:ParserRuleContext%23addErrorNode>.</p>
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: the token type to match
      return:
        type:
          - Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          {@code ttype} and the error strategy could not recover from the
          mismatched symbol
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.matchWildcard
    name: matchWildcard()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Match current input symbol as a wildcard. If the symbol type matches
      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>
      and <xref:%23consume> are called to complete the match process.
      <p>If the symbol type does not match,
      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error
      strategy to attempt recovery. If <xref:%23getBuildParseTree> is
      {@code true} and the token index of the symbol returned by
      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to
      the parse tree by calling <xref:ParserRuleContext%23addErrorNode>.</p>
    syntax:
      content: function matchWildcard()
      parameters: []
      return:
        type:
          - Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.MLC
    name: MLC
    fullName: MLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MLC: 56 = 56'
      return:
        type:
          - '56'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.MUC
    name: MUC
    fullName: MUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MUC: 82 = 82'
      return:
        type:
          - '82'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.name
    name: name()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function name()
      parameters: []
      return:
        type:
          - adaptive-expressions.NameContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NewLine
    name: NewLine
    fullName: NewLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NewLine: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NLC
    name: NLC
    fullName: NLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NLC: 57 = 57'
      return:
        type:
          - '57'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.non_capture
    name: non_capture()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function non_capture()
      parameters: []
      return:
        type:
          - adaptive-expressions.Non_captureContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.non_close_paren
    name: non_close_paren()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function non_close_paren()
      parameters: []
      return:
        type:
          - adaptive-expressions.Non_close_parenContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.non_close_parens
    name: non_close_parens()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function non_close_parens()
      parameters: []
      return:
        type:
          - adaptive-expressions.Non_close_parensContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NotDecimalDigit
    name: NotDecimalDigit
    fullName: NotDecimalDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NotDecimalDigit: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.notifyErrorListeners
    name: notifyErrorListeners(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type:
            - string
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.notifyErrorListeners_1
    name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type:
            - string
          description: ''
        - id: offendingToken
          type:
            - Token | null
          description: ''
        - id: e
          type:
            - RecognitionException | undefined
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NotWhiteSpace
    name: NotWhiteSpace
    fullName: NotWhiteSpace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NotWhiteSpace: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NotWordChar
    name: NotWordChar
    fullName: NotWordChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NotWordChar: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.NUC
    name: NUC
    fullName: NUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NUC: 83 = 83'
      return:
        type:
          - '83'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.number
    name: number()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function number()
      parameters: []
      return:
        type:
          - adaptive-expressions.NumberContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.numberOfSyntaxErrors
    name: numberOfSyntaxErrors
    fullName: numberOfSyntaxErrors
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.octal_char
    name: octal_char()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function octal_char()
      parameters: []
      return:
        type:
          - adaptive-expressions.Octal_charContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.octal_digit
    name: octal_digit()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function octal_digit()
      parameters: []
      return:
        type:
          - adaptive-expressions.Octal_digitContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.OLC
    name: OLC
    fullName: OLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OLC: 58 = 58'
      return:
        type:
          - '58'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.OpenBrace
    name: OpenBrace
    fullName: OpenBrace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OpenBrace: 28 = 28'
      return:
        type:
          - '28'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.OpenParen
    name: OpenParen
    fullName: OpenParen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OpenParen: 33 = 33'
      return:
        type:
          - '33'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.option
    name: option()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function option()
      parameters: []
      return:
        type:
          - adaptive-expressions.OptionContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.option_flag
    name: option_flag()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function option_flag()
      parameters: []
      return:
        type:
          - adaptive-expressions.Option_flagContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.OtherChar
    name: OtherChar
    fullName: OtherChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OtherChar: 106 = 106'
      return:
        type:
          - '106'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.OUC
    name: OUC
    fullName: OUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OUC: 84 = 84'
      return:
        type:
          - '84'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.parse
    name: parse()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function parse()
      parameters: []
      return:
        type:
          - adaptive-expressions.ParseContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Pipe
    name: Pipe
    fullName: Pipe
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Pipe: 32 = 32'
      return:
        type:
          - '32'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.PLC
    name: PLC
    fullName: PLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static PLC: 59 = 59'
      return:
        type:
          - '59'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Plus
    name: Plus
    fullName: Plus
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Plus: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.precedence
    name: precedence
    fullName: precedence
    children: []
    langs:
      - typeScript
    type: property
    summary: Get the precedence level for the top-most precedence rule.
    syntax:
      content: 'precedence: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.precpred
    name: 'precpred(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.PUC
    name: PUC
    fullName: PUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static PUC: 85 = 85'
      return:
        type:
          - '85'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.pushNewRecursionContext
    name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.QLC
    name: QLC
    fullName: QLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static QLC: 60 = 60'
      return:
        type:
          - '60'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.quantifier
    name: quantifier()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function quantifier()
      parameters: []
      return:
        type:
          - adaptive-expressions.QuantifierContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.quantifier_type
    name: quantifier_type()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function quantifier_type()
      parameters: []
      return:
        type:
          - adaptive-expressions.Quantifier_typeContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.QUC
    name: QUC
    fullName: QUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static QUC: 86 = 86'
      return:
        type:
          - '86'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.QuestionMark
    name: QuestionMark
    fullName: QuestionMark
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static QuestionMark: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Quoted
    name: Quoted
    fullName: Quoted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Quoted: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.removeParseListener
    name: removeParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Remove {@code listener} from the list of parse listeners.
      <p>If {@code listener} is {@code null} or has not been added as a parse
      listener, this method does nothing.</p>
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to remove
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.removeParseListeners
    name: removeParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove all parse listeners.
    syntax:
      content: function removeParseListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: reset the parser's state
    syntax:
      content: function reset()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RLC
    name: RLC
    fullName: RLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RLC: 61 = 61'
      return:
        type:
          - '61'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RUC
    name: RUC
    fullName: RUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RUC: 87 = 87'
      return:
        type:
          - '87'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ruleNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_alpha_nums
    name: RULE_alpha_nums
    fullName: RULE_alpha_nums
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_alpha_nums: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_alternation
    name: RULE_alternation
    fullName: RULE_alternation
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_alternation: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_atom
    name: RULE_atom
    fullName: RULE_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_atom: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_capture
    name: RULE_capture
    fullName: RULE_capture
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_capture: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_cc_atom
    name: RULE_cc_atom
    fullName: RULE_cc_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_cc_atom: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_cc_literal
    name: RULE_cc_literal
    fullName: RULE_cc_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_cc_literal: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_character_class
    name: RULE_character_class
    fullName: RULE_character_class
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_character_class: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_digit
    name: RULE_digit
    fullName: RULE_digit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_digit: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_digits
    name: RULE_digits
    fullName: RULE_digits
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_digits: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_element
    name: RULE_element
    fullName: RULE_element
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_element: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_expr
    name: RULE_expr
    fullName: RULE_expr
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_expr: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_letter
    name: RULE_letter
    fullName: RULE_letter
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_letter: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_literal
    name: RULE_literal
    fullName: RULE_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_literal: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_name
    name: RULE_name
    fullName: RULE_name
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_name: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_non_capture
    name: RULE_non_capture
    fullName: RULE_non_capture
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_non_capture: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_non_close_paren
    name: RULE_non_close_paren
    fullName: RULE_non_close_paren
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_non_close_paren: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_non_close_parens
    name: RULE_non_close_parens
    fullName: RULE_non_close_parens
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_non_close_parens: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_number
    name: RULE_number
    fullName: RULE_number
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_number: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_octal_char
    name: RULE_octal_char
    fullName: RULE_octal_char
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_octal_char: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_octal_digit
    name: RULE_octal_digit
    fullName: RULE_octal_digit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_octal_digit: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_option
    name: RULE_option
    fullName: RULE_option
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_option: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_option_flag
    name: RULE_option_flag
    fullName: RULE_option_flag
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_option_flag: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_parse
    name: RULE_parse
    fullName: RULE_parse
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_parse: 0 = 0'
      return:
        type:
          - '0'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_quantifier
    name: RULE_quantifier
    fullName: RULE_quantifier
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_quantifier: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_quantifier_type
    name: RULE_quantifier_type
    fullName: RULE_quantifier_type
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_quantifier_type: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_shared_atom
    name: RULE_shared_atom
    fullName: RULE_shared_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_shared_atom: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.RULE_shared_literal
    name: RULE_shared_literal
    fullName: RULE_shared_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RULE_shared_literal: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.sempred
    name: 'sempred(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'serializedATN: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.setProfile
    name: setProfile(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type:
            - boolean
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.shared_atom
    name: shared_atom()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function shared_atom()
      parameters: []
      return:
        type:
          - adaptive-expressions.Shared_atomContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.shared_literal
    name: shared_literal()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function shared_literal()
      parameters: []
      return:
        type:
          - adaptive-expressions.Shared_literalContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.SingleQuote
    name: SingleQuote
    fullName: SingleQuote
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SingleQuote: 37 = 37'
      return:
        type:
          - '37'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.SLC
    name: SLC
    fullName: SLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SLC: 62 = 62'
      return:
        type:
          - '62'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Star
    name: Star
    fullName: Star
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Star: 27 = 27'
      return:
        type:
          - '27'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.SUC
    name: SUC
    fullName: SUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SUC: 88 = 88'
      return:
        type:
          - '88'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Tab
    name: Tab
    fullName: Tab
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Tab: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.TLC
    name: TLC
    fullName: TLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static TLC: 63 = 63'
      return:
        type:
          - '63'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.TUC
    name: TUC
    fullName: TUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static TUC: 89 = 89'
      return:
        type:
          - '89'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ULC
    name: ULC
    fullName: ULC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ULC: 64 = 64'
      return:
        type:
          - '64'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.Underscore
    name: Underscore
    fullName: Underscore
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static Underscore: 38 = 38'
      return:
        type:
          - '38'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.unrollRecursionContexts
    name: unrollRecursionContexts(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type:
            - ParserRuleContext
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.UUC
    name: UUC
    fullName: UUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static UUC: 90 = 90'
      return:
        type:
          - '90'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.VLC
    name: VLC
    fullName: VLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static VLC: 65 = 65'
      return:
        type:
          - '65'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'vocabulary: Vocabulary'
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static VOCABULARY: Vocabulary'
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.VUC
    name: VUC
    fullName: VUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static VUC: 91 = 91'
      return:
        type:
          - '91'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.WhiteSpace
    name: WhiteSpace
    fullName: WhiteSpace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static WhiteSpace: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.WLC
    name: WLC
    fullName: WLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static WLC: 66 = 66'
      return:
        type:
          - '66'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.WordChar
    name: WordChar
    fullName: WordChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static WordChar: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.WUC
    name: WUC
    fullName: WUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static WUC: 92 = 92'
      return:
        type:
          - '92'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.XLC
    name: XLC
    fullName: XLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static XLC: 67 = 67'
      return:
        type:
          - '67'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.XUC
    name: XUC
    fullName: XUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static XUC: 93 = 93'
      return:
        type:
          - '93'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.YLC
    name: YLC
    fullName: YLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static YLC: 68 = 68'
      return:
        type:
          - '68'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.YUC
    name: YUC
    fullName: YUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static YUC: 94 = 94'
      return:
        type:
          - '94'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ZLC
    name: ZLC
    fullName: ZLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ZLC: 69 = 69'
      return:
        type:
          - '69'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexParser.ZUC
    name: ZUC
    fullName: ZUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ZUC: 95 = 95'
      return:
        type:
          - '95'
        description: ''
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.Alpha_numsContext
    name: Alpha_numsContext
    spec.typeScript:
      - name: Alpha_numsContext
        fullName: Alpha_numsContext
        uid: adaptive-expressions.Alpha_numsContext
  - uid: adaptive-expressions.AlternationContext
    name: AlternationContext
    spec.typeScript:
      - name: AlternationContext
        fullName: AlternationContext
        uid: adaptive-expressions.AlternationContext
  - uid: adaptive-expressions.AtomContext
    name: AtomContext
    spec.typeScript:
      - name: AtomContext
        fullName: AtomContext
        uid: adaptive-expressions.AtomContext
  - uid: adaptive-expressions.CaptureContext
    name: CaptureContext
    spec.typeScript:
      - name: CaptureContext
        fullName: CaptureContext
        uid: adaptive-expressions.CaptureContext
  - uid: adaptive-expressions.Cc_atomContext
    name: Cc_atomContext
    spec.typeScript:
      - name: Cc_atomContext
        fullName: Cc_atomContext
        uid: adaptive-expressions.Cc_atomContext
  - uid: adaptive-expressions.Cc_literalContext
    name: Cc_literalContext
    spec.typeScript:
      - name: Cc_literalContext
        fullName: Cc_literalContext
        uid: adaptive-expressions.Cc_literalContext
  - uid: adaptive-expressions.Character_classContext
    name: Character_classContext
    spec.typeScript:
      - name: Character_classContext
        fullName: Character_classContext
        uid: adaptive-expressions.Character_classContext
  - uid: adaptive-expressions.DigitContext
    name: DigitContext
    spec.typeScript:
      - name: DigitContext
        fullName: DigitContext
        uid: adaptive-expressions.DigitContext
  - uid: adaptive-expressions.DigitsContext
    name: DigitsContext
    spec.typeScript:
      - name: DigitsContext
        fullName: DigitsContext
        uid: adaptive-expressions.DigitsContext
  - uid: adaptive-expressions.ElementContext
    name: ElementContext
    spec.typeScript:
      - name: ElementContext
        fullName: ElementContext
        uid: adaptive-expressions.ElementContext
  - uid: adaptive-expressions.ExprContext
    name: ExprContext
    spec.typeScript:
      - name: ExprContext
        fullName: ExprContext
        uid: adaptive-expressions.ExprContext
  - uid: adaptive-expressions.LetterContext
    name: LetterContext
    spec.typeScript:
      - name: LetterContext
        fullName: LetterContext
        uid: adaptive-expressions.LetterContext
  - uid: adaptive-expressions.LiteralContext
    name: LiteralContext
    spec.typeScript:
      - name: LiteralContext
        fullName: LiteralContext
        uid: adaptive-expressions.LiteralContext
  - uid: adaptive-expressions.NameContext
    name: NameContext
    spec.typeScript:
      - name: NameContext
        fullName: NameContext
        uid: adaptive-expressions.NameContext
  - uid: adaptive-expressions.Non_captureContext
    name: Non_captureContext
    spec.typeScript:
      - name: Non_captureContext
        fullName: Non_captureContext
        uid: adaptive-expressions.Non_captureContext
  - uid: adaptive-expressions.Non_close_parenContext
    name: Non_close_parenContext
    spec.typeScript:
      - name: Non_close_parenContext
        fullName: Non_close_parenContext
        uid: adaptive-expressions.Non_close_parenContext
  - uid: adaptive-expressions.Non_close_parensContext
    name: Non_close_parensContext
    spec.typeScript:
      - name: Non_close_parensContext
        fullName: Non_close_parensContext
        uid: adaptive-expressions.Non_close_parensContext
  - uid: adaptive-expressions.NumberContext
    name: NumberContext
    spec.typeScript:
      - name: NumberContext
        fullName: NumberContext
        uid: adaptive-expressions.NumberContext
  - uid: adaptive-expressions.Octal_charContext
    name: Octal_charContext
    spec.typeScript:
      - name: Octal_charContext
        fullName: Octal_charContext
        uid: adaptive-expressions.Octal_charContext
  - uid: adaptive-expressions.Octal_digitContext
    name: Octal_digitContext
    spec.typeScript:
      - name: Octal_digitContext
        fullName: Octal_digitContext
        uid: adaptive-expressions.Octal_digitContext
  - uid: adaptive-expressions.OptionContext
    name: OptionContext
    spec.typeScript:
      - name: OptionContext
        fullName: OptionContext
        uid: adaptive-expressions.OptionContext
  - uid: adaptive-expressions.Option_flagContext
    name: Option_flagContext
    spec.typeScript:
      - name: Option_flagContext
        fullName: Option_flagContext
        uid: adaptive-expressions.Option_flagContext
  - uid: adaptive-expressions.ParseContext
    name: ParseContext
    spec.typeScript:
      - name: ParseContext
        fullName: ParseContext
        uid: adaptive-expressions.ParseContext
  - uid: adaptive-expressions.QuantifierContext
    name: QuantifierContext
    spec.typeScript:
      - name: QuantifierContext
        fullName: QuantifierContext
        uid: adaptive-expressions.QuantifierContext
  - uid: adaptive-expressions.Quantifier_typeContext
    name: Quantifier_typeContext
    spec.typeScript:
      - name: Quantifier_typeContext
        fullName: Quantifier_typeContext
        uid: adaptive-expressions.Quantifier_typeContext
  - uid: adaptive-expressions.Shared_atomContext
    name: Shared_atomContext
    spec.typeScript:
      - name: Shared_atomContext
        fullName: Shared_atomContext
        uid: adaptive-expressions.Shared_atomContext
  - uid: adaptive-expressions.Shared_literalContext
    name: Shared_literalContext
    spec.typeScript:
      - name: Shared_literalContext
        fullName: Shared_literalContext
        uid: adaptive-expressions.Shared_literalContext

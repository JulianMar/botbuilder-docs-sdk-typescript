### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor
    name: ExpressionAntlrParserVisitor
    fullName: ExpressionAntlrParserVisitor<Result>
    children:
      - adaptive-expressions.ExpressionAntlrParserVisitor.visit
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitArgsList
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitArrayCreationExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitBinaryOpExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitChildren
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitErrorNode
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitExpression
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitFile
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitFuncInvokeExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitIdAtom
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitIndexAccessExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitJsonCreationExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitKey
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePair
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePairList
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitMemberAccessExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitNumericAtom
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitParenthesisExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExp
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExpression
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitStringAtom
      - >-
        adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolation
      - >-
        adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolationAtom
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitTerminal
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitTextContent
      - adaptive-expressions.ExpressionAntlrParserVisitor.visitUnaryOpExp
    langs:
      - typeScript
    type: interface
    summary: >-
      This interface defines a complete generic visitor for a parse tree
      produced

      by `ExpressionAntlrParser`.
    extends:
      name: ParseTreeVisitor<Result>
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visit
    name: visit(ParseTree)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit a parse tree, and return a user-defined result of the operation.'
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type:
            - ParseTree
          description: 'The <xref:ParseTree> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the parse tree.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitArgsList
    name: visitArgsList
    fullName: visitArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.argsList`.
    optional: true
    syntax:
      content: 'visitArgsList?: (ctx: ArgsListContext) => Result'
      return:
        type:
          - '(ctx: ArgsListContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitArrayCreationExp
    name: visitArrayCreationExp
    fullName: visitArrayCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitArrayCreationExp?: (ctx: ArrayCreationExpContext) => Result'
      return:
        type:
          - '(ctx: ArrayCreationExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitBinaryOpExp
    name: visitBinaryOpExp
    fullName: visitBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'visitBinaryOpExp?: (ctx: BinaryOpExpContext) => Result'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitChildren
    name: visitChildren(RuleNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Visit the children of a node, and return a user-defined result
      of the operation.
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type:
            - RuleNode
          description: 'The <xref:RuleNode> whose children should be visited.'
      return:
        type:
          - Result
        description: The result of visiting the children of the node.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitErrorNode
    name: visitErrorNode(ErrorNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit an error node, and return a user-defined result of the operation.'
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type:
            - ErrorNode
          description: 'The <xref:ErrorNode> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the node.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitExpression
    name: visitExpression
    fullName: visitExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'visitExpression?: (ctx: ExpressionContext) => Result'
      return:
        type:
          - '(ctx: ExpressionContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitFile
    name: visitFile
    fullName: visitFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.file`.
    optional: true
    syntax:
      content: 'visitFile?: (ctx: FileContext) => Result'
      return:
        type:
          - '(ctx: FileContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitFuncInvokeExp
    name: visitFuncInvokeExp
    fullName: visitFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => Result'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitIdAtom
    name: visitIdAtom
    fullName: visitIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitIdAtom?: (ctx: IdAtomContext) => Result'
      return:
        type:
          - '(ctx: IdAtomContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitIndexAccessExp
    name: visitIndexAccessExp
    fullName: visitIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitIndexAccessExp?: (ctx: IndexAccessExpContext) => Result'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitJsonCreationExp
    name: visitJsonCreationExp
    fullName: visitJsonCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitJsonCreationExp?: (ctx: JsonCreationExpContext) => Result'
      return:
        type:
          - '(ctx: JsonCreationExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKey
    name: visitKey
    fullName: visitKey
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.key`.
    optional: true
    syntax:
      content: 'visitKey?: (ctx: KeyContext) => Result'
      return:
        type:
          - '(ctx: KeyContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePair
    name: visitKeyValuePair
    fullName: visitKeyValuePair
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    optional: true
    syntax:
      content: 'visitKeyValuePair?: (ctx: KeyValuePairContext) => Result'
      return:
        type:
          - '(ctx: KeyValuePairContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePairList
    name: visitKeyValuePairList
    fullName: visitKeyValuePairList
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    optional: true
    syntax:
      content: 'visitKeyValuePairList?: (ctx: KeyValuePairListContext) => Result'
      return:
        type:
          - '(ctx: KeyValuePairListContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitMemberAccessExp
    name: visitMemberAccessExp
    fullName: visitMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitMemberAccessExp?: (ctx: MemberAccessExpContext) => Result'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitNumericAtom
    name: visitNumericAtom
    fullName: visitNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitNumericAtom?: (ctx: NumericAtomContext) => Result'
      return:
        type:
          - '(ctx: NumericAtomContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitParenthesisExp
    name: visitParenthesisExp
    fullName: visitParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitParenthesisExp?: (ctx: ParenthesisExpContext) => Result'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExp
    name: visitPrimaryExp
    fullName: visitPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'visitPrimaryExp?: (ctx: PrimaryExpContext) => Result'
      return:
        type:
          - '(ctx: PrimaryExpContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExpression
    name: visitPrimaryExpression
    fullName: visitPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitPrimaryExpression?: (ctx: PrimaryExpressionContext) => Result'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitStringAtom
    name: visitStringAtom
    fullName: visitStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitStringAtom?: (ctx: StringAtomContext) => Result'
      return:
        type:
          - '(ctx: StringAtomContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolation
    name: visitStringInterpolation
    fullName: visitStringInterpolation
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Visit a parse tree produced by
      `ExpressionAntlrParser.stringInterpolation`.
    optional: true
    syntax:
      content: 'visitStringInterpolation?: (ctx: StringInterpolationContext) => Result'
      return:
        type:
          - '(ctx: StringInterpolationContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: >-
      adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolationAtom
    name: visitStringInterpolationAtom
    fullName: visitStringInterpolationAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: >-
        visitStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        Result
      return:
        type:
          - '(ctx: StringInterpolationAtomContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitTerminal
    name: visitTerminal(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit a terminal node, and return a user-defined result of the operation.'
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type:
            - TerminalNode
          description: 'The <xref:TerminalNode> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the node.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitTextContent
    name: visitTextContent
    fullName: visitTextContent
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionAntlrParser.textContent`.
    optional: true
    syntax:
      content: 'visitTextContent?: (ctx: TextContentContext) => Result'
      return:
        type:
          - '(ctx: TextContentContext) => Result'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitUnaryOpExp
    name: visitUnaryOpExp
    fullName: visitUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'visitUnaryOpExp?: (ctx: UnaryOpExpContext) => Result'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => Result'
        description: ''
    package: adaptive-expressions

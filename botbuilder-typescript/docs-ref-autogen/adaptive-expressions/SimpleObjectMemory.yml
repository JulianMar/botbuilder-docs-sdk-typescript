### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.SimpleObjectMemory
    name: SimpleObjectMemory
    fullName: SimpleObjectMemory
    children:
      - adaptive-expressions.SimpleObjectMemory.getValue
      - adaptive-expressions.SimpleObjectMemory.setValue
      - adaptive-expressions.SimpleObjectMemory.constructor
      - adaptive-expressions.SimpleObjectMemory.toString
      - adaptive-expressions.SimpleObjectMemory.version
      - adaptive-expressions.SimpleObjectMemory.wrap
    langs:
      - typeScript
    type: class
    summary: Simple implement of MemoryInterface
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.getValue
    name: getValue(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getValue(path: string)'
      parameters:
        - id: path
          type:
            - string
          description: ''
      return:
        type:
          - any
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.setValue
    name: 'setValue(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      In this simple object scope, we don't allow you to set a path in which
      some parts in middle don't exist

      for example

      if you set dialog.a.b = x, but dialog.a don't exist, this will result in
      an error

      because we can't and shouldn't smart create structure in the middle

      you can implement a customzied Scope that support such behavior
    syntax:
      content: 'function setValue(path: string, input: any)'
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: input
          type:
            - any
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.constructor
    name: SimpleObjectMemory(any)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new SimpleObjectMemory(memory: any)'
      parameters:
        - id: memory
          type:
            - any
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.version
    name: version()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function version()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.SimpleObjectMemory.wrap
    name: wrap(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Transfer an common object to simple memory.
    syntax:
      content: 'static function wrap(obj: any)'
      parameters:
        - id: obj
          type:
            - any
          description: Common object.
      return:
        type:
          - adaptive-expressions.MemoryInterface
        description: Simple memory instance.
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.MemoryInterface
    name: MemoryInterface
    spec.typeScript:
      - name: MemoryInterface
        fullName: MemoryInterface
        uid: adaptive-expressions.MemoryInterface

### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ValueExpression
    name: ValueExpression
    fullName: ValueExpression
    children:
      - adaptive-expressions.ValueExpression.expression
      - adaptive-expressions.ValueExpression.getValue
      - adaptive-expressions.ValueExpression.setValue
      - adaptive-expressions.ValueExpression.toExpression
      - adaptive-expressions.ValueExpression.toString
      - adaptive-expressions.ValueExpression.tryGetValue
      - adaptive-expressions.ValueExpression.value
      - adaptive-expressions.ValueExpression.constructor
    langs:
      - typeScript
    type: class
    summary: >-
      Represents a property which is an object of any kind or a string
      expression.
    extends:
      name: adaptive-expressions.ExpressionProperty<any>
    package: adaptive-expressions
    remarks: >-
      If the value is

      - a string with '=' prefix then the string is treated as an expression to
      resolve to a string.

      - a string without '=' then value is treated as string with string
      interpolation.

      - You can escape the '=' prefix by putting a backslash.

      Examples:
          prop = "Hello @{user.name}" => "Hello Joe"
          prop = "=length(user.name)" => "3"
          prop = "=user.name" => "Joe"
          prop = "\=user" => "=user".
  - uid: adaptive-expressions.ValueExpression.expression
    name: expression
    fullName: expression
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'expression: Expression'
      return:
        type:
          - adaptive-expressions.Expression
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.getValue
    name: getValue(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the value.
    syntax:
      content: 'function getValue(data: object)'
      parameters:
        - id: data
          type:
            - object
          description: Data to use for expression binding.
      return:
        type:
          - any
        description: the value.
    package: adaptive-expressions
    remarks: An error will be thrown if value is an invalid expression.
  - uid: adaptive-expressions.ValueExpression.setValue
    name: setValue(any | string | Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setValue(value: any | string | Expression)'
      parameters:
        - id: value
          type:
            - any | string | adaptive-expressions.Expression
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.toExpression
    name: toExpression()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toExpression()
      parameters: []
      return:
        type:
          - adaptive-expressions.Expression
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.tryGetValue
    name: tryGetValue(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetValue(data: object)'
      parameters:
        - id: data
          type:
            - object
          description: ''
      return:
        type:
          - Object
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.value
    name: value
    fullName: value
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'value: any'
      return:
        type:
          - any
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ValueExpression.constructor
    name: ValueExpression(any | string | Expression)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ValueExpression(value?: any | string | Expression)'
      parameters:
        - id: value
          type:
            - any | string | adaptive-expressions.Expression
          description: ''
          optional: true
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.ExpressionProperty<any>
    name: ExpressionProperty<any>
    spec.typeScript:
      - name: ExpressionProperty
        fullName: ExpressionProperty
        uid: adaptive-expressions.ExpressionProperty
      - name: <any>
        fullName: <any>
  - uid: any | string | adaptive-expressions.Expression
    name: Expression
    spec.typeScript:
      - name: 'any | string | '
        fullName: 'any | string | '
      - name: Expression
        fullName: Expression
        uid: adaptive-expressions.Expression
  - uid: adaptive-expressions.Expression
    name: Expression
    spec.typeScript:
      - name: Expression
        fullName: Expression
        uid: adaptive-expressions.Expression

### YamlMime:TSType
name: FunctionUtils
uid: adaptive-expressions.FunctionUtils
package: adaptive-expressions
summary: Utility functions in AdaptiveExpression.
fullName: FunctionUtils
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: DefaultDateTimeFormat
    uid: adaptive-expressions.FunctionUtils.DefaultDateTimeFormat
    package: adaptive-expressions
    summary: The default date time format string.
    fullName: DefaultDateTimeFormat
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static DefaultDateTimeFormat: string =
        "YYYY-MM-DDTHH:mm:ss.SSS[Z]"
      return:
        type: string
        description: ''
methods:
  - name: 'apply((arg0: any[]) => any, VerifyExpression)'
    uid: adaptive-expressions.FunctionUtils.apply
    package: adaptive-expressions
    summary: >-
      Generate an expression delegate that applies function after verifying all
      children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function apply(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type: '(arg0: any[]) =&gt; any'
          description: Function to apply.
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Function to check each arg for validity.
      return:
        type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
        description: Delegate for evaluating an expression.
  - name: 'applySequence((arg0: any[]) => any, VerifyExpression)'
    uid: adaptive-expressions.FunctionUtils.applySequence
    package: adaptive-expressions
    summary: >-
      Generate an expression delegate that applies function on the accumulated
      value after verifying all children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function applySequence(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type: '(arg0: any[]) =&gt; any'
          description: Function to apply.
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Function to check each arg for validity.
      return:
        type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
        description: Delegate for evaluating an expression.
  - name: 'applySequenceWithError((arg0: any[]) => any, VerifyExpression)'
    uid: adaptive-expressions.FunctionUtils.applySequenceWithError
    package: adaptive-expressions
    summary: >-
      Generate an expression delegate that applies function on the accumulated
      value after verifying all children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function applySequenceWithError(func: (arg0: any[]) => any,
        verify?: VerifyExpression)
      parameters:
        - id: func
          type: '(arg0: any[]) =&gt; any'
          description: Function to apply.
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Function to check each arg for validity.
      return:
        type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
        description: Delegate for evaluating an expression.
  - name: 'applyWithError((arg0: any[]) => any, VerifyExpression)'
    uid: adaptive-expressions.FunctionUtils.applyWithError
    package: adaptive-expressions
    summary: >-
      Generate an expression delegate that applies function after verifying all
      children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function applyWithError(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type: '(arg0: any[]) =&gt; any'
          description: Function to apply.
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Function to check each arg for validity.
      return:
        type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
        description: Delegate for evaluating an expression.
  - name: >-
      applyWithOptionsAndError((arg0: unknown[], options: Options) => Object,
      VerifyExpression)
    uid: adaptive-expressions.FunctionUtils.applyWithOptionsAndError
    package: adaptive-expressions
    summary: >-
      Generate an expression delegate that applies function after verifying all
      children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function applyWithOptionsAndError(func: (arg0: unknown[],
        options: Options) => Object, verify?: VerifyExpression)
      parameters:
        - id: func
          type: '(arg0: unknown[], options: Options) =&gt; Object'
          description: Function to apply.
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Function to check each arg for validity.
      return:
        type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
        description: Delegate for evaluating an expression.
  - name: 'determineLocale(unknown[], number, string)'
    uid: adaptive-expressions.FunctionUtils.determineLocale
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function determineLocale(args: unknown[], maxArgsLength: number,
        locale: string)
      parameters:
        - id: args
          type: 'unknown[]'
          description: An array of arguments.
        - id: maxArgsLength
          type: number
          description: |
            The max length of a given function.
        - id: locale
          type: string
          description: A locale string
      return:
        type: string
        description: ''
  - name: 'evaluateChildren(Expression, MemoryInterface, Options, VerifyExpression)'
    uid: adaptive-expressions.FunctionUtils.evaluateChildren
    package: adaptive-expressions
    summary: Evaluate expression children and return them.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function evaluateChildren(expression: Expression, state:
        MemoryInterface, options: Options, verify?: VerifyExpression)
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression with children.
        - id: state
          type: <xref uid="adaptive-expressions.MemoryInterface" />
          description: Global state.
        - id: options
          type: <xref uid="adaptive-expressions.Options" />
          description: ''
        - id: verify
          type: <xref uid="adaptive-expressions.VerifyExpression" />
          description: Optional function to verify each child's result.
      return:
        type: Object
        description: List of child values or error message.
  - name: isNumber(any)
    uid: adaptive-expressions.FunctionUtils.isNumber
    package: adaptive-expressions
    summary: Is number helper function.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function isNumber(instance: any)'
      parameters:
        - id: instance
          type: any
          description: Input.
      return:
        type: boolean
        description: True if the input is a number.
  - name: timestampFormatter(string)
    uid: adaptive-expressions.FunctionUtils.timestampFormatter
    package: adaptive-expressions
    summary: 'Timestamp formatter, convert C# datetime to moment js format.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function timestampFormatter(formatter: string)'
      parameters:
        - id: formatter
          type: string
          description: |
            C# datetime format
      return:
        type: string
        description: ''
  - name: 'tryAccumulatePath(Expression, MemoryInterface, Options)'
    uid: adaptive-expressions.FunctionUtils.tryAccumulatePath
    package: adaptive-expressions
    summary: State object for resolving memory paths.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function tryAccumulatePath(expression: Expression, state:
        MemoryInterface, options: Options)
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression.
        - id: state
          type: <xref uid="adaptive-expressions.MemoryInterface" />
          description: Scope.
        - id: options
          type: <xref uid="adaptive-expressions.Options" />
          description: Options used in evaluation.
      return:
        type: Object
        description: >-
          Return the accumulated path and the expression left unable to
          accumulate.
  - name: 'validateArityAndAnyType(Expression, number, number, ReturnType)'
    uid: adaptive-expressions.FunctionUtils.validateArityAndAnyType
    package: adaptive-expressions
    summary: >-
      Validate that expression has a certain number of children that are of any
      of the supported types.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function validateArityAndAnyType(expression: Expression,
        minArity: number, maxArity: number, returnType: ReturnType)
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression to validate.
        - id: minArity
          type: number
          description: Minimum number of children.
        - id: maxArity
          type: number
          description: Maximum number of children.
        - id: returnType
          type: <xref uid="adaptive-expressions.ReturnType" />
          description: >
            Allowed return types for children.

            If a child has a return type of Object then validation will happen
            at runtime.
  - name: validateAtLeastOne(Expression)
    uid: adaptive-expressions.FunctionUtils.validateAtLeastOne
    package: adaptive-expressions
    summary: Validate at least 1 argument of any type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateAtLeastOne(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateBinary(Expression)
    uid: adaptive-expressions.FunctionUtils.validateBinary
    package: adaptive-expressions
    summary: Validate there are two children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateBinary(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateBinaryNumber(Expression)
    uid: adaptive-expressions.FunctionUtils.validateBinaryNumber
    package: adaptive-expressions
    summary: Validate 2 numeric arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateBinaryNumber(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateBinaryNumberOrString(Expression)
    uid: adaptive-expressions.FunctionUtils.validateBinaryNumberOrString
    package: adaptive-expressions
    summary: Validate there are 2 numeric or string arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateBinaryNumberOrString(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateNumber(Expression)
    uid: adaptive-expressions.FunctionUtils.validateNumber
    package: adaptive-expressions
    summary: Validate 1 or more numeric arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateNumber(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: 'validateOrder(Expression, ReturnType[], ReturnType[])'
    uid: adaptive-expressions.FunctionUtils.validateOrder
    package: adaptive-expressions
    summary: Validate the number and type of arguments to a function.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function validateOrder(expression: Expression, optional:
        ReturnType[], types: ReturnType[])
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression to validate.
        - id: optional
          type: '<xref uid="adaptive-expressions.ReturnType" />[]'
          description: Optional types in order.
        - id: types
          type: '<xref uid="adaptive-expressions.ReturnType" />[]'
          description: |
            Expected types in order.
  - name: validateString(Expression)
    uid: adaptive-expressions.FunctionUtils.validateString
    package: adaptive-expressions
    summary: Validate 1 or more string arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateString(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateTwoOrMoreThanTwoNumbers(Expression)
    uid: adaptive-expressions.FunctionUtils.validateTwoOrMoreThanTwoNumbers
    package: adaptive-expressions
    summary: Validate 2 or more than 2 numeric arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateTwoOrMoreThanTwoNumbers(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnary(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnary
    package: adaptive-expressions
    summary: Validate there is a single argument.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnary(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnaryBoolean(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnaryBoolean
    package: adaptive-expressions
    summary: Validate there is a single boolean argument.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnaryBoolean(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnaryNumber(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnaryNumber
    package: adaptive-expressions
    summary: Validate there is a single argument.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnaryNumber(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnaryOrBinaryNumber(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnaryOrBinaryNumber
    package: adaptive-expressions
    summary: Validate 1 or 2 numeric arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnaryOrBinaryNumber(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnaryOrBinaryString(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnaryOrBinaryString
    package: adaptive-expressions
    summary: Validate there is one or two string arguments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnaryOrBinaryString(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: validateUnaryString(Expression)
    uid: adaptive-expressions.FunctionUtils.validateUnaryString
    package: adaptive-expressions
    summary: Validate there is a single string argument.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function validateUnaryString(expression: Expression)'
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: |
            Expression to validate.
  - name: 'verifyBoolean(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyBoolean
    package: adaptive-expressions
    summary: Verify value is boolean.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyBoolean(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyContainer(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyContainer
    package: adaptive-expressions
    summary: Verify value contains elements.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyContainer(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyInteger(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyInteger
    package: adaptive-expressions
    summary: Verify value is an integer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyInteger(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyList(any, Expression)'
    uid: adaptive-expressions.FunctionUtils.verifyList
    package: adaptive-expressions
    summary: Verify value is an list.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function verifyList(value: any, expression: Expression)'
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyNotNull(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNotNull
    package: adaptive-expressions
    summary: Verify value is not null or undefined.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNotNull(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if valid.
  - name: 'verifyNumber(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNumber
    package: adaptive-expressions
    summary: Verify value is numeric.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNumber(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyNumberOrNumericList(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNumberOrNumericList
    package: adaptive-expressions
    summary: Verify value is numeric.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNumberOrNumericList(value: any, expression:
        Expression, _: number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyNumberOrString(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNumberOrString
    package: adaptive-expressions
    summary: Verify value is a number or string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNumberOrString(value: any, expression: Expression,
        _: number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyNumberOrStringOrNull(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNumberOrStringOrNull
    package: adaptive-expressions
    summary: Verify value is a number or string or null.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNumberOrStringOrNull(value: any, expression:
        Expression, _: number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyNumericList(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyNumericList
    package: adaptive-expressions
    summary: Verify value is numeric list.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyNumericList(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyString(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyString
    package: adaptive-expressions
    summary: Verify value is a string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyString(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.
  - name: 'verifyStringOrNull(any, Expression, number)'
    uid: adaptive-expressions.FunctionUtils.verifyStringOrNull
    package: adaptive-expressions
    summary: Verify an object is neither a string nor null.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function verifyStringOrNull(value: any, expression: Expression,
        _: number)
      parameters:
        - id: value
          type: any
          description: Value to check.
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression that led to value.
        - id: _
          type: number
          description: ''
      return:
        type: string | undefined
        description: Error or undefined if invalid.

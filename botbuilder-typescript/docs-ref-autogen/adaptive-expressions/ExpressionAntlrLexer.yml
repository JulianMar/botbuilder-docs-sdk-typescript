### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ExpressionAntlrLexer
    name: ExpressionAntlrLexer
    fullName: ExpressionAntlrLexer
    children:
      - adaptive-expressions.ExpressionAntlrLexer.action
      - adaptive-expressions.ExpressionAntlrLexer.addErrorListener
      - adaptive-expressions.ExpressionAntlrLexer.ARROW
      - adaptive-expressions.ExpressionAntlrLexer.ASTERISK
      - adaptive-expressions.ExpressionAntlrLexer.atn
      - adaptive-expressions.ExpressionAntlrLexer.channel
      - adaptive-expressions.ExpressionAntlrLexer.channelNames
      - adaptive-expressions.ExpressionAntlrLexer.channelNames
      - adaptive-expressions.ExpressionAntlrLexer.charIndex
      - adaptive-expressions.ExpressionAntlrLexer.charPositionInLine
      - adaptive-expressions.ExpressionAntlrLexer.CLOSE_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.CLOSE_CURLY_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.COLON
      - adaptive-expressions.ExpressionAntlrLexer.COMMA
      - adaptive-expressions.ExpressionAntlrLexer.DEFAULT_MODE
      - adaptive-expressions.ExpressionAntlrLexer.DEFAULT_TOKEN_CHANNEL
      - adaptive-expressions.ExpressionAntlrLexer.DOT
      - adaptive-expressions.ExpressionAntlrLexer.DOUBLE_AND
      - adaptive-expressions.ExpressionAntlrLexer.DOUBLE_EQUAL
      - adaptive-expressions.ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER
      - adaptive-expressions.ExpressionAntlrLexer.emit_1
      - adaptive-expressions.ExpressionAntlrLexer.emit
      - adaptive-expressions.ExpressionAntlrLexer.emitEOF
      - adaptive-expressions.ExpressionAntlrLexer.EOF
      - adaptive-expressions.ExpressionAntlrLexer.ESCAPE_CHARACTER
      - adaptive-expressions.ExpressionAntlrLexer.constructor
      - adaptive-expressions.ExpressionAntlrLexer.getAllTokens
      - adaptive-expressions.ExpressionAntlrLexer.getCharErrorDisplay
      - adaptive-expressions.ExpressionAntlrLexer.getErrorDisplay
      - adaptive-expressions.ExpressionAntlrLexer.getErrorHeader
      - adaptive-expressions.ExpressionAntlrLexer.getErrorListenerDispatch
      - adaptive-expressions.ExpressionAntlrLexer.getErrorListeners
      - adaptive-expressions.ExpressionAntlrLexer.getRuleIndexMap
      - adaptive-expressions.ExpressionAntlrLexer.getTokenType
      - adaptive-expressions.ExpressionAntlrLexer.getTokenTypeMap
      - adaptive-expressions.ExpressionAntlrLexer.grammarFileName
      - adaptive-expressions.ExpressionAntlrLexer.HIDDEN
      - adaptive-expressions.ExpressionAntlrLexer.IDENTIFIER
      - adaptive-expressions.ExpressionAntlrLexer.ignoreWS
      - adaptive-expressions.ExpressionAntlrLexer.inputStream
      - adaptive-expressions.ExpressionAntlrLexer.interpreter
      - adaptive-expressions.ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE
      - adaptive-expressions.ExpressionAntlrLexer.LESS_OR_EQUAl
      - adaptive-expressions.ExpressionAntlrLexer.LESS_THAN
      - adaptive-expressions.ExpressionAntlrLexer.line
      - adaptive-expressions.ExpressionAntlrLexer.MAX_CHAR_VALUE
      - adaptive-expressions.ExpressionAntlrLexer.MIN_CHAR_VALUE
      - adaptive-expressions.ExpressionAntlrLexer.mode
      - adaptive-expressions.ExpressionAntlrLexer.modeNames
      - adaptive-expressions.ExpressionAntlrLexer.modeNames
      - adaptive-expressions.ExpressionAntlrLexer.MORE
      - adaptive-expressions.ExpressionAntlrLexer.more
      - adaptive-expressions.ExpressionAntlrLexer.MORE_OR_EQUAL
      - adaptive-expressions.ExpressionAntlrLexer.MORE_THAN
      - adaptive-expressions.ExpressionAntlrLexer.NEWLINE
      - adaptive-expressions.ExpressionAntlrLexer.nextToken
      - adaptive-expressions.ExpressionAntlrLexer.NON
      - adaptive-expressions.ExpressionAntlrLexer.notifyListeners
      - adaptive-expressions.ExpressionAntlrLexer.NOT_EQUAL
      - adaptive-expressions.ExpressionAntlrLexer.NUMBER
      - adaptive-expressions.ExpressionAntlrLexer.OPEN_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.OPEN_CURLY_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.OPEN_SQUARE_BRACKET
      - adaptive-expressions.ExpressionAntlrLexer.parseInfo
      - adaptive-expressions.ExpressionAntlrLexer.PERCENT
      - adaptive-expressions.ExpressionAntlrLexer.PLUS
      - adaptive-expressions.ExpressionAntlrLexer.popMode
      - adaptive-expressions.ExpressionAntlrLexer.precpred
      - adaptive-expressions.ExpressionAntlrLexer.pushMode
      - adaptive-expressions.ExpressionAntlrLexer.recover_1
      - adaptive-expressions.ExpressionAntlrLexer.recover
      - adaptive-expressions.ExpressionAntlrLexer.removeErrorListener
      - adaptive-expressions.ExpressionAntlrLexer.removeErrorListeners
      - adaptive-expressions.ExpressionAntlrLexer.reset
      - adaptive-expressions.ExpressionAntlrLexer.reset_1
      - adaptive-expressions.ExpressionAntlrLexer.ruleNames
      - adaptive-expressions.ExpressionAntlrLexer.ruleNames
      - adaptive-expressions.ExpressionAntlrLexer.sempred
      - adaptive-expressions.ExpressionAntlrLexer.serializedATN
      - adaptive-expressions.ExpressionAntlrLexer.SINGLE_AND
      - adaptive-expressions.ExpressionAntlrLexer.SKIP
      - adaptive-expressions.ExpressionAntlrLexer.skip
      - adaptive-expressions.ExpressionAntlrLexer.SLASH
      - adaptive-expressions.ExpressionAntlrLexer.sourceName
      - adaptive-expressions.ExpressionAntlrLexer.state
      - adaptive-expressions.ExpressionAntlrLexer.STRING
      - adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_MODE
      - adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_START
      - adaptive-expressions.ExpressionAntlrLexer.SUBSTRACT
      - adaptive-expressions.ExpressionAntlrLexer.TEMPLATE
      - adaptive-expressions.ExpressionAntlrLexer.text
      - adaptive-expressions.ExpressionAntlrLexer.TEXT_CONTENT
      - adaptive-expressions.ExpressionAntlrLexer.token
      - adaptive-expressions.ExpressionAntlrLexer.tokenFactory
      - adaptive-expressions.ExpressionAntlrLexer.type
      - adaptive-expressions.ExpressionAntlrLexer.vocabulary
      - adaptive-expressions.ExpressionAntlrLexer.VOCABULARY
      - adaptive-expressions.ExpressionAntlrLexer.WHITESPACE
      - adaptive-expressions.ExpressionAntlrLexer.XOR
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Lexer
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.action
    name: 'action(RuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type:
            - RuleContext
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.addErrorListener
    name: addErrorListener(ANTLRErrorListener<number>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<number>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ARROW
    name: ARROW
    fullName: ARROW
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ARROW: 27 = 27'
      return:
        type:
          - '27'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ASTERISK
    name: ASTERISK
    fullName: ASTERISK
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ASTERISK: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.channel
    name: channel
    fullName: channel
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'channel: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.channelNames
    name: channelNames
    fullName: channelNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'channelNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.channelNames
    name: channelNames
    fullName: channelNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static channelNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.charIndex
    name: charIndex
    fullName: charIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: What is the index of the current character of lookahead?
    syntax:
      content: 'charIndex: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.charPositionInLine
    name: charPositionInLine
    fullName: charPositionInLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'charPositionInLine: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_BRACKET
    name: CLOSE_BRACKET
    fullName: CLOSE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CLOSE_BRACKET: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_CURLY_BRACKET
    name: CLOSE_CURLY_BRACKET
    fullName: CLOSE_CURLY_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET
    name: CLOSE_SQUARE_BRACKET
    fullName: CLOSE_SQUARE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.COLON
    name: COLON
    fullName: COLON
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static COLON: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.COMMA
    name: COMMA
    fullName: COMMA
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static COMMA: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DEFAULT_MODE
    name: DEFAULT_MODE
    fullName: DEFAULT_MODE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DEFAULT_TOKEN_CHANNEL
    name: DEFAULT_TOKEN_CHANNEL
    fullName: DEFAULT_TOKEN_CHANNEL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DOT
    name: DOT
    fullName: DOT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DOT: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_AND
    name: DOUBLE_AND
    fullName: DOUBLE_AND
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DOUBLE_AND: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_EQUAL
    name: DOUBLE_EQUAL
    fullName: DOUBLE_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DOUBLE_EQUAL: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER
    name: DOUBLE_VERTICAL_CYLINDER
    fullName: DOUBLE_VERTICAL_CYLINDER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.emit_1
    name: emit()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    syntax:
      content: function emit()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.emit
    name: emit(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type:
            - Token
          description: ''
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.emitEOF
    name: emitEOF()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function emitEOF()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ESCAPE_CHARACTER
    name: ESCAPE_CHARACTER
    fullName: ESCAPE_CHARACTER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ESCAPE_CHARACTER: 35 = 35'
      return:
        type:
          - '35'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.constructor
    name: ExpressionAntlrLexer(CharStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ExpressionAntlrLexer(input: CharStream)'
      parameters:
        - id: input
          type:
            - CharStream
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getAllTokens
    name: getAllTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    syntax:
      content: function getAllTokens()
      parameters: []
      return:
        type:
          - 'Token[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getCharErrorDisplay
    name: getCharErrorDisplay(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getErrorDisplay
    name: getErrorDisplay(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type:
            - string | number
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ANTLRErrorListener<number>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<number>>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'grammarFileName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.HIDDEN
    name: HIDDEN
    fullName: HIDDEN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static HIDDEN: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.IDENTIFIER
    name: IDENTIFIER
    fullName: IDENTIFIER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static IDENTIFIER: 30 = 30'
      return:
        type:
          - '30'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ignoreWS
    name: ignoreWS
    fullName: ignoreWS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ignoreWS: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the char stream and reset the lexer
    syntax:
      content: 'inputStream: CharStream'
      return:
        type:
          - CharStream
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type:
          - LexerATNSimulator
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE
    name: INVALID_TOKEN_DEFAULT_MODE
    fullName: INVALID_TOKEN_DEFAULT_MODE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static INVALID_TOKEN_DEFAULT_MODE: 33 = 33'
      return:
        type:
          - '33'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.LESS_OR_EQUAl
    name: LESS_OR_EQUAl
    fullName: LESS_OR_EQUAl
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LESS_OR_EQUAl: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.LESS_THAN
    name: LESS_THAN
    fullName: LESS_THAN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LESS_THAN: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.line
    name: line
    fullName: line
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'line: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.MAX_CHAR_VALUE
    name: MAX_CHAR_VALUE
    fullName: MAX_CHAR_VALUE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.MIN_CHAR_VALUE
    name: MIN_CHAR_VALUE
    fullName: MIN_CHAR_VALUE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.mode
    name: mode(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.modeNames
    name: modeNames
    fullName: modeNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'modeNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.modeNames
    name: modeNames
    fullName: modeNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static modeNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.MORE
    name: MORE
    fullName: MORE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MORE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.more
    name: more()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function more()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.MORE_OR_EQUAL
    name: MORE_OR_EQUAL
    fullName: MORE_OR_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MORE_OR_EQUAL: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.MORE_THAN
    name: MORE_THAN
    fullName: MORE_THAN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MORE_THAN: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.NEWLINE
    name: NEWLINE
    fullName: NEWLINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NEWLINE: 31 = 31'
      return:
        type:
          - '31'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.nextToken
    name: nextToken()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    syntax:
      content: function nextToken()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.NON
    name: NON
    fullName: NON
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NON: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.notifyListeners
    name: notifyListeners(LexerNoViableAltException)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type:
            - LexerNoViableAltException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.NOT_EQUAL
    name: NOT_EQUAL
    fullName: NOT_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NOT_EQUAL: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.NUMBER
    name: NUMBER
    fullName: NUMBER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static NUMBER: 28 = 28'
      return:
        type:
          - '28'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_BRACKET
    name: OPEN_BRACKET
    fullName: OPEN_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OPEN_BRACKET: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_CURLY_BRACKET
    name: OPEN_CURLY_BRACKET
    fullName: OPEN_CURLY_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_SQUARE_BRACKET
    name: OPEN_SQUARE_BRACKET
    fullName: OPEN_SQUARE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.PERCENT
    name: PERCENT
    fullName: PERCENT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static PERCENT: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.PLUS
    name: PLUS
    fullName: PLUS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static PLUS: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.popMode
    name: popMode()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function popMode()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.precpred
    name: 'precpred(RuleContext | undefined, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.pushMode
    name: pushMode(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.recover_1
    name: recover(LexerNoViableAltException)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type:
            - LexerNoViableAltException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.recover
    name: recover(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type:
            - RecognitionException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<number>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<number>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function reset()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static ruleNames: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.sempred
    name: 'sempred(RuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type:
            - RuleContext
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: predIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'serializedATN: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.SINGLE_AND
    name: SINGLE_AND
    fullName: SINGLE_AND
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SINGLE_AND: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.SKIP
    name: SKIP
    fullName: SKIP
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SKIP: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.skip
    name: skip()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    syntax:
      content: function skip()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.SLASH
    name: SLASH
    fullName: SLASH
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SLASH: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.STRING
    name: STRING
    fullName: STRING
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static STRING: 32 = 32'
      return:
        type:
          - '32'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_MODE
    name: STRING_INTERPOLATION_MODE
    fullName: STRING_INTERPOLATION_MODE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static STRING_INTERPOLATION_MODE: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_START
    name: STRING_INTERPOLATION_START
    fullName: STRING_INTERPOLATION_START
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static STRING_INTERPOLATION_START: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.SUBSTRACT
    name: SUBSTRACT
    fullName: SUBSTRACT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SUBSTRACT: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.TEMPLATE
    name: TEMPLATE
    fullName: TEMPLATE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static TEMPLATE: 34 = 34'
      return:
        type:
          - '34'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.text
    name: text
    fullName: text
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    syntax:
      content: 'text: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.TEXT_CONTENT
    name: TEXT_CONTENT
    fullName: TEXT_CONTENT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static TEXT_CONTENT: 36 = 36'
      return:
        type:
          - '36'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.token
    name: token
    fullName: token
    children: []
    langs:
      - typeScript
    type: property
    summary: Override if emitting multiple tokens.
    syntax:
      content: 'token: Token | undefined'
      return:
        type:
          - Token | undefined
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.type
    name: type
    fullName: type
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'type: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'vocabulary: Vocabulary'
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static VOCABULARY: Vocabulary'
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.WHITESPACE
    name: WHITESPACE
    fullName: WHITESPACE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static WHITESPACE: 29 = 29'
      return:
        type:
          - '29'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrLexer.XOR
    name: XOR
    fullName: XOR
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static XOR: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions

### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.FunctionTable
    name: FunctionTable
    fullName: FunctionTable
    children:
      - adaptive-expressions.FunctionTable.add
      - adaptive-expressions.FunctionTable.add_2
      - adaptive-expressions.FunctionTable.add_1
      - adaptive-expressions.FunctionTable.clear
      - adaptive-expressions.FunctionTable.delete
      - adaptive-expressions.FunctionTable.entries
      - adaptive-expressions.FunctionTable.forEach
      - adaptive-expressions.FunctionTable.get
      - adaptive-expressions.FunctionTable.has
      - adaptive-expressions.FunctionTable.isReadOnly
      - adaptive-expressions.FunctionTable.keys
      - adaptive-expressions.FunctionTable.set
      - adaptive-expressions.FunctionTable.size
      - adaptive-expressions.FunctionTable.values
    langs:
      - typeScript
    type: class
    summary: >-
      FunctionTable is a dictionary which merges BuiltinFunctions.Functions with
      a CustomDictionary.
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.add
    name: add(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(item: Object)'
      parameters:
        - id: item
          type:
            - Object
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.add_2
    name: 'add(string, customFunction)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(key: string, value: customFunction)'
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: value
          type:
            - customFunction
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.add_1
    name: 'add(string, ExpressionEvaluator)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(key: string, value: ExpressionEvaluator)'
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: value
          type:
            - adaptive-expressions.ExpressionEvaluator
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.clear
    name: clear()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clear()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.delete
    name: delete(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function delete(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.entries
    name: entries()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function entries()
      parameters: []
      return:
        type:
          - IterableIterator<Object>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.forEach
    name: >-
      forEach((value: ExpressionEvaluator, key: string, map: Map<string,
      ExpressionEvaluator>) => void, any)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forEach(_callbackfn: (value: ExpressionEvaluator, key: string,
        map: Map<string, ExpressionEvaluator>) => void, thisArg?: any)
      parameters:
        - id: _callbackfn
          type:
            - >-
              (value: ExpressionEvaluator, key: string, map: Map<string,
              ExpressionEvaluator>) => void
          description: ''
        - id: thisArg
          type:
            - any
          description: ''
          optional: true
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.get
    name: get(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - adaptive-expressions.ExpressionEvaluator
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.has
    name: has(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function has(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.isReadOnly
    name: isReadOnly
    fullName: isReadOnly
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isReadOnly
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.keys
    name: keys()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function keys()
      parameters: []
      return:
        type:
          - IterableIterator<string>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.set
    name: 'set(string, ExpressionEvaluator)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function set(key: string, value: ExpressionEvaluator)'
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: value
          type:
            - adaptive-expressions.ExpressionEvaluator
          description: ''
      return:
        type:
          - this
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.size
    name: size
    fullName: size
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number size
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.FunctionTable.values
    name: values()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function values()
      parameters: []
      return:
        type:
          - IterableIterator<adaptive-expressions.ExpressionEvaluator>
        description: ''
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.ExpressionEvaluator
    name: ExpressionEvaluator
    spec.typeScript:
      - name: ExpressionEvaluator
        fullName: ExpressionEvaluator
        uid: adaptive-expressions.ExpressionEvaluator
  - uid: IterableIterator<adaptive-expressions.ExpressionEvaluator>
    name: ExpressionEvaluator>
    spec.typeScript:
      - name: IterableIterator<
        fullName: IterableIterator<
      - name: ExpressionEvaluator
        fullName: ExpressionEvaluator
        uid: adaptive-expressions.ExpressionEvaluator
      - name: '>'
        fullName: '>'

### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ExpressionAntlrParser
    name: ExpressionAntlrParser
    fullName: ExpressionAntlrParser
    children:
      - adaptive-expressions.ExpressionAntlrParser.action
      - adaptive-expressions.ExpressionAntlrParser.addErrorListener
      - adaptive-expressions.ExpressionAntlrParser.addParseListener
      - adaptive-expressions.ExpressionAntlrParser.argsList
      - adaptive-expressions.ExpressionAntlrParser.ARROW
      - adaptive-expressions.ExpressionAntlrParser.ASTERISK
      - adaptive-expressions.ExpressionAntlrParser.atn
      - adaptive-expressions.ExpressionAntlrParser.buildParseTree
      - adaptive-expressions.ExpressionAntlrParser.CLOSE_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.CLOSE_CURLY_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.CLOSE_SQUARE_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.COLON
      - adaptive-expressions.ExpressionAntlrParser.COMMA
      - adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern
      - adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern_1
      - adaptive-expressions.ExpressionAntlrParser.consume
      - adaptive-expressions.ExpressionAntlrParser.context
      - adaptive-expressions.ExpressionAntlrParser.createErrorNode
      - adaptive-expressions.ExpressionAntlrParser.createTerminalNode
      - adaptive-expressions.ExpressionAntlrParser.currentToken
      - adaptive-expressions.ExpressionAntlrParser.DOT
      - adaptive-expressions.ExpressionAntlrParser.DOUBLE_AND
      - adaptive-expressions.ExpressionAntlrParser.DOUBLE_EQUAL
      - adaptive-expressions.ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER
      - adaptive-expressions.ExpressionAntlrParser.dumpDFA
      - adaptive-expressions.ExpressionAntlrParser.enterLeftFactoredRule
      - adaptive-expressions.ExpressionAntlrParser.enterOuterAlt
      - adaptive-expressions.ExpressionAntlrParser.enterRecursionRule
      - adaptive-expressions.ExpressionAntlrParser.enterRule
      - adaptive-expressions.ExpressionAntlrParser.EOF
      - adaptive-expressions.ExpressionAntlrParser.errorHandler
      - adaptive-expressions.ExpressionAntlrParser.ESCAPE_CHARACTER
      - adaptive-expressions.ExpressionAntlrParser.exitRule
      - adaptive-expressions.ExpressionAntlrParser.expression
      - adaptive-expressions.ExpressionAntlrParser.expression_1
      - adaptive-expressions.ExpressionAntlrParser.constructor
      - adaptive-expressions.ExpressionAntlrParser.file
      - adaptive-expressions.ExpressionAntlrParser.getATNWithBypassAlts
      - adaptive-expressions.ExpressionAntlrParser.getDFAStrings
      - adaptive-expressions.ExpressionAntlrParser.getErrorHeader
      - adaptive-expressions.ExpressionAntlrParser.getErrorListenerDispatch
      - adaptive-expressions.ExpressionAntlrParser.getErrorListeners
      - adaptive-expressions.ExpressionAntlrParser.getExpectedTokens
      - >-
        adaptive-expressions.ExpressionAntlrParser.getExpectedTokensWithinCurrentRule
      - adaptive-expressions.ExpressionAntlrParser.getInvokingContext
      - adaptive-expressions.ExpressionAntlrParser.getParseListeners
      - adaptive-expressions.ExpressionAntlrParser.getRuleIndex
      - adaptive-expressions.ExpressionAntlrParser.getRuleIndexMap
      - adaptive-expressions.ExpressionAntlrParser.getRuleInvocationStack
      - adaptive-expressions.ExpressionAntlrParser.getTokenType
      - adaptive-expressions.ExpressionAntlrParser.getTokenTypeMap
      - adaptive-expressions.ExpressionAntlrParser.grammarFileName
      - adaptive-expressions.ExpressionAntlrParser.IDENTIFIER
      - adaptive-expressions.ExpressionAntlrParser.inContext
      - adaptive-expressions.ExpressionAntlrParser.inputStream
      - adaptive-expressions.ExpressionAntlrParser.interpreter
      - adaptive-expressions.ExpressionAntlrParser.INVALID_TOKEN_DEFAULT_MODE
      - adaptive-expressions.ExpressionAntlrParser.isExpectedToken
      - adaptive-expressions.ExpressionAntlrParser.isMatchedEOF
      - adaptive-expressions.ExpressionAntlrParser.isTrace
      - adaptive-expressions.ExpressionAntlrParser.key
      - adaptive-expressions.ExpressionAntlrParser.keyValuePair
      - adaptive-expressions.ExpressionAntlrParser.keyValuePairList
      - adaptive-expressions.ExpressionAntlrParser.lambda
      - adaptive-expressions.ExpressionAntlrParser.LESS_OR_EQUAl
      - adaptive-expressions.ExpressionAntlrParser.LESS_THAN
      - adaptive-expressions.ExpressionAntlrParser.match
      - adaptive-expressions.ExpressionAntlrParser.matchWildcard
      - adaptive-expressions.ExpressionAntlrParser.MORE_OR_EQUAL
      - adaptive-expressions.ExpressionAntlrParser.MORE_THAN
      - adaptive-expressions.ExpressionAntlrParser.NEWLINE
      - adaptive-expressions.ExpressionAntlrParser.NON
      - adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners
      - adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners_1
      - adaptive-expressions.ExpressionAntlrParser.NOT_EQUAL
      - adaptive-expressions.ExpressionAntlrParser.NUMBER
      - adaptive-expressions.ExpressionAntlrParser.numberOfSyntaxErrors
      - adaptive-expressions.ExpressionAntlrParser.OPEN_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.OPEN_CURLY_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.OPEN_SQUARE_BRACKET
      - adaptive-expressions.ExpressionAntlrParser.parseInfo
      - adaptive-expressions.ExpressionAntlrParser.PERCENT
      - adaptive-expressions.ExpressionAntlrParser.PLUS
      - adaptive-expressions.ExpressionAntlrParser.precedence
      - adaptive-expressions.ExpressionAntlrParser.precpred
      - adaptive-expressions.ExpressionAntlrParser.primaryExpression
      - adaptive-expressions.ExpressionAntlrParser.primaryExpression_1
      - adaptive-expressions.ExpressionAntlrParser.pushNewRecursionContext
      - adaptive-expressions.ExpressionAntlrParser.removeErrorListener
      - adaptive-expressions.ExpressionAntlrParser.removeErrorListeners
      - adaptive-expressions.ExpressionAntlrParser.removeParseListener
      - adaptive-expressions.ExpressionAntlrParser.removeParseListeners
      - adaptive-expressions.ExpressionAntlrParser.reset
      - adaptive-expressions.ExpressionAntlrParser.reset_1
      - adaptive-expressions.ExpressionAntlrParser.ruleContext
      - adaptive-expressions.ExpressionAntlrParser.ruleNames
      - adaptive-expressions.ExpressionAntlrParser.ruleNames
      - adaptive-expressions.ExpressionAntlrParser.RULE_argsList
      - adaptive-expressions.ExpressionAntlrParser.RULE_expression
      - adaptive-expressions.ExpressionAntlrParser.RULE_file
      - adaptive-expressions.ExpressionAntlrParser.RULE_key
      - adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePair
      - adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePairList
      - adaptive-expressions.ExpressionAntlrParser.RULE_lambda
      - adaptive-expressions.ExpressionAntlrParser.RULE_primaryExpression
      - adaptive-expressions.ExpressionAntlrParser.RULE_stringInterpolation
      - adaptive-expressions.ExpressionAntlrParser.RULE_textContent
      - adaptive-expressions.ExpressionAntlrParser.sempred
      - adaptive-expressions.ExpressionAntlrParser.serializedATN
      - adaptive-expressions.ExpressionAntlrParser.setProfile
      - adaptive-expressions.ExpressionAntlrParser.SINGLE_AND
      - adaptive-expressions.ExpressionAntlrParser.SLASH
      - adaptive-expressions.ExpressionAntlrParser.sourceName
      - adaptive-expressions.ExpressionAntlrParser.state
      - adaptive-expressions.ExpressionAntlrParser.STRING
      - adaptive-expressions.ExpressionAntlrParser.stringInterpolation
      - adaptive-expressions.ExpressionAntlrParser.STRING_INTERPOLATION_START
      - adaptive-expressions.ExpressionAntlrParser.SUBSTRACT
      - adaptive-expressions.ExpressionAntlrParser.TEMPLATE
      - adaptive-expressions.ExpressionAntlrParser.textContent
      - adaptive-expressions.ExpressionAntlrParser.TEXT_CONTENT
      - adaptive-expressions.ExpressionAntlrParser.tokenFactory
      - adaptive-expressions.ExpressionAntlrParser.unrollRecursionContexts
      - adaptive-expressions.ExpressionAntlrParser.VOCABULARY
      - adaptive-expressions.ExpressionAntlrParser.vocabulary
      - adaptive-expressions.ExpressionAntlrParser.WHITESPACE
      - adaptive-expressions.ExpressionAntlrParser.XOR
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Parser
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.action
    name: 'action(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.addErrorListener
    name: addErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.addParseListener
    name: addParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to add
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.argsList
    name: argsList()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function argsList()
      parameters: []
      return:
        type:
          - adaptive-expressions.ArgsListContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ARROW
    name: ARROW
    fullName: ARROW
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ARROW: 27 = 27'
      return:
        type:
          - '27'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ASTERISK
    name: ASTERISK
    fullName: ASTERISK
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ASTERISK: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.buildParseTree
    name: buildParseTree
    fullName: buildParseTree
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_BRACKET
    name: CLOSE_BRACKET
    fullName: CLOSE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CLOSE_BRACKET: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_CURLY_BRACKET
    name: CLOSE_CURLY_BRACKET
    fullName: CLOSE_CURLY_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_SQUARE_BRACKET
    name: CLOSE_SQUARE_BRACKET
    fullName: CLOSE_SQUARE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.COLON
    name: COLON
    fullName: COLON
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static COLON: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.COMMA
    name: COMMA
    fullName: COMMA
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static COMMA: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern
    name: 'compileParseTreePattern(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern_1
    name: 'compileParseTreePattern(string, number, Lexer)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type:
            - string
          description: ''
        - id: patternRuleIndex
          type:
            - number
          description: ''
        - id: lexer
          type:
            - Lexer
          description: ''
          optional: true
      return:
        type:
          - Promise<ParseTreePattern>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.consume
    name: consume()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    syntax:
      content: function consume()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.createErrorNode
    name: 'createErrorNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - ErrorNode
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.createTerminalNode
    name: 'createTerminalNode(ParserRuleContext, Token)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    syntax:
      content: 'function createTerminalNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type:
            - ParserRuleContext
          description: ''
        - id: t
          type:
            - Token
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.currentToken
    name: currentToken
    fullName: currentToken
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    syntax:
      content: 'currentToken: Token'
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.DOT
    name: DOT
    fullName: DOT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DOT: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_AND
    name: DOUBLE_AND
    fullName: DOUBLE_AND
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DOUBLE_AND: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_EQUAL
    name: DOUBLE_EQUAL
    fullName: DOUBLE_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DOUBLE_EQUAL: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER
    name: DOUBLE_VERTICAL_CYLINDER
    fullName: DOUBLE_VERTICAL_CYLINDER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.dumpDFA
    name: dumpDFA()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function dumpDFA()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.enterLeftFactoredRule
    name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.enterOuterAlt
    name: 'enterOuterAlt(ParserRuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: altNum
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.enterRecursionRule
    name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: precedence
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.enterRule
    name: 'enterRule(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.errorHandler
    name: errorHandler
    fullName: errorHandler
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type:
          - ANTLRErrorStrategy
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ESCAPE_CHARACTER
    name: ESCAPE_CHARACTER
    fullName: ESCAPE_CHARACTER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ESCAPE_CHARACTER: 35 = 35'
      return:
        type:
          - '35'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.exitRule
    name: exitRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function exitRule()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.expression
    name: expression()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function expression()
      parameters: []
      return:
        type:
          - adaptive-expressions.ExpressionContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.expression_1
    name: expression(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function expression(_p: number)'
      parameters:
        - id: _p
          type:
            - number
          description: ''
      return:
        type:
          - adaptive-expressions.ExpressionContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.constructor
    name: ExpressionAntlrParser(TokenStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ExpressionAntlrParser(input: TokenStream)'
      parameters:
        - id: input
          type:
            - TokenStream
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.file
    name: file()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function file()
      parameters: []
      return:
        type:
          - adaptive-expressions.FileContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getATNWithBypassAlts
    name: getATNWithBypassAlts()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    syntax:
      content: function getATNWithBypassAlts()
      parameters: []
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getDFAStrings
    name: getDFAStrings()
    children: []
    type: method
    langs:
      - typeScript
    summary: For debugging and other purposes.
    syntax:
      content: function getDFAStrings()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ParserErrorListener
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<Token>>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getExpectedTokens
    name: getExpectedTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    syntax:
      content: function getExpectedTokens()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: adaptive-expressions
  - uid: >-
      adaptive-expressions.ExpressionAntlrParser.getExpectedTokensWithinCurrentRule
    name: getExpectedTokensWithinCurrentRule()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      parameters: []
      return:
        type:
          - IntervalSet
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getInvokingContext
    name: getInvokingContext(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type:
            - number
          description: ''
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getParseListeners
    name: getParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getParseListeners()
      parameters: []
      return:
        type:
          - 'ParseTreeListener[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getRuleIndex
    name: getRuleIndex(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getRuleInvocationStack
    name: getRuleInvocationStack(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type:
            - RuleContext
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string grammarFileName
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.IDENTIFIER
    name: IDENTIFIER
    fullName: IDENTIFIER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IDENTIFIER: 30 = 30'
      return:
        type:
          - '30'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.inContext
    name: inContext(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the token stream and reset the parser.
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type:
          - TokenStream
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type:
          - ParserATNSimulator
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.INVALID_TOKEN_DEFAULT_MODE
    name: INVALID_TOKEN_DEFAULT_MODE
    fullName: INVALID_TOKEN_DEFAULT_MODE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static INVALID_TOKEN_DEFAULT_MODE: 33 = 33'
      return:
        type:
          - '33'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.isExpectedToken
    name: isExpectedToken(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type:
            - number
          description: the symbol type to check
      return:
        type:
          - boolean
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.isMatchedEOF
    name: isMatchedEOF
    fullName: isMatchedEOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.isTrace
    name: isTrace
    fullName: isTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    syntax:
      content: 'isTrace: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.key
    name: key()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function key()
      parameters: []
      return:
        type:
          - adaptive-expressions.KeyContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.keyValuePair
    name: keyValuePair()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function keyValuePair()
      parameters: []
      return:
        type:
          - adaptive-expressions.KeyValuePairContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.keyValuePairList
    name: keyValuePairList()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function keyValuePairList()
      parameters: []
      return:
        type:
          - adaptive-expressions.KeyValuePairListContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.lambda
    name: lambda()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function lambda()
      parameters: []
      return:
        type:
          - adaptive-expressions.LambdaContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.LESS_OR_EQUAl
    name: LESS_OR_EQUAl
    fullName: LESS_OR_EQUAl
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LESS_OR_EQUAl: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.LESS_THAN
    name: LESS_THAN
    fullName: LESS_THAN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LESS_THAN: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.match
    name: match(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: the token type to match
      return:
        type:
          - Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.matchWildcard
    name: matchWildcard()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    syntax:
      content: function matchWildcard()
      parameters: []
      return:
        type:
          - Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.MORE_OR_EQUAL
    name: MORE_OR_EQUAL
    fullName: MORE_OR_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MORE_OR_EQUAL: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.MORE_THAN
    name: MORE_THAN
    fullName: MORE_THAN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MORE_THAN: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.NEWLINE
    name: NEWLINE
    fullName: NEWLINE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NEWLINE: 31 = 31'
      return:
        type:
          - '31'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.NON
    name: NON
    fullName: NON
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NON: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners
    name: notifyErrorListeners(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type:
            - string
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners_1
    name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type:
            - string
          description: ''
        - id: offendingToken
          type:
            - Token | null
          description: ''
        - id: e
          type:
            - RecognitionException | undefined
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.NOT_EQUAL
    name: NOT_EQUAL
    fullName: NOT_EQUAL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NOT_EQUAL: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.NUMBER
    name: NUMBER
    fullName: NUMBER
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NUMBER: 28 = 28'
      return:
        type:
          - '28'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.numberOfSyntaxErrors
    name: numberOfSyntaxErrors
    fullName: numberOfSyntaxErrors
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.OPEN_BRACKET
    name: OPEN_BRACKET
    fullName: OPEN_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OPEN_BRACKET: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.OPEN_CURLY_BRACKET
    name: OPEN_CURLY_BRACKET
    fullName: OPEN_CURLY_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.OPEN_SQUARE_BRACKET
    name: OPEN_SQUARE_BRACKET
    fullName: OPEN_SQUARE_BRACKET
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.PERCENT
    name: PERCENT
    fullName: PERCENT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static PERCENT: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.PLUS
    name: PLUS
    fullName: PLUS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static PLUS: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.precedence
    name: precedence
    fullName: precedence
    children: []
    langs:
      - typeScript
    type: property
    summary: Get the precedence level for the top-most precedence rule.
    syntax:
      content: 'precedence: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.precpred
    name: 'precpred(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.primaryExpression
    name: primaryExpression()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function primaryExpression()
      parameters: []
      return:
        type:
          - adaptive-expressions.PrimaryExpressionContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.primaryExpression_1
    name: primaryExpression(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function primaryExpression(_p: number)'
      parameters:
        - id: _p
          type:
            - number
          description: ''
      return:
        type:
          - adaptive-expressions.PrimaryExpressionContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.pushNewRecursionContext
    name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type:
            - ParserRuleContext
          description: ''
        - id: state
          type:
            - number
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<Token>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<Token>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.removeParseListener
    name: removeParseListener(ParseTreeListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type:
            - ParseTreeListener
          description: |
            the listener to remove
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.removeParseListeners
    name: removeParseListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove all parse listeners.
    syntax:
      content: function removeParseListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: reset the parser's state
    syntax:
      content: function reset()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type:
          - ParserRuleContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"file\", \"expression\", \"primaryExpression\", \"stringInterpolation\", \"textContent\", \n\t\t\"argsList\", \"lambda\", \"keyValuePairList\", \"keyValuePair\", \"key\",\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] ruleNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_argsList
    name: RULE_argsList
    fullName: RULE_argsList
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_argsList: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_expression
    name: RULE_expression
    fullName: RULE_expression
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_expression: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_file
    name: RULE_file
    fullName: RULE_file
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_file: 0 = 0'
      return:
        type:
          - '0'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_key
    name: RULE_key
    fullName: RULE_key
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_key: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePair
    name: RULE_keyValuePair
    fullName: RULE_keyValuePair
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_keyValuePair: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePairList
    name: RULE_keyValuePairList
    fullName: RULE_keyValuePairList
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_keyValuePairList: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_lambda
    name: RULE_lambda
    fullName: RULE_lambda
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_lambda: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_primaryExpression
    name: RULE_primaryExpression
    fullName: RULE_primaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_primaryExpression: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_stringInterpolation
    name: RULE_stringInterpolation
    fullName: RULE_stringInterpolation
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_stringInterpolation: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.RULE_textContent
    name: RULE_textContent
    fullName: RULE_textContent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RULE_textContent: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.sempred
    name: 'sempred(RuleContext, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type:
            - RuleContext
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: predIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string serializedATN
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.setProfile
    name: setProfile(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type:
            - boolean
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.SINGLE_AND
    name: SINGLE_AND
    fullName: SINGLE_AND
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SINGLE_AND: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.SLASH
    name: SLASH
    fullName: SLASH
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SLASH: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.STRING
    name: STRING
    fullName: STRING
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRING: 32 = 32'
      return:
        type:
          - '32'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.stringInterpolation
    name: stringInterpolation()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function stringInterpolation()
      parameters: []
      return:
        type:
          - adaptive-expressions.StringInterpolationContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.STRING_INTERPOLATION_START
    name: STRING_INTERPOLATION_START
    fullName: STRING_INTERPOLATION_START
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static STRING_INTERPOLATION_START: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.SUBSTRACT
    name: SUBSTRACT
    fullName: SUBSTRACT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SUBSTRACT: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.TEMPLATE
    name: TEMPLATE
    fullName: TEMPLATE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEMPLATE: 34 = 34'
      return:
        type:
          - '34'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.textContent
    name: textContent()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function textContent()
      parameters: []
      return:
        type:
          - adaptive-expressions.TextContentContext
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.TEXT_CONTENT
    name: TEXT_CONTENT
    fullName: TEXT_CONTENT
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TEXT_CONTENT: 36 = 36'
      return:
        type:
          - '36'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.unrollRecursionContexts
    name: unrollRecursionContexts(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type:
            - ParserRuleContext
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(ExpressionAntlrParser._LITERAL_NAMES,
        ExpressionAntlrParser._SYMBOLIC_NAMES, [])
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: Vocabulary vocabulary
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.WHITESPACE
    name: WHITESPACE
    fullName: WHITESPACE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WHITESPACE: 29 = 29'
      return:
        type:
          - '29'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParser.XOR
    name: XOR
    fullName: XOR
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static XOR: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.ArgsListContext
    name: ArgsListContext
    spec.typeScript:
      - name: ArgsListContext
        fullName: ArgsListContext
        uid: adaptive-expressions.ArgsListContext
  - uid: adaptive-expressions.ExpressionContext
    name: ExpressionContext
    spec.typeScript:
      - name: ExpressionContext
        fullName: ExpressionContext
        uid: adaptive-expressions.ExpressionContext
  - uid: adaptive-expressions.FileContext
    name: FileContext
    spec.typeScript:
      - name: FileContext
        fullName: FileContext
        uid: adaptive-expressions.FileContext
  - uid: adaptive-expressions.KeyContext
    name: KeyContext
    spec.typeScript:
      - name: KeyContext
        fullName: KeyContext
        uid: adaptive-expressions.KeyContext
  - uid: adaptive-expressions.KeyValuePairContext
    name: KeyValuePairContext
    spec.typeScript:
      - name: KeyValuePairContext
        fullName: KeyValuePairContext
        uid: adaptive-expressions.KeyValuePairContext
  - uid: adaptive-expressions.KeyValuePairListContext
    name: KeyValuePairListContext
    spec.typeScript:
      - name: KeyValuePairListContext
        fullName: KeyValuePairListContext
        uid: adaptive-expressions.KeyValuePairListContext
  - uid: adaptive-expressions.LambdaContext
    name: LambdaContext
    spec.typeScript:
      - name: LambdaContext
        fullName: LambdaContext
        uid: adaptive-expressions.LambdaContext
  - uid: adaptive-expressions.PrimaryExpressionContext
    name: PrimaryExpressionContext
    spec.typeScript:
      - name: PrimaryExpressionContext
        fullName: PrimaryExpressionContext
        uid: adaptive-expressions.PrimaryExpressionContext
  - uid: adaptive-expressions.StringInterpolationContext
    name: StringInterpolationContext
    spec.typeScript:
      - name: StringInterpolationContext
        fullName: StringInterpolationContext
        uid: adaptive-expressions.StringInterpolationContext
  - uid: adaptive-expressions.TextContentContext
    name: TextContentContext
    spec.typeScript:
      - name: TextContentContext
        fullName: TextContentContext
        uid: adaptive-expressions.TextContentContext

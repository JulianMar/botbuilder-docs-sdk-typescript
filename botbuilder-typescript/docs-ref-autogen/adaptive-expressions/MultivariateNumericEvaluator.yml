### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.MultivariateNumericEvaluator
    name: MultivariateNumericEvaluator
    fullName: MultivariateNumericEvaluator
    children:
      - adaptive-expressions.MultivariateNumericEvaluator.constructor
      - adaptive-expressions.MultivariateNumericEvaluator.returnType
      - adaptive-expressions.MultivariateNumericEvaluator.tryEvaluate
      - adaptive-expressions.MultivariateNumericEvaluator.type
      - adaptive-expressions.MultivariateNumericEvaluator.validateExpression
    langs:
      - typeScript
    type: class
    summary: Numeric operators that can have 2 or more args.
    extends:
      name: adaptive-expressions.ExpressionEvaluator
    package: adaptive-expressions
  - uid: adaptive-expressions.MultivariateNumericEvaluator.constructor
    name: >-
      MultivariateNumericEvaluator(string, (args: any[]) => number,
      VerifyExpression)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new MultivariateNumericEvaluator(type: string, func: (args: any[]) =>
        number, verify?: VerifyExpression)
      parameters:
        - id: type
          type:
            - string
          description: ''
        - id: func
          type:
            - '(args: any[]) => number'
          description: ''
        - id: verify
          type:
            - adaptive-expressions.VerifyExpression
          description: ''
          optional: true
    package: adaptive-expressions
  - uid: adaptive-expressions.MultivariateNumericEvaluator.returnType
    name: returnType
    fullName: returnType
    children: []
    langs:
      - typeScript
    type: property
    summary: Type expected by evaluating the expression.
    syntax:
      content: 'returnType: ReturnType'
      return:
        type:
          - adaptive-expressions.ReturnType
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.MultivariateNumericEvaluator.tryEvaluate
    name: tryEvaluate
    fullName: tryEvaluate
    children: []
    langs:
      - typeScript
    type: property
    summary: Evaluate an expression.
    syntax:
      content: >-
        tryEvaluate: (expression: Expression, state: MemoryInterface, options:
        Options) => ValueWithError
      return:
        type:
          - >-
            (expression: Expression, state: MemoryInterface, options: Options)
            => ValueWithError
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.MultivariateNumericEvaluator.type
    name: type
    fullName: type
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the expression type for evaluator.
    syntax:
      content: 'type: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.MultivariateNumericEvaluator.validateExpression
    name: validateExpression
    fullName: validateExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Validate an expression.
    syntax:
      content: 'validateExpression: (expression: Expression) => void'
      return:
        type:
          - '(expression: Expression) => void'
        description: ''
    package: adaptive-expressions
references:
  - uid: adaptive-expressions.ExpressionEvaluator
    name: ExpressionEvaluator
    spec.typeScript:
      - name: ExpressionEvaluator
        fullName: ExpressionEvaluator
        uid: adaptive-expressions.ExpressionEvaluator
  - uid: adaptive-expressions.VerifyExpression
    name: VerifyExpression
    spec.typeScript:
      - name: VerifyExpression
        fullName: VerifyExpression
        uid: adaptive-expressions.VerifyExpression
  - uid: adaptive-expressions.ReturnType
    name: ReturnType
    spec.typeScript:
      - name: ReturnType
        fullName: ReturnType
        uid: adaptive-expressions.ReturnType

### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.CommonRegexLexer
    name: CommonRegexLexer
    fullName: CommonRegexLexer
    children:
      - adaptive-expressions.CommonRegexLexer.action
      - adaptive-expressions.CommonRegexLexer.addErrorListener
      - adaptive-expressions.CommonRegexLexer.ALC
      - adaptive-expressions.CommonRegexLexer.Ampersand
      - adaptive-expressions.CommonRegexLexer.atn
      - adaptive-expressions.CommonRegexLexer.AUC
      - adaptive-expressions.CommonRegexLexer.Backslash
      - adaptive-expressions.CommonRegexLexer.BellChar
      - adaptive-expressions.CommonRegexLexer.BLC
      - adaptive-expressions.CommonRegexLexer.BlockQuoted
      - adaptive-expressions.CommonRegexLexer.BUC
      - adaptive-expressions.CommonRegexLexer.Caret
      - adaptive-expressions.CommonRegexLexer.CarriageReturn
      - adaptive-expressions.CommonRegexLexer.channel
      - adaptive-expressions.CommonRegexLexer.channelNames
      - adaptive-expressions.CommonRegexLexer.channelNames
      - adaptive-expressions.CommonRegexLexer.CharacterClassEnd
      - adaptive-expressions.CommonRegexLexer.CharacterClassStart
      - adaptive-expressions.CommonRegexLexer.charIndex
      - adaptive-expressions.CommonRegexLexer.charPositionInLine
      - adaptive-expressions.CommonRegexLexer.CharWithoutProperty
      - adaptive-expressions.CommonRegexLexer.CharWithProperty
      - adaptive-expressions.CommonRegexLexer.CLC
      - adaptive-expressions.CommonRegexLexer.CloseBrace
      - adaptive-expressions.CommonRegexLexer.CloseParen
      - adaptive-expressions.CommonRegexLexer.Colon
      - adaptive-expressions.CommonRegexLexer.Comma
      - adaptive-expressions.CommonRegexLexer.constructor
      - adaptive-expressions.CommonRegexLexer.ControlChar
      - adaptive-expressions.CommonRegexLexer.CUC
      - adaptive-expressions.CommonRegexLexer.D0
      - adaptive-expressions.CommonRegexLexer.D1
      - adaptive-expressions.CommonRegexLexer.D2
      - adaptive-expressions.CommonRegexLexer.D3
      - adaptive-expressions.CommonRegexLexer.D4
      - adaptive-expressions.CommonRegexLexer.D5
      - adaptive-expressions.CommonRegexLexer.D6
      - adaptive-expressions.CommonRegexLexer.D7
      - adaptive-expressions.CommonRegexLexer.D8
      - adaptive-expressions.CommonRegexLexer.D9
      - adaptive-expressions.CommonRegexLexer.DecimalDigit
      - adaptive-expressions.CommonRegexLexer.DEFAULT_MODE
      - adaptive-expressions.CommonRegexLexer.DEFAULT_TOKEN_CHANNEL
      - adaptive-expressions.CommonRegexLexer.DLC
      - adaptive-expressions.CommonRegexLexer.Dot
      - adaptive-expressions.CommonRegexLexer.DUC
      - adaptive-expressions.CommonRegexLexer.ELC
      - adaptive-expressions.CommonRegexLexer.emit_1
      - adaptive-expressions.CommonRegexLexer.emit
      - adaptive-expressions.CommonRegexLexer.emitEOF
      - adaptive-expressions.CommonRegexLexer.EndOfSubject
      - adaptive-expressions.CommonRegexLexer.EOF
      - adaptive-expressions.CommonRegexLexer.Equals
      - adaptive-expressions.CommonRegexLexer.EscapeChar
      - adaptive-expressions.CommonRegexLexer.EUC
      - adaptive-expressions.CommonRegexLexer.Exclamation
      - adaptive-expressions.CommonRegexLexer.FLC
      - adaptive-expressions.CommonRegexLexer.FormFeed
      - adaptive-expressions.CommonRegexLexer.FUC
      - adaptive-expressions.CommonRegexLexer.getAllTokens
      - adaptive-expressions.CommonRegexLexer.getCharErrorDisplay
      - adaptive-expressions.CommonRegexLexer.getErrorDisplay
      - adaptive-expressions.CommonRegexLexer.getErrorHeader
      - adaptive-expressions.CommonRegexLexer.getErrorListenerDispatch
      - adaptive-expressions.CommonRegexLexer.getErrorListeners
      - adaptive-expressions.CommonRegexLexer.getRuleIndexMap
      - adaptive-expressions.CommonRegexLexer.getTokenType
      - adaptive-expressions.CommonRegexLexer.getTokenTypeMap
      - adaptive-expressions.CommonRegexLexer.GLC
      - adaptive-expressions.CommonRegexLexer.grammarFileName
      - adaptive-expressions.CommonRegexLexer.GreaterThan
      - adaptive-expressions.CommonRegexLexer.GUC
      - adaptive-expressions.CommonRegexLexer.Hash
      - adaptive-expressions.CommonRegexLexer.HexChar
      - adaptive-expressions.CommonRegexLexer.HIDDEN
      - adaptive-expressions.CommonRegexLexer.HLC
      - adaptive-expressions.CommonRegexLexer.HUC
      - adaptive-expressions.CommonRegexLexer.Hyphen
      - adaptive-expressions.CommonRegexLexer.ILC
      - adaptive-expressions.CommonRegexLexer.inputStream
      - adaptive-expressions.CommonRegexLexer.interpreter
      - adaptive-expressions.CommonRegexLexer.IUC
      - adaptive-expressions.CommonRegexLexer.JLC
      - adaptive-expressions.CommonRegexLexer.JUC
      - adaptive-expressions.CommonRegexLexer.KLC
      - adaptive-expressions.CommonRegexLexer.KUC
      - adaptive-expressions.CommonRegexLexer.LessThan
      - adaptive-expressions.CommonRegexLexer.line
      - adaptive-expressions.CommonRegexLexer.LLC
      - adaptive-expressions.CommonRegexLexer.LUC
      - adaptive-expressions.CommonRegexLexer.MAX_CHAR_VALUE
      - adaptive-expressions.CommonRegexLexer.MIN_CHAR_VALUE
      - adaptive-expressions.CommonRegexLexer.MLC
      - adaptive-expressions.CommonRegexLexer.mode
      - adaptive-expressions.CommonRegexLexer.modeNames
      - adaptive-expressions.CommonRegexLexer.modeNames
      - adaptive-expressions.CommonRegexLexer.MORE
      - adaptive-expressions.CommonRegexLexer.more
      - adaptive-expressions.CommonRegexLexer.MUC
      - adaptive-expressions.CommonRegexLexer.NewLine
      - adaptive-expressions.CommonRegexLexer.nextToken
      - adaptive-expressions.CommonRegexLexer.NLC
      - adaptive-expressions.CommonRegexLexer.NotDecimalDigit
      - adaptive-expressions.CommonRegexLexer.notifyListeners
      - adaptive-expressions.CommonRegexLexer.NotWhiteSpace
      - adaptive-expressions.CommonRegexLexer.NotWordChar
      - adaptive-expressions.CommonRegexLexer.NUC
      - adaptive-expressions.CommonRegexLexer.OLC
      - adaptive-expressions.CommonRegexLexer.OpenBrace
      - adaptive-expressions.CommonRegexLexer.OpenParen
      - adaptive-expressions.CommonRegexLexer.OtherChar
      - adaptive-expressions.CommonRegexLexer.OUC
      - adaptive-expressions.CommonRegexLexer.parseInfo
      - adaptive-expressions.CommonRegexLexer.Pipe
      - adaptive-expressions.CommonRegexLexer.PLC
      - adaptive-expressions.CommonRegexLexer.Plus
      - adaptive-expressions.CommonRegexLexer.popMode
      - adaptive-expressions.CommonRegexLexer.precpred
      - adaptive-expressions.CommonRegexLexer.PUC
      - adaptive-expressions.CommonRegexLexer.pushMode
      - adaptive-expressions.CommonRegexLexer.QLC
      - adaptive-expressions.CommonRegexLexer.QUC
      - adaptive-expressions.CommonRegexLexer.QuestionMark
      - adaptive-expressions.CommonRegexLexer.Quoted
      - adaptive-expressions.CommonRegexLexer.recover_1
      - adaptive-expressions.CommonRegexLexer.recover
      - adaptive-expressions.CommonRegexLexer.removeErrorListener
      - adaptive-expressions.CommonRegexLexer.removeErrorListeners
      - adaptive-expressions.CommonRegexLexer.reset
      - adaptive-expressions.CommonRegexLexer.reset_1
      - adaptive-expressions.CommonRegexLexer.RLC
      - adaptive-expressions.CommonRegexLexer.RUC
      - adaptive-expressions.CommonRegexLexer.ruleNames
      - adaptive-expressions.CommonRegexLexer.ruleNames
      - adaptive-expressions.CommonRegexLexer.sempred
      - adaptive-expressions.CommonRegexLexer.serializedATN
      - adaptive-expressions.CommonRegexLexer.SingleQuote
      - adaptive-expressions.CommonRegexLexer.SKIP
      - adaptive-expressions.CommonRegexLexer.skip
      - adaptive-expressions.CommonRegexLexer.SLC
      - adaptive-expressions.CommonRegexLexer.sourceName
      - adaptive-expressions.CommonRegexLexer.Star
      - adaptive-expressions.CommonRegexLexer.state
      - adaptive-expressions.CommonRegexLexer.SUC
      - adaptive-expressions.CommonRegexLexer.Tab
      - adaptive-expressions.CommonRegexLexer.text
      - adaptive-expressions.CommonRegexLexer.TLC
      - adaptive-expressions.CommonRegexLexer.token
      - adaptive-expressions.CommonRegexLexer.tokenFactory
      - adaptive-expressions.CommonRegexLexer.TUC
      - adaptive-expressions.CommonRegexLexer.type
      - adaptive-expressions.CommonRegexLexer.ULC
      - adaptive-expressions.CommonRegexLexer.Underscore
      - adaptive-expressions.CommonRegexLexer.UUC
      - adaptive-expressions.CommonRegexLexer.VLC
      - adaptive-expressions.CommonRegexLexer.VOCABULARY
      - adaptive-expressions.CommonRegexLexer.vocabulary
      - adaptive-expressions.CommonRegexLexer.VUC
      - adaptive-expressions.CommonRegexLexer.WhiteSpace
      - adaptive-expressions.CommonRegexLexer.WLC
      - adaptive-expressions.CommonRegexLexer.WordChar
      - adaptive-expressions.CommonRegexLexer.WUC
      - adaptive-expressions.CommonRegexLexer.XLC
      - adaptive-expressions.CommonRegexLexer.XUC
      - adaptive-expressions.CommonRegexLexer.YLC
      - adaptive-expressions.CommonRegexLexer.YUC
      - adaptive-expressions.CommonRegexLexer.ZLC
      - adaptive-expressions.CommonRegexLexer.ZUC
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Lexer
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.action
    name: 'action(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.addErrorListener
    name: addErrorListener(ANTLRErrorListener<number>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<number>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ALC
    name: ALC
    fullName: ALC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ALC: 44 = 44'
      return:
        type:
          - '44'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Ampersand
    name: Ampersand
    fullName: Ampersand
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Ampersand: 43 = 43'
      return:
        type:
          - '43'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.atn
    name: atn
    fullName: atn
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    syntax:
      content: 'atn: ATN'
      return:
        type:
          - ATN
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.AUC
    name: AUC
    fullName: AUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AUC: 70 = 70'
      return:
        type:
          - '70'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Backslash
    name: Backslash
    fullName: Backslash
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Backslash: 10 = 10'
      return:
        type:
          - '10'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.BellChar
    name: BellChar
    fullName: BellChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static BellChar: 3 = 3'
      return:
        type:
          - '3'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.BLC
    name: BLC
    fullName: BLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static BLC: 45 = 45'
      return:
        type:
          - '45'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.BlockQuoted
    name: BlockQuoted
    fullName: BlockQuoted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static BlockQuoted: 2 = 2'
      return:
        type:
          - '2'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.BUC
    name: BUC
    fullName: BUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static BUC: 71 = 71'
      return:
        type:
          - '71'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Caret
    name: Caret
    fullName: Caret
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Caret: 23 = 23'
      return:
        type:
          - '23'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CarriageReturn
    name: CarriageReturn
    fullName: CarriageReturn
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CarriageReturn: 8 = 8'
      return:
        type:
          - '8'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.channel
    name: channel
    fullName: channel
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'channel: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.channelNames
    name: channelNames
    fullName: channelNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.channelNames
    name: channelNames
    fullName: channelNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] channelNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CharacterClassEnd
    name: CharacterClassEnd
    fullName: CharacterClassEnd
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CharacterClassEnd: 22 = 22'
      return:
        type:
          - '22'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CharacterClassStart
    name: CharacterClassStart
    fullName: CharacterClassStart
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CharacterClassStart: 21 = 21'
      return:
        type:
          - '21'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.charIndex
    name: charIndex
    fullName: charIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: What is the index of the current character of lookahead?
    syntax:
      content: 'charIndex: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.charPositionInLine
    name: charPositionInLine
    fullName: charPositionInLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'charPositionInLine: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CharWithoutProperty
    name: CharWithoutProperty
    fullName: CharWithoutProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CharWithoutProperty: 16 = 16'
      return:
        type:
          - '16'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CharWithProperty
    name: CharWithProperty
    fullName: CharWithProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CharWithProperty: 15 = 15'
      return:
        type:
          - '15'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CLC
    name: CLC
    fullName: CLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CLC: 46 = 46'
      return:
        type:
          - '46'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CloseBrace
    name: CloseBrace
    fullName: CloseBrace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CloseBrace: 29 = 29'
      return:
        type:
          - '29'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CloseParen
    name: CloseParen
    fullName: CloseParen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CloseParen: 34 = 34'
      return:
        type:
          - '34'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Colon
    name: Colon
    fullName: Colon
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Colon: 39 = 39'
      return:
        type:
          - '39'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Comma
    name: Comma
    fullName: Comma
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Comma: 30 = 30'
      return:
        type:
          - '30'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.constructor
    name: CommonRegexLexer(CharStream)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new CommonRegexLexer(input: CharStream)'
      parameters:
        - id: input
          type:
            - CharStream
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ControlChar
    name: ControlChar
    fullName: ControlChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ControlChar: 4 = 4'
      return:
        type:
          - '4'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.CUC
    name: CUC
    fullName: CUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CUC: 72 = 72'
      return:
        type:
          - '72'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D0
    name: D0
    fullName: D0
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D0: 105 = 105'
      return:
        type:
          - '105'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D1
    name: D1
    fullName: D1
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D1: 96 = 96'
      return:
        type:
          - '96'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D2
    name: D2
    fullName: D2
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D2: 97 = 97'
      return:
        type:
          - '97'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D3
    name: D3
    fullName: D3
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D3: 98 = 98'
      return:
        type:
          - '98'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D4
    name: D4
    fullName: D4
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D4: 99 = 99'
      return:
        type:
          - '99'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D5
    name: D5
    fullName: D5
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D5: 100 = 100'
      return:
        type:
          - '100'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D6
    name: D6
    fullName: D6
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D6: 101 = 101'
      return:
        type:
          - '101'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D7
    name: D7
    fullName: D7
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D7: 102 = 102'
      return:
        type:
          - '102'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D8
    name: D8
    fullName: D8
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D8: 103 = 103'
      return:
        type:
          - '103'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.D9
    name: D9
    fullName: D9
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static D9: 104 = 104'
      return:
        type:
          - '104'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.DecimalDigit
    name: DecimalDigit
    fullName: DecimalDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DecimalDigit: 13 = 13'
      return:
        type:
          - '13'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.DEFAULT_MODE
    name: DEFAULT_MODE
    fullName: DEFAULT_MODE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.DEFAULT_TOKEN_CHANNEL
    name: DEFAULT_TOKEN_CHANNEL
    fullName: DEFAULT_TOKEN_CHANNEL
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.DLC
    name: DLC
    fullName: DLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DLC: 47 = 47'
      return:
        type:
          - '47'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Dot
    name: Dot
    fullName: Dot
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Dot: 12 = 12'
      return:
        type:
          - '12'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.DUC
    name: DUC
    fullName: DUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DUC: 73 = 73'
      return:
        type:
          - '73'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ELC
    name: ELC
    fullName: ELC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ELC: 48 = 48'
      return:
        type:
          - '48'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.emit_1
    name: emit()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    syntax:
      content: function emit()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.emit
    name: emit(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type:
            - Token
          description: ''
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.emitEOF
    name: emitEOF()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function emitEOF()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.EndOfSubject
    name: EndOfSubject
    fullName: EndOfSubject
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EndOfSubject: 31 = 31'
      return:
        type:
          - '31'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.EOF
    name: EOF
    fullName: EOF
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static EOF: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Equals
    name: Equals
    fullName: Equals
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Equals: 41 = 41'
      return:
        type:
          - '41'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.EscapeChar
    name: EscapeChar
    fullName: EscapeChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EscapeChar: 5 = 5'
      return:
        type:
          - '5'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.EUC
    name: EUC
    fullName: EUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EUC: 74 = 74'
      return:
        type:
          - '74'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Exclamation
    name: Exclamation
    fullName: Exclamation
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Exclamation: 42 = 42'
      return:
        type:
          - '42'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.FLC
    name: FLC
    fullName: FLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FLC: 49 = 49'
      return:
        type:
          - '49'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.FormFeed
    name: FormFeed
    fullName: FormFeed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FormFeed: 6 = 6'
      return:
        type:
          - '6'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.FUC
    name: FUC
    fullName: FUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FUC: 75 = 75'
      return:
        type:
          - '75'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getAllTokens
    name: getAllTokens()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    syntax:
      content: function getAllTokens()
      parameters: []
      return:
        type:
          - 'Token[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getCharErrorDisplay
    name: getCharErrorDisplay(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getErrorDisplay
    name: getErrorDisplay(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type:
            - string | number
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getErrorHeader
    name: getErrorHeader(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'What is the error header, normally line/character position information?'
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type:
            - RecognitionException
          description: ''
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getErrorListenerDispatch
    name: getErrorListenerDispatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListenerDispatch()
      parameters: []
      return:
        type:
          - ANTLRErrorListener<number>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getErrorListeners
    name: getErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getErrorListeners()
      parameters: []
      return:
        type:
          - Array<ANTLRErrorListener<number>>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getRuleIndexMap
    name: getRuleIndexMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getRuleIndexMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getTokenType
    name: getTokenType(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type:
            - string
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.getTokenTypeMap
    name: getTokenTypeMap()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    syntax:
      content: function getTokenTypeMap()
      parameters: []
      return:
        type:
          - 'ReadonlyMap<string, number>'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.GLC
    name: GLC
    fullName: GLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GLC: 50 = 50'
      return:
        type:
          - '50'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.grammarFileName
    name: grammarFileName
    fullName: grammarFileName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string grammarFileName
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.GreaterThan
    name: GreaterThan
    fullName: GreaterThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GreaterThan: 36 = 36'
      return:
        type:
          - '36'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.GUC
    name: GUC
    fullName: GUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GUC: 76 = 76'
      return:
        type:
          - '76'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Hash
    name: Hash
    fullName: Hash
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Hash: 40 = 40'
      return:
        type:
          - '40'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.HexChar
    name: HexChar
    fullName: HexChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static HexChar: 11 = 11'
      return:
        type:
          - '11'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.HIDDEN
    name: HIDDEN
    fullName: HIDDEN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static HIDDEN: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.HLC
    name: HLC
    fullName: HLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static HLC: 51 = 51'
      return:
        type:
          - '51'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.HUC
    name: HUC
    fullName: HUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static HUC: 77 = 77'
      return:
        type:
          - '77'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Hyphen
    name: Hyphen
    fullName: Hyphen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Hyphen: 24 = 24'
      return:
        type:
          - '24'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ILC
    name: ILC
    fullName: ILC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ILC: 52 = 52'
      return:
        type:
          - '52'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the char stream and reset the lexer
    syntax:
      content: 'inputStream: CharStream'
      return:
        type:
          - CharStream
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.interpreter
    name: interpreter
    fullName: interpreter
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the ATN interpreter used by the recognizer for prediction.
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type:
          - LexerATNSimulator
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.IUC
    name: IUC
    fullName: IUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IUC: 78 = 78'
      return:
        type:
          - '78'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.JLC
    name: JLC
    fullName: JLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static JLC: 53 = 53'
      return:
        type:
          - '53'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.JUC
    name: JUC
    fullName: JUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static JUC: 79 = 79'
      return:
        type:
          - '79'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.KLC
    name: KLC
    fullName: KLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static KLC: 54 = 54'
      return:
        type:
          - '54'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.KUC
    name: KUC
    fullName: KUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static KUC: 80 = 80'
      return:
        type:
          - '80'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.LessThan
    name: LessThan
    fullName: LessThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LessThan: 35 = 35'
      return:
        type:
          - '35'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.line
    name: line
    fullName: line
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'line: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.LLC
    name: LLC
    fullName: LLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LLC: 55 = 55'
      return:
        type:
          - '55'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.LUC
    name: LUC
    fullName: LUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LUC: 81 = 81'
      return:
        type:
          - '81'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.MAX_CHAR_VALUE
    name: MAX_CHAR_VALUE
    fullName: MAX_CHAR_VALUE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.MIN_CHAR_VALUE
    name: MIN_CHAR_VALUE
    fullName: MIN_CHAR_VALUE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.MLC
    name: MLC
    fullName: MLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MLC: 56 = 56'
      return:
        type:
          - '56'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.mode
    name: mode(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.modeNames
    name: modeNames
    fullName: modeNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.modeNames
    name: modeNames
    fullName: modeNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] modeNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.MORE
    name: MORE
    fullName: MORE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static MORE: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.more
    name: more()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function more()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.MUC
    name: MUC
    fullName: MUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static MUC: 82 = 82'
      return:
        type:
          - '82'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NewLine
    name: NewLine
    fullName: NewLine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NewLine: 7 = 7'
      return:
        type:
          - '7'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.nextToken
    name: nextToken()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    syntax:
      content: function nextToken()
      parameters: []
      return:
        type:
          - Token
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NLC
    name: NLC
    fullName: NLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NLC: 57 = 57'
      return:
        type:
          - '57'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NotDecimalDigit
    name: NotDecimalDigit
    fullName: NotDecimalDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NotDecimalDigit: 14 = 14'
      return:
        type:
          - '14'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.notifyListeners
    name: notifyListeners(LexerNoViableAltException)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type:
            - LexerNoViableAltException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NotWhiteSpace
    name: NotWhiteSpace
    fullName: NotWhiteSpace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NotWhiteSpace: 18 = 18'
      return:
        type:
          - '18'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NotWordChar
    name: NotWordChar
    fullName: NotWordChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NotWordChar: 20 = 20'
      return:
        type:
          - '20'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.NUC
    name: NUC
    fullName: NUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NUC: 83 = 83'
      return:
        type:
          - '83'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.OLC
    name: OLC
    fullName: OLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OLC: 58 = 58'
      return:
        type:
          - '58'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.OpenBrace
    name: OpenBrace
    fullName: OpenBrace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OpenBrace: 28 = 28'
      return:
        type:
          - '28'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.OpenParen
    name: OpenParen
    fullName: OpenParen
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OpenParen: 33 = 33'
      return:
        type:
          - '33'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.OtherChar
    name: OtherChar
    fullName: OtherChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OtherChar: 106 = 106'
      return:
        type:
          - '106'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.OUC
    name: OUC
    fullName: OUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static OUC: 84 = 84'
      return:
        type:
          - '84'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.parseInfo
    name: parseInfo
    fullName: parseInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type:
          - Promise<ParseInfo | undefined>
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Pipe
    name: Pipe
    fullName: Pipe
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Pipe: 32 = 32'
      return:
        type:
          - '32'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.PLC
    name: PLC
    fullName: PLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static PLC: 59 = 59'
      return:
        type:
          - '59'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Plus
    name: Plus
    fullName: Plus
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Plus: 26 = 26'
      return:
        type:
          - '26'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.popMode
    name: popMode()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function popMode()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.precpred
    name: 'precpred(RuleContext | undefined, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: precedence
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.PUC
    name: PUC
    fullName: PUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static PUC: 85 = 85'
      return:
        type:
          - '85'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.pushMode
    name: pushMode(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type:
            - number
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.QLC
    name: QLC
    fullName: QLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static QLC: 60 = 60'
      return:
        type:
          - '60'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.QUC
    name: QUC
    fullName: QUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static QUC: 86 = 86'
      return:
        type:
          - '86'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.QuestionMark
    name: QuestionMark
    fullName: QuestionMark
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static QuestionMark: 25 = 25'
      return:
        type:
          - '25'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Quoted
    name: Quoted
    fullName: Quoted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Quoted: 1 = 1'
      return:
        type:
          - '1'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.recover_1
    name: recover(LexerNoViableAltException)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type:
            - LexerNoViableAltException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.recover
    name: recover(RecognitionException)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type:
            - RecognitionException
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.removeErrorListener
    name: removeErrorListener(ANTLRErrorListener<number>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type:
            - ANTLRErrorListener<number>
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.removeErrorListeners
    name: removeErrorListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeErrorListeners()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function reset()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.reset_1
    name: reset(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type:
            - boolean
          description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.RLC
    name: RLC
    fullName: RLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RLC: 61 = 61'
      return:
        type:
          - '61'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.RUC
    name: RUC
    fullName: RUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RUC: 87 = 87'
      return:
        type:
          - '87'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"Quoted\", \"BlockQuoted\", \"BellChar\", \"ControlChar\", \"EscapeChar\", \"FormFeed\", \n\t\t\"NewLine\", \"CarriageReturn\", \"Tab\", \"Backslash\", \"HexChar\", \"Dot\", \"DecimalDigit\", \n\t\t\"NotDecimalDigit\", \"CharWithProperty\", \"CharWithoutProperty\", \"WhiteSpace\", \n\t\t\"NotWhiteSpace\", \"WordChar\", \"NotWordChar\", \"CharacterClassStart\", \"CharacterClassEnd\", \n\t\t\"Caret\", \"Hyphen\", \"QuestionMark\", \"Plus\", \"Star\", \"OpenBrace\", \"CloseBrace\", \n\t\t\"Comma\", \"EndOfSubject\", \"Pipe\", \"OpenParen\", \"CloseParen\", \"LessThan\", \n\t\t\"GreaterThan\", \"SingleQuote\", \"Underscore\", \"Colon\", \"Hash\", \"Equals\", \n\t\t\"Exclamation\", \"Ampersand\", \"ALC\", \"BLC\", \"CLC\", \"DLC\", \"ELC\", \"FLC\", \n\t\t\"GLC\", \"HLC\", \"ILC\", \"JLC\", \"KLC\", \"LLC\", \"MLC\", \"NLC\", \"OLC\", \"PLC\", \n\t\t\"QLC\", \"RLC\", \"SLC\", \"TLC\", \"ULC\", \"VLC\", \"WLC\", \"XLC\", \"YLC\", \"ZLC\", \n\t\t\"AUC\", \"BUC\", \"CUC\", \"DUC\", \"EUC\", \"FUC\", \"GUC\", \"HUC\", \"IUC\", \"JUC\", \n\t\t\"KUC\", \"LUC\", \"MUC\", \"NUC\", \"OUC\", \"PUC\", \"QUC\", \"RUC\", \"SUC\", \"TUC\", \n\t\t\"UUC\", \"VUC\", \"WUC\", \"XUC\", \"YUC\", \"ZUC\", \"D1\", \"D2\", \"D3\", \"D4\", \"D5\", \n\t\t\"D6\", \"D7\", \"D8\", \"D9\", \"D0\", \"OtherChar\", \"UnderscoreAlphaNumerics\", \n\t\t\"AlphaNumerics\", \"AlphaNumeric\", \"NonAlphaNumeric\", \"HexDigit\", \"ASCII\",\n\t]"
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ruleNames
    name: ruleNames
    fullName: ruleNames
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] ruleNames'
      return:
        type:
          - 'string[]'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.sempred
    name: 'sempred(RuleContext | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type:
            - RuleContext | undefined
          description: ''
        - id: ruleIndex
          type:
            - number
          description: ''
        - id: actionIndex
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.serializedATN
    name: serializedATN
    fullName: serializedATN
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string serializedATN
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.SingleQuote
    name: SingleQuote
    fullName: SingleQuote
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SingleQuote: 37 = 37'
      return:
        type:
          - '37'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.SKIP
    name: SKIP
    fullName: SKIP
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static SKIP: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.skip
    name: skip()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    syntax:
      content: function skip()
      parameters: []
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.SLC
    name: SLC
    fullName: SLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SLC: 62 = 62'
      return:
        type:
          - '62'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.sourceName
    name: sourceName
    fullName: sourceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceName: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Star
    name: Star
    fullName: Star
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Star: 27 = 27'
      return:
        type:
          - '27'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    syntax:
      content: 'state: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.SUC
    name: SUC
    fullName: SUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SUC: 88 = 88'
      return:
        type:
          - '88'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Tab
    name: Tab
    fullName: Tab
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Tab: 9 = 9'
      return:
        type:
          - '9'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.text
    name: text
    fullName: text
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    syntax:
      content: 'text: string'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.TLC
    name: TLC
    fullName: TLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TLC: 63 = 63'
      return:
        type:
          - '63'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.token
    name: token
    fullName: token
    children: []
    langs:
      - typeScript
    type: property
    summary: Override if emitting multiple tokens.
    syntax:
      content: 'token: Token | undefined'
      return:
        type:
          - Token | undefined
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.tokenFactory
    name: tokenFactory
    fullName: tokenFactory
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type:
          - TokenFactory
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.TUC
    name: TUC
    fullName: TUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TUC: 89 = 89'
      return:
        type:
          - '89'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.type
    name: type
    fullName: type
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'type: number'
      return:
        type:
          - number
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ULC
    name: ULC
    fullName: ULC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ULC: 64 = 64'
      return:
        type:
          - '64'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.Underscore
    name: Underscore
    fullName: Underscore
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Underscore: 38 = 38'
      return:
        type:
          - '38'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.UUC
    name: UUC
    fullName: UUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UUC: 90 = 90'
      return:
        type:
          - '90'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.VLC
    name: VLC
    fullName: VLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static VLC: 65 = 65'
      return:
        type:
          - '65'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.VOCABULARY
    name: VOCABULARY
    fullName: VOCABULARY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(CommonRegexLexer._LITERAL_NAMES,
        CommonRegexLexer._SYMBOLIC_NAMES, [])
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.vocabulary
    name: vocabulary
    fullName: vocabulary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: Vocabulary vocabulary
      return:
        type:
          - Vocabulary
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.VUC
    name: VUC
    fullName: VUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static VUC: 91 = 91'
      return:
        type:
          - '91'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.WhiteSpace
    name: WhiteSpace
    fullName: WhiteSpace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WhiteSpace: 17 = 17'
      return:
        type:
          - '17'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.WLC
    name: WLC
    fullName: WLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WLC: 66 = 66'
      return:
        type:
          - '66'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.WordChar
    name: WordChar
    fullName: WordChar
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WordChar: 19 = 19'
      return:
        type:
          - '19'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.WUC
    name: WUC
    fullName: WUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static WUC: 92 = 92'
      return:
        type:
          - '92'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.XLC
    name: XLC
    fullName: XLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static XLC: 67 = 67'
      return:
        type:
          - '67'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.XUC
    name: XUC
    fullName: XUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static XUC: 93 = 93'
      return:
        type:
          - '93'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.YLC
    name: YLC
    fullName: YLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static YLC: 68 = 68'
      return:
        type:
          - '68'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.YUC
    name: YUC
    fullName: YUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static YUC: 94 = 94'
      return:
        type:
          - '94'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ZLC
    name: ZLC
    fullName: ZLC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ZLC: 69 = 69'
      return:
        type:
          - '69'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.CommonRegexLexer.ZUC
    name: ZUC
    fullName: ZUC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ZUC: 95 = 95'
      return:
        type:
          - '95'
        description: ''
    package: adaptive-expressions

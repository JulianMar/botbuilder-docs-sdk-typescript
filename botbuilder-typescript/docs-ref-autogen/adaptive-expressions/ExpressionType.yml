### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ExpressionType
    name: ExpressionType
    fullName: ExpressionType
    children:
      - adaptive-expressions.ExpressionType.Accessor
      - adaptive-expressions.ExpressionType.Add
      - adaptive-expressions.ExpressionType.AddDays
      - adaptive-expressions.ExpressionType.AddHours
      - adaptive-expressions.ExpressionType.AddMinutes
      - adaptive-expressions.ExpressionType.AddOrdinal
      - adaptive-expressions.ExpressionType.AddProperty
      - adaptive-expressions.ExpressionType.AddSeconds
      - adaptive-expressions.ExpressionType.AddToTime
      - adaptive-expressions.ExpressionType.And
      - adaptive-expressions.ExpressionType.Average
      - adaptive-expressions.ExpressionType.Base64
      - adaptive-expressions.ExpressionType.Base64ToBinary
      - adaptive-expressions.ExpressionType.Base64ToString
      - adaptive-expressions.ExpressionType.Binary
      - adaptive-expressions.ExpressionType.Bool
      - adaptive-expressions.ExpressionType.Ceiling
      - adaptive-expressions.ExpressionType.Coalesce
      - adaptive-expressions.ExpressionType.Concat
      - adaptive-expressions.ExpressionType.Constant
      - adaptive-expressions.ExpressionType.Contains
      - adaptive-expressions.ExpressionType.ConvertFromUTC
      - adaptive-expressions.ExpressionType.ConvertToUTC
      - adaptive-expressions.ExpressionType.Count
      - adaptive-expressions.ExpressionType.CountWord
      - adaptive-expressions.ExpressionType.CreateArray
      - adaptive-expressions.ExpressionType.DataUri
      - adaptive-expressions.ExpressionType.DataUriToBinary
      - adaptive-expressions.ExpressionType.DataUriToString
      - adaptive-expressions.ExpressionType.Date
      - adaptive-expressions.ExpressionType.DateReadBack
      - adaptive-expressions.ExpressionType.DateTimeDiff
      - adaptive-expressions.ExpressionType.DayOfMonth
      - adaptive-expressions.ExpressionType.DayOfWeek
      - adaptive-expressions.ExpressionType.DayOfYear
      - adaptive-expressions.ExpressionType.Divide
      - adaptive-expressions.ExpressionType.Element
      - adaptive-expressions.ExpressionType.Empty
      - adaptive-expressions.ExpressionType.EndsWith
      - adaptive-expressions.ExpressionType.Equal
      - adaptive-expressions.ExpressionType.Exists
      - adaptive-expressions.ExpressionType.FilterNotEqual
      - adaptive-expressions.ExpressionType.First
      - adaptive-expressions.ExpressionType.Flatten
      - adaptive-expressions.ExpressionType.Float
      - adaptive-expressions.ExpressionType.Floor
      - adaptive-expressions.ExpressionType.Foreach
      - adaptive-expressions.ExpressionType.FormatDateTime
      - adaptive-expressions.ExpressionType.FormatEpoch
      - adaptive-expressions.ExpressionType.FormatNumber
      - adaptive-expressions.ExpressionType.FormatTicks
      - adaptive-expressions.ExpressionType.GetFutureTime
      - adaptive-expressions.ExpressionType.GetNextViableDate
      - adaptive-expressions.ExpressionType.GetNextViableTime
      - adaptive-expressions.ExpressionType.GetPastTime
      - adaptive-expressions.ExpressionType.GetPreviousViableDate
      - adaptive-expressions.ExpressionType.GetPreviousViableTime
      - adaptive-expressions.ExpressionType.GetProperty
      - adaptive-expressions.ExpressionType.GetTimeOfDay
      - adaptive-expressions.ExpressionType.GreaterThan
      - adaptive-expressions.ExpressionType.GreaterThanOrEqual
      - adaptive-expressions.ExpressionType.If
      - adaptive-expressions.ExpressionType.Ignore
      - adaptive-expressions.ExpressionType.IndexOf
      - adaptive-expressions.ExpressionType.IndicesAndValues
      - adaptive-expressions.ExpressionType.Int
      - adaptive-expressions.ExpressionType.Intersection
      - adaptive-expressions.ExpressionType.IsArray
      - adaptive-expressions.ExpressionType.IsBoolean
      - adaptive-expressions.ExpressionType.IsDate
      - adaptive-expressions.ExpressionType.IsDateRange
      - adaptive-expressions.ExpressionType.IsDateTime
      - adaptive-expressions.ExpressionType.IsDefinite
      - adaptive-expressions.ExpressionType.IsDuration
      - adaptive-expressions.ExpressionType.IsFloat
      - adaptive-expressions.ExpressionType.IsInteger
      - adaptive-expressions.ExpressionType.IsMatch
      - adaptive-expressions.ExpressionType.IsObject
      - adaptive-expressions.ExpressionType.IsPresent
      - adaptive-expressions.ExpressionType.IsString
      - adaptive-expressions.ExpressionType.IsTime
      - adaptive-expressions.ExpressionType.IsTimeRange
      - adaptive-expressions.ExpressionType.Join
      - adaptive-expressions.ExpressionType.JPath
      - adaptive-expressions.ExpressionType.Json
      - adaptive-expressions.ExpressionType.Lambda
      - adaptive-expressions.ExpressionType.Last
      - adaptive-expressions.ExpressionType.LastIndexOf
      - adaptive-expressions.ExpressionType.Length
      - adaptive-expressions.ExpressionType.LessThan
      - adaptive-expressions.ExpressionType.LessThanOrEqual
      - adaptive-expressions.ExpressionType.Max
      - adaptive-expressions.ExpressionType.Merge
      - adaptive-expressions.ExpressionType.Min
      - adaptive-expressions.ExpressionType.Mod
      - adaptive-expressions.ExpressionType.Month
      - adaptive-expressions.ExpressionType.Multiply
      - adaptive-expressions.ExpressionType.NewGuid
      - adaptive-expressions.ExpressionType.Not
      - adaptive-expressions.ExpressionType.NotEqual
      - adaptive-expressions.ExpressionType.Optional
      - adaptive-expressions.ExpressionType.Or
      - adaptive-expressions.ExpressionType.Power
      - adaptive-expressions.ExpressionType.Rand
      - adaptive-expressions.ExpressionType.Range
      - adaptive-expressions.ExpressionType.RemoveProperty
      - adaptive-expressions.ExpressionType.Replace
      - adaptive-expressions.ExpressionType.ReplaceIgnoreCase
      - adaptive-expressions.ExpressionType.Round
      - adaptive-expressions.ExpressionType.Select
      - adaptive-expressions.ExpressionType.SentenceCase
      - adaptive-expressions.ExpressionType.SetPathToValue
      - adaptive-expressions.ExpressionType.SetProperty
      - adaptive-expressions.ExpressionType.Skip
      - adaptive-expressions.ExpressionType.SortBy
      - adaptive-expressions.ExpressionType.SortByDescending
      - adaptive-expressions.ExpressionType.Split
      - adaptive-expressions.ExpressionType.StartOfDay
      - adaptive-expressions.ExpressionType.StartOfHour
      - adaptive-expressions.ExpressionType.StartOfMonth
      - adaptive-expressions.ExpressionType.StartsWith
      - adaptive-expressions.ExpressionType.String
      - adaptive-expressions.ExpressionType.SubArray
      - adaptive-expressions.ExpressionType.Substring
      - adaptive-expressions.ExpressionType.Subtract
      - adaptive-expressions.ExpressionType.SubtractFromTime
      - adaptive-expressions.ExpressionType.Sum
      - adaptive-expressions.ExpressionType.Take
      - adaptive-expressions.ExpressionType.Ticks
      - adaptive-expressions.ExpressionType.TicksToDays
      - adaptive-expressions.ExpressionType.TicksToHours
      - adaptive-expressions.ExpressionType.TicksToMinutes
      - adaptive-expressions.ExpressionType.TitleCase
      - adaptive-expressions.ExpressionType.ToLower
      - adaptive-expressions.ExpressionType.ToUpper
      - adaptive-expressions.ExpressionType.Trim
      - adaptive-expressions.ExpressionType.Union
      - adaptive-expressions.ExpressionType.Unique
      - adaptive-expressions.ExpressionType.UriComponent
      - adaptive-expressions.ExpressionType.UriComponentToString
      - adaptive-expressions.ExpressionType.UriHost
      - adaptive-expressions.ExpressionType.UriPath
      - adaptive-expressions.ExpressionType.UriPathAndQuery
      - adaptive-expressions.ExpressionType.UriPort
      - adaptive-expressions.ExpressionType.UriQuery
      - adaptive-expressions.ExpressionType.UriScheme
      - adaptive-expressions.ExpressionType.UtcNow
      - adaptive-expressions.ExpressionType.Where
      - adaptive-expressions.ExpressionType.Year
    langs:
      - typeScript
    type: class
    summary: Built-in expression types.
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Accessor
    name: Accessor
    fullName: Accessor
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Accessor: string = "Accessor"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Add
    name: Add
    fullName: Add
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Add: string = "+"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddDays
    name: AddDays
    fullName: AddDays
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddDays: string = "addDays"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddHours
    name: AddHours
    fullName: AddHours
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddHours: string = "addHours"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddMinutes
    name: AddMinutes
    fullName: AddMinutes
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddMinutes: string = "addMinutes"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddOrdinal
    name: AddOrdinal
    fullName: AddOrdinal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddOrdinal: string = "addOrdinal"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddProperty
    name: AddProperty
    fullName: AddProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddProperty: string = "addProperty"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddSeconds
    name: AddSeconds
    fullName: AddSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddSeconds: string = "addSeconds"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.AddToTime
    name: AddToTime
    fullName: AddToTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static AddToTime: string = "addToTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.And
    name: And
    fullName: And
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static And: string = "&&"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Average
    name: Average
    fullName: Average
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Average: string = "average"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Base64
    name: Base64
    fullName: Base64
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Base64: string = "base64"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Base64ToBinary
    name: Base64ToBinary
    fullName: Base64ToBinary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Base64ToBinary: string = "base64ToBinary"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Base64ToString
    name: Base64ToString
    fullName: Base64ToString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Base64ToString: string = "base64ToString"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Binary
    name: Binary
    fullName: Binary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Binary: string = "binary"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Bool
    name: Bool
    fullName: Bool
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Bool: string = "bool"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Ceiling
    name: Ceiling
    fullName: Ceiling
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Ceiling: string = "ceiling"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Coalesce
    name: Coalesce
    fullName: Coalesce
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Coalesce: string = "coalesce"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Concat
    name: Concat
    fullName: Concat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Concat: string = "concat"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Constant
    name: Constant
    fullName: Constant
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Constant: string = "Constant"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Contains
    name: Contains
    fullName: Contains
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Contains: string = "contains"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.ConvertFromUTC
    name: ConvertFromUTC
    fullName: ConvertFromUTC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ConvertFromUTC: string = "convertFromUTC"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.ConvertToUTC
    name: ConvertToUTC
    fullName: ConvertToUTC
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ConvertToUTC: string = "convertToUTC"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Count
    name: Count
    fullName: Count
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Count: string = "count"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.CountWord
    name: CountWord
    fullName: CountWord
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CountWord: string = "countWord"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.CreateArray
    name: CreateArray
    fullName: CreateArray
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static CreateArray: string = "createArray"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DataUri
    name: DataUri
    fullName: DataUri
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DataUri: string = "dataUri"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DataUriToBinary
    name: DataUriToBinary
    fullName: DataUriToBinary
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DataUriToBinary: string = "dataUriToBinary"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DataUriToString
    name: DataUriToString
    fullName: DataUriToString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DataUriToString: string = "dataUriToString"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Date
    name: Date
    fullName: Date
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Date: string = "date"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DateReadBack
    name: DateReadBack
    fullName: DateReadBack
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DateReadBack: string = "dateReadBack"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DateTimeDiff
    name: DateTimeDiff
    fullName: DateTimeDiff
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DateTimeDiff: string = "dateTimeDiff"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DayOfMonth
    name: DayOfMonth
    fullName: DayOfMonth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DayOfMonth: string = "dayOfMonth"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DayOfWeek
    name: DayOfWeek
    fullName: DayOfWeek
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DayOfWeek: string = "dayOfWeek"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.DayOfYear
    name: DayOfYear
    fullName: DayOfYear
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static DayOfYear: string = "dayOfYear"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Divide
    name: Divide
    fullName: Divide
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Divide: string = "/"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Element
    name: Element
    fullName: Element
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Element: string = "Element"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Empty
    name: Empty
    fullName: Empty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Empty: string = "empty"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.EndsWith
    name: EndsWith
    fullName: EndsWith
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static EndsWith: string = "endsWith"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Equal
    name: Equal
    fullName: Equal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Equal: string = "=="'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Exists
    name: Exists
    fullName: Exists
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Exists: string = "exists"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.FilterNotEqual
    name: FilterNotEqual
    fullName: FilterNotEqual
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FilterNotEqual: string = "filterNotEqual"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.First
    name: First
    fullName: First
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static First: string = "first"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Flatten
    name: Flatten
    fullName: Flatten
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Flatten: string = "flatten"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Float
    name: Float
    fullName: Float
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Float: string = "float"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Floor
    name: Floor
    fullName: Floor
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Floor: string = "floor"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Foreach
    name: Foreach
    fullName: Foreach
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Foreach: string = "foreach"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.FormatDateTime
    name: FormatDateTime
    fullName: FormatDateTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FormatDateTime: string = "formatDateTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.FormatEpoch
    name: FormatEpoch
    fullName: FormatEpoch
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FormatEpoch: string = "formatEpoch"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.FormatNumber
    name: FormatNumber
    fullName: FormatNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FormatNumber: string = "formatNumber"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.FormatTicks
    name: FormatTicks
    fullName: FormatTicks
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static FormatTicks: string = "formatTicks"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetFutureTime
    name: GetFutureTime
    fullName: GetFutureTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetFutureTime: string = "getFutureTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetNextViableDate
    name: GetNextViableDate
    fullName: GetNextViableDate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetNextViableDate: string = "getNextViableDate"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetNextViableTime
    name: GetNextViableTime
    fullName: GetNextViableTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetNextViableTime: string = "getNextViableTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetPastTime
    name: GetPastTime
    fullName: GetPastTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetPastTime: string = "getPastTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetPreviousViableDate
    name: GetPreviousViableDate
    fullName: GetPreviousViableDate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetPreviousViableDate: string = "getPreviousViableDate"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetPreviousViableTime
    name: GetPreviousViableTime
    fullName: GetPreviousViableTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetPreviousViableTime: string = "getPreviousViableTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetProperty
    name: GetProperty
    fullName: GetProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetProperty: string = "getProperty"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GetTimeOfDay
    name: GetTimeOfDay
    fullName: GetTimeOfDay
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GetTimeOfDay: string = "getTimeOfDay"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GreaterThan
    name: GreaterThan
    fullName: GreaterThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GreaterThan: string = ">"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.GreaterThanOrEqual
    name: GreaterThanOrEqual
    fullName: GreaterThanOrEqual
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static GreaterThanOrEqual: string = ">="'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.If
    name: If
    fullName: If
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static If: string = "if"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Ignore
    name: Ignore
    fullName: Ignore
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Ignore: string = "ignore"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IndexOf
    name: IndexOf
    fullName: IndexOf
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IndexOf: string = "indexOf"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IndicesAndValues
    name: IndicesAndValues
    fullName: IndicesAndValues
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IndicesAndValues: string = "indicesAndValues"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Int
    name: Int
    fullName: Int
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Int: string = "int"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Intersection
    name: Intersection
    fullName: Intersection
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Intersection: string = "intersection"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsArray
    name: IsArray
    fullName: IsArray
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsArray: string = "isArray"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsBoolean
    name: IsBoolean
    fullName: IsBoolean
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsBoolean: string = "isBoolean"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsDate
    name: IsDate
    fullName: IsDate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsDate: string = "isDate"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsDateRange
    name: IsDateRange
    fullName: IsDateRange
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsDateRange: string = "isDateRange"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsDateTime
    name: IsDateTime
    fullName: IsDateTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsDateTime: string = "isDateTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsDefinite
    name: IsDefinite
    fullName: IsDefinite
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsDefinite: string = "isDefinite"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsDuration
    name: IsDuration
    fullName: IsDuration
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsDuration: string = "isDuration"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsFloat
    name: IsFloat
    fullName: IsFloat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsFloat: string = "isFloat"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsInteger
    name: IsInteger
    fullName: IsInteger
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsInteger: string = "isInteger"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsMatch
    name: IsMatch
    fullName: IsMatch
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsMatch: string = "isMatch"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsObject
    name: IsObject
    fullName: IsObject
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsObject: string = "isObject"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsPresent
    name: IsPresent
    fullName: IsPresent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsPresent: string = "isPresent"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsString
    name: IsString
    fullName: IsString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsString: string = "isString"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsTime
    name: IsTime
    fullName: IsTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsTime: string = "isTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.IsTimeRange
    name: IsTimeRange
    fullName: IsTimeRange
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static IsTimeRange: string = "isTimeRange"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Join
    name: Join
    fullName: Join
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Join: string = "join"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.JPath
    name: JPath
    fullName: JPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static JPath: string = "jPath"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Json
    name: Json
    fullName: Json
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Json: string = "json"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Lambda
    name: Lambda
    fullName: Lambda
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Lambda: string = "Lambda"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Last
    name: Last
    fullName: Last
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Last: string = "last"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.LastIndexOf
    name: LastIndexOf
    fullName: LastIndexOf
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LastIndexOf: string = "lastIndexOf"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Length
    name: Length
    fullName: Length
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Length: string = "length"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.LessThan
    name: LessThan
    fullName: LessThan
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LessThan: string = "<"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.LessThanOrEqual
    name: LessThanOrEqual
    fullName: LessThanOrEqual
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static LessThanOrEqual: string = "<="'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Max
    name: Max
    fullName: Max
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Max: string = "max"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Merge
    name: Merge
    fullName: Merge
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Merge: string = "merge"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Min
    name: Min
    fullName: Min
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Min: string = "min"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Mod
    name: Mod
    fullName: Mod
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Mod: string = "%"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Month
    name: Month
    fullName: Month
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Month: string = "month"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Multiply
    name: Multiply
    fullName: Multiply
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Multiply: string = "*"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.NewGuid
    name: NewGuid
    fullName: NewGuid
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NewGuid: string = "newGuid"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Not
    name: Not
    fullName: Not
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Not: string = "!"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.NotEqual
    name: NotEqual
    fullName: NotEqual
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static NotEqual: string = "!="'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Optional
    name: Optional
    fullName: Optional
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Optional: string = "optional"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Or
    name: Or
    fullName: Or
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Or: string = "||"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Power
    name: Power
    fullName: Power
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Power: string = "^"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Rand
    name: Rand
    fullName: Rand
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Rand: string = "rand"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Range
    name: Range
    fullName: Range
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Range: string = "range"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.RemoveProperty
    name: RemoveProperty
    fullName: RemoveProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static RemoveProperty: string = "removeProperty"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Replace
    name: Replace
    fullName: Replace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Replace: string = "replace"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.ReplaceIgnoreCase
    name: ReplaceIgnoreCase
    fullName: ReplaceIgnoreCase
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ReplaceIgnoreCase: string = "replaceIgnoreCase"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Round
    name: Round
    fullName: Round
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Round: string = "round"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Select
    name: Select
    fullName: Select
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Select: string = "select"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SentenceCase
    name: SentenceCase
    fullName: SentenceCase
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SentenceCase: string = "sentenceCase"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SetPathToValue
    name: SetPathToValue
    fullName: SetPathToValue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SetPathToValue: string = "setPathToValue"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SetProperty
    name: SetProperty
    fullName: SetProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SetProperty: string = "setProperty"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Skip
    name: Skip
    fullName: Skip
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Skip: string = "skip"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SortBy
    name: SortBy
    fullName: SortBy
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SortBy: string = "sortBy"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SortByDescending
    name: SortByDescending
    fullName: SortByDescending
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SortByDescending: string = "sortByDescending"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Split
    name: Split
    fullName: Split
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Split: string = "split"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.StartOfDay
    name: StartOfDay
    fullName: StartOfDay
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static StartOfDay: string = "startOfDay"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.StartOfHour
    name: StartOfHour
    fullName: StartOfHour
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static StartOfHour: string = "startOfHour"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.StartOfMonth
    name: StartOfMonth
    fullName: StartOfMonth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static StartOfMonth: string = "startOfMonth"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.StartsWith
    name: StartsWith
    fullName: StartsWith
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static StartsWith: string = "startsWith"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.String
    name: String
    fullName: String
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static String: string = "string"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SubArray
    name: SubArray
    fullName: SubArray
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SubArray: string = "subArray"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Substring
    name: Substring
    fullName: Substring
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Substring: string = "substring"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Subtract
    name: Subtract
    fullName: Subtract
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Subtract: string = "-"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.SubtractFromTime
    name: SubtractFromTime
    fullName: SubtractFromTime
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static SubtractFromTime: string = "subtractFromTime"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Sum
    name: Sum
    fullName: Sum
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Sum: string = "sum"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Take
    name: Take
    fullName: Take
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Take: string = "take"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Ticks
    name: Ticks
    fullName: Ticks
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Ticks: string = "ticks"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.TicksToDays
    name: TicksToDays
    fullName: TicksToDays
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TicksToDays: string = "ticksToDays"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.TicksToHours
    name: TicksToHours
    fullName: TicksToHours
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TicksToHours: string = "ticksToHours"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.TicksToMinutes
    name: TicksToMinutes
    fullName: TicksToMinutes
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TicksToMinutes: string = "ticksToMinutes"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.TitleCase
    name: TitleCase
    fullName: TitleCase
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static TitleCase: string = "titleCase"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.ToLower
    name: ToLower
    fullName: ToLower
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ToLower: string = "toLower"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.ToUpper
    name: ToUpper
    fullName: ToUpper
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static ToUpper: string = "toUpper"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Trim
    name: Trim
    fullName: Trim
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Trim: string = "trim"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Union
    name: Union
    fullName: Union
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Union: string = "union"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Unique
    name: Unique
    fullName: Unique
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Unique: string = "unique"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriComponent
    name: UriComponent
    fullName: UriComponent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriComponent: string = "uriComponent"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriComponentToString
    name: UriComponentToString
    fullName: UriComponentToString
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriComponentToString: string = "uriComponentToString"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriHost
    name: UriHost
    fullName: UriHost
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriHost: string = "uriHost"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriPath
    name: UriPath
    fullName: UriPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriPath: string = "uriPath"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriPathAndQuery
    name: UriPathAndQuery
    fullName: UriPathAndQuery
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriPathAndQuery: string = "uriPathAndQuery"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriPort
    name: UriPort
    fullName: UriPort
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriPort: string = "uriPort"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriQuery
    name: UriQuery
    fullName: UriQuery
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriQuery: string = "uriQuery"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UriScheme
    name: UriScheme
    fullName: UriScheme
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UriScheme: string = "uriScheme"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.UtcNow
    name: UtcNow
    fullName: UtcNow
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static UtcNow: string = "utcNow"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Where
    name: Where
    fullName: Where
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Where: string = "where"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionType.Year
    name: Year
    fullName: Year
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static Year: string = "year"'
      return:
        type:
          - string
        description: ''
    package: adaptive-expressions

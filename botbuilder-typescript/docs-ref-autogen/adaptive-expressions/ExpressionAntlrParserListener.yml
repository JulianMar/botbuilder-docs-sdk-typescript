### YamlMime:UniversalReference
items:
  - uid: adaptive-expressions.ExpressionAntlrParserListener
    name: ExpressionAntlrParserListener
    fullName: ExpressionAntlrParserListener
    children:
      - adaptive-expressions.ExpressionAntlrParserListener.enterArgsList
      - adaptive-expressions.ExpressionAntlrParserListener.enterArrayCreationExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterBinaryOpExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterEveryRule
      - adaptive-expressions.ExpressionAntlrParserListener.enterExpression
      - adaptive-expressions.ExpressionAntlrParserListener.enterFile
      - adaptive-expressions.ExpressionAntlrParserListener.enterFuncInvokeExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterIdAtom
      - adaptive-expressions.ExpressionAntlrParserListener.enterIndexAccessExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterJsonCreationExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterKey
      - adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePair
      - adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePairList
      - adaptive-expressions.ExpressionAntlrParserListener.enterLambda
      - adaptive-expressions.ExpressionAntlrParserListener.enterMemberAccessExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterNumericAtom
      - adaptive-expressions.ExpressionAntlrParserListener.enterParenthesisExp
      - adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExp
      - >-
        adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExpression
      - adaptive-expressions.ExpressionAntlrParserListener.enterStringAtom
      - >-
        adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolation
      - >-
        adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolationAtom
      - adaptive-expressions.ExpressionAntlrParserListener.enterTextContent
      - adaptive-expressions.ExpressionAntlrParserListener.enterUnaryOpExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitArgsList
      - adaptive-expressions.ExpressionAntlrParserListener.exitArrayCreationExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitBinaryOpExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitEveryRule
      - adaptive-expressions.ExpressionAntlrParserListener.exitExpression
      - adaptive-expressions.ExpressionAntlrParserListener.exitFile
      - adaptive-expressions.ExpressionAntlrParserListener.exitFuncInvokeExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitIdAtom
      - adaptive-expressions.ExpressionAntlrParserListener.exitIndexAccessExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitJsonCreationExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitKey
      - adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePair
      - adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePairList
      - adaptive-expressions.ExpressionAntlrParserListener.exitLambda
      - adaptive-expressions.ExpressionAntlrParserListener.exitMemberAccessExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitNumericAtom
      - adaptive-expressions.ExpressionAntlrParserListener.exitParenthesisExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExp
      - adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExpression
      - adaptive-expressions.ExpressionAntlrParserListener.exitStringAtom
      - >-
        adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolation
      - >-
        adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolationAtom
      - adaptive-expressions.ExpressionAntlrParserListener.exitTextContent
      - adaptive-expressions.ExpressionAntlrParserListener.exitUnaryOpExp
      - adaptive-expressions.ExpressionAntlrParserListener.visitErrorNode
      - adaptive-expressions.ExpressionAntlrParserListener.visitTerminal
    langs:
      - typeScript
    type: interface
    summary: |-
      This interface defines a complete listener for a parse tree produced by
      `ExpressionAntlrParser`.
    extends:
      name: ParseTreeListener
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterArgsList
    name: enterArgsList
    fullName: enterArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.argsList`.
    optional: true
    syntax:
      content: 'enterArgsList?: (ctx: ArgsListContext) => void'
      return:
        type:
          - '(ctx: ArgsListContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterArrayCreationExp
    name: enterArrayCreationExp
    fullName: enterArrayCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterArrayCreationExp?: (ctx: ArrayCreationExpContext) => void'
      return:
        type:
          - '(ctx: ArrayCreationExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterBinaryOpExp
    name: enterBinaryOpExp
    fullName: enterBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'enterBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterEveryRule
    name: enterEveryRule
    fullName: enterEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'enterEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterExpression
    name: enterExpression
    fullName: enterExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'enterExpression?: (ctx: ExpressionContext) => void'
      return:
        type:
          - '(ctx: ExpressionContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterFile
    name: enterFile
    fullName: enterFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.file`.
    optional: true
    syntax:
      content: 'enterFile?: (ctx: FileContext) => void'
      return:
        type:
          - '(ctx: FileContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterFuncInvokeExp
    name: enterFuncInvokeExp
    fullName: enterFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterIdAtom
    name: enterIdAtom
    fullName: enterIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type:
          - '(ctx: IdAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterIndexAccessExp
    name: enterIndexAccessExp
    fullName: enterIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterJsonCreationExp
    name: enterJsonCreationExp
    fullName: enterJsonCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterJsonCreationExp?: (ctx: JsonCreationExpContext) => void'
      return:
        type:
          - '(ctx: JsonCreationExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterKey
    name: enterKey
    fullName: enterKey
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.key`.
    optional: true
    syntax:
      content: 'enterKey?: (ctx: KeyContext) => void'
      return:
        type:
          - '(ctx: KeyContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePair
    name: enterKeyValuePair
    fullName: enterKeyValuePair
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    optional: true
    syntax:
      content: 'enterKeyValuePair?: (ctx: KeyValuePairContext) => void'
      return:
        type:
          - '(ctx: KeyValuePairContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePairList
    name: enterKeyValuePairList
    fullName: enterKeyValuePairList
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    optional: true
    syntax:
      content: 'enterKeyValuePairList?: (ctx: KeyValuePairListContext) => void'
      return:
        type:
          - '(ctx: KeyValuePairListContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterLambda
    name: enterLambda
    fullName: enterLambda
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.lambda`.
    optional: true
    syntax:
      content: 'enterLambda?: (ctx: LambdaContext) => void'
      return:
        type:
          - '(ctx: LambdaContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterMemberAccessExp
    name: enterMemberAccessExp
    fullName: enterMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterNumericAtom
    name: enterNumericAtom
    fullName: enterNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type:
          - '(ctx: NumericAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterParenthesisExp
    name: enterParenthesisExp
    fullName: enterParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExp
    name: enterPrimaryExp
    fullName: enterPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'enterPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExpression
    name: enterPrimaryExpression
    fullName: enterPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterStringAtom
    name: enterStringAtom
    fullName: enterStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type:
          - '(ctx: StringAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolation
    name: enterStringInterpolation
    fullName: enterStringInterpolation
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Enter a parse tree produced by
      `ExpressionAntlrParser.stringInterpolation`.
    optional: true
    syntax:
      content: 'enterStringInterpolation?: (ctx: StringInterpolationContext) => void'
      return:
        type:
          - '(ctx: StringInterpolationContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolationAtom
    name: enterStringInterpolationAtom
    fullName: enterStringInterpolationAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: >-
        enterStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        void
      return:
        type:
          - '(ctx: StringInterpolationAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterTextContent
    name: enterTextContent
    fullName: enterTextContent
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionAntlrParser.textContent`.
    optional: true
    syntax:
      content: 'enterTextContent?: (ctx: TextContentContext) => void'
      return:
        type:
          - '(ctx: TextContentContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.enterUnaryOpExp
    name: enterUnaryOpExp
    fullName: enterUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'enterUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitArgsList
    name: exitArgsList
    fullName: exitArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.argsList`.
    optional: true
    syntax:
      content: 'exitArgsList?: (ctx: ArgsListContext) => void'
      return:
        type:
          - '(ctx: ArgsListContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitArrayCreationExp
    name: exitArrayCreationExp
    fullName: exitArrayCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitArrayCreationExp?: (ctx: ArrayCreationExpContext) => void'
      return:
        type:
          - '(ctx: ArrayCreationExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitBinaryOpExp
    name: exitBinaryOpExp
    fullName: exitBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'exitBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitEveryRule
    name: exitEveryRule
    fullName: exitEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'exitEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitExpression
    name: exitExpression
    fullName: exitExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'exitExpression?: (ctx: ExpressionContext) => void'
      return:
        type:
          - '(ctx: ExpressionContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitFile
    name: exitFile
    fullName: exitFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.file`.
    optional: true
    syntax:
      content: 'exitFile?: (ctx: FileContext) => void'
      return:
        type:
          - '(ctx: FileContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitFuncInvokeExp
    name: exitFuncInvokeExp
    fullName: exitFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitIdAtom
    name: exitIdAtom
    fullName: exitIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type:
          - '(ctx: IdAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitIndexAccessExp
    name: exitIndexAccessExp
    fullName: exitIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitJsonCreationExp
    name: exitJsonCreationExp
    fullName: exitJsonCreationExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitJsonCreationExp?: (ctx: JsonCreationExpContext) => void'
      return:
        type:
          - '(ctx: JsonCreationExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitKey
    name: exitKey
    fullName: exitKey
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.key`.
    optional: true
    syntax:
      content: 'exitKey?: (ctx: KeyContext) => void'
      return:
        type:
          - '(ctx: KeyContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePair
    name: exitKeyValuePair
    fullName: exitKeyValuePair
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    optional: true
    syntax:
      content: 'exitKeyValuePair?: (ctx: KeyValuePairContext) => void'
      return:
        type:
          - '(ctx: KeyValuePairContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePairList
    name: exitKeyValuePairList
    fullName: exitKeyValuePairList
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    optional: true
    syntax:
      content: 'exitKeyValuePairList?: (ctx: KeyValuePairListContext) => void'
      return:
        type:
          - '(ctx: KeyValuePairListContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitLambda
    name: exitLambda
    fullName: exitLambda
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.lambda`.
    optional: true
    syntax:
      content: 'exitLambda?: (ctx: LambdaContext) => void'
      return:
        type:
          - '(ctx: LambdaContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitMemberAccessExp
    name: exitMemberAccessExp
    fullName: exitMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitNumericAtom
    name: exitNumericAtom
    fullName: exitNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type:
          - '(ctx: NumericAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitParenthesisExp
    name: exitParenthesisExp
    fullName: exitParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExp
    name: exitPrimaryExp
    fullName: exitPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'exitPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExpression
    name: exitPrimaryExpression
    fullName: exitPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitStringAtom
    name: exitStringAtom
    fullName: exitStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type:
          - '(ctx: StringAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolation
    name: exitStringInterpolation
    fullName: exitStringInterpolation
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.stringInterpolation`.
    optional: true
    syntax:
      content: 'exitStringInterpolation?: (ctx: StringInterpolationContext) => void'
      return:
        type:
          - '(ctx: StringInterpolationContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolationAtom
    name: exitStringInterpolationAtom
    fullName: exitStringInterpolationAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    optional: true
    syntax:
      content: >-
        exitStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        void
      return:
        type:
          - '(ctx: StringInterpolationAtomContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitTextContent
    name: exitTextContent
    fullName: exitTextContent
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionAntlrParser.textContent`.
    optional: true
    syntax:
      content: 'exitTextContent?: (ctx: TextContentContext) => void'
      return:
        type:
          - '(ctx: TextContentContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.exitUnaryOpExp
    name: exitUnaryOpExp
    fullName: exitUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    optional: true
    syntax:
      content: 'exitUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.visitErrorNode
    name: visitErrorNode
    fullName: visitErrorNode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitErrorNode?: (node: ErrorNode) => void'
      return:
        type:
          - '(node: ErrorNode) => void'
        description: ''
    package: adaptive-expressions
  - uid: adaptive-expressions.ExpressionAntlrParserListener.visitTerminal
    name: visitTerminal
    fullName: visitTerminal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitTerminal?: (node: TerminalNode) => void'
      return:
        type:
          - '(node: TerminalNode) => void'
        description: ''
    package: adaptive-expressions
